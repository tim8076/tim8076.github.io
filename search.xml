<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022-10-29-vite-intro</title>
    <url>/2022/10/29/2022-10-29-vite-intro/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JS-正則表達式</title>
    <url>/2022/10/14/2022-10-14-1-Regular-Expression/</url>
    <content><![CDATA[<h2 id="什麼是正則表達式"><a href="#什麼是正則表達式" class="headerlink" title="什麼是正則表達式"></a>什麼是正則表達式</h2><p>正則表達式(RegExp , regular expression) 用於確認字串是否符合所定義的規則。在 JavaScript 中，正規表達式也是物件，這些模式在 RegExp 的 exec 和 test  方法中，以及 String 的 match、replace、search 、split 等方法中被運用。</p>
<h2 id="建立正規表達式"><a href="#建立正規表達式" class="headerlink" title="建立正規表達式"></a>建立正規表達式</h2><p>可透過下列兩種方法去建立一條正規表達式：</p>
<p>正規表達式字面值: 使用斜槓表示開始及結束。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> re = <span class="regexp">/ab+c/</span>;</span><br></pre></td></tr></table></figure>

<p>或呼叫 RegExp 物件的建構函式，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;ab+c&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在進入規則語法之前，先介紹正則表達式的一個簡單的測試方法 test( )。test ( ) 方法用以表示參數字串是否符合正則表達式的字串格式。</p>
<h2 id="撰寫正規表達模式"><a href="#撰寫正規表達模式" class="headerlink" title="撰寫正規表達模式"></a>撰寫正規表達模式</h2><ul>
<li>使用簡易模式</li>
</ul>
<p>直接匹配 &#x2F; &#x2F; 內的字符，比如：&#x2F;abc&#x2F; ，會符合僅僅字符 ‘abc’ 同時出現並按照這個順序的情形。</p>
<ul>
<li>使用特殊字元</li>
</ul>
<p>如果需要更多條件的匹配，比如搜尋一或多個 ‘b’，或者搜尋空格，會需要特殊字元的字符。</p>
<h3 id="符合格式"><a href="#符合格式" class="headerlink" title="符合格式"></a>符合格式</h3><ul>
<li>^ : 字串開頭須符合字串格式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> exp = <span class="regexp">/^ab/</span>; </span><br><span class="line"></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;cab&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>$ : 字串結尾須符合字串格式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> exp = <span class="regexp">/ab$/</span>; </span><br><span class="line"></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">// false</span></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;cab&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>\d : 代表任意數字，也等同於 [0<del>9] 反之，\D 代表除了數字以外的字元，也等同於 [^0</del>9]</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> exp = <span class="regexp">/\d/</span>; </span><br><span class="line"></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">// false</span></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;a23&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>\w : 代表所有字母、數字及底線，也等同於 [A-Za-z0-9_] ；\W 代表除了所有字母、數字及底線以外的字元，也等同於 [^A-Za-z0-9_]</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> exp = <span class="regexp">/\w/</span>; </span><br><span class="line"></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;a23_&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;?&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h3 id="符號"><a href="#符號" class="headerlink" title="符號"></a>符號</h3><ul>
<li>| : 符合前後任一值即可</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> exp = <span class="regexp">/a|b/</span>; </span><br><span class="line"></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;aac&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;ddd&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>-: 連字符，代表連續的字符，如 數字 1 - 3 可以寫成 [1-3]，英文 a-z 寫成 [a-z];</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> exp = <span class="regexp">/[1-3]/</span>; </span><br><span class="line"></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;2&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;5&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h3 id="修飾符"><a href="#修飾符" class="headerlink" title="修飾符"></a>修飾符</h3><ul>
<li><p>g 修飾符：欲使比較對象爲字串全部時可以加上 g 修飾符，否則在一般狀況下可能只比較第一個符合的對象就停止了。</p>
</li>
<li><p>i 修飾符：表示比較條件不分大小寫</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> exp = <span class="regexp">/HELLO/i</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">test</span>(<span class="string">&#x27;hello&#x27;</span>)); <span class="comment">// true </span></span><br></pre></td></tr></table></figure>

<h3 id="出現次數"><a href="#出現次數" class="headerlink" title="出現次數"></a>出現次數</h3><ul>
<li>{n} : 使用大括號指定次數，{n} 只有一個數字代表指定次數；{n,m} 兩個數字時，代表介於 n~m 次；省略其中一個數字代表只指定下限或上限，例如 {n,} 代表至少 n 次，{,m} 代表低於 m 次。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> exp = <span class="regexp">/a&#123;2&#125;/</span>; </span><br><span class="line"></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;aab&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li>: 匹配前一字元 0 至多次。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> exp = <span class="regexp">/b*/</span>; <span class="comment">// 0個或多個b</span></span><br><span class="line"></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;bbb&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;ccc&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>? : 匹配前一字元 0 至 1 次。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> exp = <span class="regexp">/b?/</span>; <span class="comment">// 0 個或 1 個 b</span></span><br><span class="line"></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;bbb&#x27;</span>) <span class="comment">// false</span></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;ccc&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li>: 匹配前一字元 1 至多次。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> exp = <span class="regexp">/b+/</span>; <span class="comment">// 1個或多個b</span></span><br><span class="line"></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;bbb&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">exp.<span class="title function_">test</span>(<span class="string">&#x27;ccc&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="字串方法"><a href="#字串方法" class="headerlink" title="字串方法"></a>字串方法</h2><ul>
<li>match(): 回傳比對後符合的結果陣列，若無符合對象，回傳 null</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> exp = <span class="regexp">/\w/g</span>;</span><br><span class="line"></span><br><span class="line">string.<span class="title function_">match</span>(exp); </span><br><span class="line"><span class="comment">//  [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;w&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>search()：回傳搜尋第一個比對後符合結果的位置，如果沒有任何符合結果，就回傳 -1;</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> exp = <span class="regexp">/h/</span>;</span><br><span class="line"><span class="keyword">const</span> exp2 =<span class="regexp">/\d/</span>;</span><br><span class="line"></span><br><span class="line">string.<span class="title function_">search</span>(exp);  <span class="comment">// 0</span></span><br><span class="line">string.<span class="title function_">search</span>(exp2); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>replace(): 替換比對後符合的值。接收兩個參數，第一個參數爲正則表達式，第二個參數爲欲替換的值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> exp = <span class="regexp">/\d/</span>;</span><br><span class="line"><span class="keyword">const</span> exp2 =<span class="regexp">/\w/</span>;</span><br><span class="line"></span><br><span class="line">string.<span class="title function_">replace</span>(exp, <span class="string">&#x27;a&#x27;</span>); <span class="comment">// &#x27;hello world&#x27;</span></span><br><span class="line">string.<span class="title function_">replace</span>(exp2, <span class="string">&#x27;a&#x27;</span>); <span class="comment">// &#x27;aello world&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果要比對全部就加上 g </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> exp3 =<span class="regexp">/\w/g</span>;</span><br><span class="line">string.<span class="title function_">replace</span>(exp3, <span class="string">&#x27;a&#x27;</span>); <span class="comment">// &#x27;aaaaa aaaaa&#x27;</span></span><br></pre></td></tr></table></figure>




]]></content>
      <tags>
        <tag>正則表達式</tag>
      </tags>
  </entry>
  <entry>
    <title>從 0 開始的 webpack 5 專案(1) 起源</title>
    <url>/2022/10/06/2022-10-6-webpack-5/</url>
    <content><![CDATA[<h2 id="什麼是-webpack"><a href="#什麼是-webpack" class="headerlink" title="什麼是 webpack ?"></a>什麼是 webpack ?</h2><p>在以前做網頁開發時，可能只需要處理html、css、js檔案就可以了。但現在前端開發工具越來越多，像css有scss的預處理器、html可以用pug來寫等等。此時就須要一個工具來將這些scss、pug檔案編譯成css跟html。</p>
<p>webpack 就是主要負責幫我們整合並打包成瀏覽器看得懂的 CSS、HTML、JavaScript 以及 Image。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/welcomewebworld-4097b.appspot.com/o/blogImg%2FWebpack%2F%E6%88%AA%E5%9C%96%202021-02-28%2021.13.11.png?alt=media&token=9c4cb37f-a59f-48ec-ace6-14b16918d525"></p>
<h2 id="專案安裝"><a href="#專案安裝" class="headerlink" title="專案安裝"></a>專案安裝</h2><p>首先先開啟一個新的專案資料夾，叫做 webpack-starter，並用 npm -y 來新增 package.json檔案。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir webpack-starter</span><br><span class="line">cd webpack-tutorial</span><br><span class="line">npm init -y # creates a default package.json</span><br></pre></td></tr></table></figure>

<p>再來安裝 <code>webpack</code> 和 <code>webpack-cli</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -D webpack webpack-cli</span><br></pre></td></tr></table></figure>

<p>再來在專案下新增 src 資料夾，並在 src 裡新增 index.js檔案</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Interesting!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>到這邊就完成專案基本設定囉。</p>
]]></content>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>從 0 開始的 webpack 5 專案(3) html-webpack-plugin</title>
    <url>/2022/10/07/2022-10-7-1-webpack-html/</url>
    <content><![CDATA[<h2 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h2><p>目前我們已經可以打包隨機名稱的 js 到 dist 資料夾。但因為每次打包 js 名稱都是隨機的，我們需要一個能動態引入js檔名的html template，這邊會用到 html-webpack-plugin 這個插件。</p>
<ul>
<li>html-webpack-plugin : 從template模板產生 html</li>
</ul>
<p>首先安裝插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -D html-webpack-plugin</span><br></pre></td></tr></table></figure>

<p>然後在 src 資料夾裡 新增 template.html，html裡的 head 可以用變數的方式帶入。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 congif 檔新增 plugin ，輸出的 filename 設定為 index.html，template則連結到目前template的位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">webpack.<span class="property">config</span>.<span class="property">js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;webpack Boilerplate&#x27;</span>,</span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/template.html&#x27;</span>), <span class="comment">// template file</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>, <span class="comment">// output file</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後執行 npm run build 就會產生 dist 資料夾，而裡頭有輸出好的 index.html。</p>
]]></content>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>從 0 開始的 webpack 5 專案(2) configuration</title>
    <url>/2022/10/06/2022-10-6-1-webpack-config/</url>
    <content><![CDATA[<p>上一篇安裝完好後，我們的專案目前是這樣</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node_modules</span><br><span class="line">src</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure>

<p>再來在跟目錄上新增 ‵webpack.config.js&#96;。</p>
<h2 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h2><p>通常我們在開發時，都會有開發模式、部署模式這兩種模式，在此就主要是透過 mode 屬性來設置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> =  &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h2><p>第一步要設定的是 entry point，也就是 webpack 會以哪支檔案作為進入點來開始打包檔案。換句話說，所有要被編譯的檔案都要import到進入點。</p>
<p>此範例中，我們將進入點設在 <code>src/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">main</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Output 是打包後檔案輸出的位置，設定在 <code>/dist</code> 資料夾。這邊的 [name] 會自動帶入 entry 設定的 main。[contenthash] 則是會生成一組 hash 而這個生成邏輯會依據提取的內容來生成。</p>
<p>為什麼會使用到 hash，最主要是避免瀏覽器的緩存問題，我們在開發時，通常會瘋狂的重新整理，而這過程就有可能導致緩存發生而無法確定我們修改的內容，那麼透過 hash 每一次存擋就重新生成不同的檔案名稱，這樣子瀏覽器就不會緩存內容了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].[contenthash].bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後在 package.json 中的 scripts 屬性增加一行啟動指令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>然後在終端機輸入 <code>npm run build</code> 就可以成功打包檔案。此時專案資料夾下會多出一個 dist 資料夾。</p>
]]></content>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>從 0 開始的 webpack 5 專案(4) webpack-clean</title>
    <url>/2022/10/07/2022-10-7-2-webpack-clean/</url>
    <content><![CDATA[<h2 id="清除檔案"><a href="#清除檔案" class="headerlink" title="清除檔案"></a>清除檔案</h2><p>開發時如果不斷執行 npm run dev 、npm run build ，會在 dist 產生許多打包後的檔案。為了讓每次打包時都能清除上一次打包的檔案，會用到 clean-webpack-plugin 這個 plugin。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -D clean-webpack-plugin</span><br></pre></td></tr></table></figure>

<p>安裝後引入config</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣就完成囉。</p>
]]></content>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>從 0 開始的 webpack 5 專案(5) webpack-dev-server</title>
    <url>/2022/10/07/2022-10-7-3-webpack-devServer/</url>
    <content><![CDATA[<h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>每當有修改檔案就要 <code>npm run build</code> 來打包會很麻煩，而且當檔案越多包時間就越久。所以可以新增模擬伺服器的插件，它會自動開啟一個瀏覽器以便我們即時看到畫面上的修改與變化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -D webpack-dev-server</span><br></pre></td></tr></table></figure>

<p>然後在 config 裡新增 devServer 選項</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">static</span>: &#123;</span><br><span class="line">      <span class="attr">directory</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>port: 選擇開啟網頁的 port</li>
<li>compress: 將我們所有的檔案壓縮變成 .gzip 的檔案，這樣子在我開啟瀏覽器時的速度就會比較快</li>
<li>open: 你執行模擬伺服器時是否要自動開啟瀏覽器的意思</li>
<li>hot: 又稱之為 HMR (Hot Module Replacement)，透過啟用這個屬性，當我們修改 src 底下的資源時，也會同時更新模擬伺服器。</li>
</ul>
<p>最後在 package.json 裡新增 dev 指令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack serve&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>接下來只需要輸入 npm run dev 就可以開啟模擬伺服器了。</p>
]]></content>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(1) Node.js 安裝</title>
    <url>/2022/07/10/2022-07-10-1-nodeJs-install/</url>
    <content><![CDATA[<h2 id="什麼是-NodeJs"><a href="#什麼是-NodeJs" class="headerlink" title="什麼是 NodeJs"></a>什麼是 NodeJs</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/20220710.png?alt=media&token=094bcae5-8d76-462f-95e1-8ad790ab0fcd" alt="v8引擎"></p>
<p>Node.js是一個基於V8 JavaScript引擎的JavaScript執行環境，透過V8引擎將JavaScript程式碼編譯成機器語言讓電腦運作。除了nodeJS以外，像Chrome瀏覽器也使用了 V8 引擎來執行JavaScript。</p>
<h2 id="安裝-nodeJs"><a href="#安裝-nodeJs" class="headerlink" title="安裝 nodeJs"></a>安裝 nodeJs</h2><p>安裝nodeJs我們會先下載 <a href="https://github.com/coreybutler/nvm-windows/releases/tag/1.1.7">nvm</a>(nodeJs版本管理工具)，<br>選擇這個檔案下載<br><img src="https://cdn-images-1.medium.com/max/1100/1*MMtq_QXGr8WOb0PZBG38Gg.png" alt="setup"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm -v  // 查看安裝版本</span><br></pre></td></tr></table></figure>

<h2 id="nvm-指令"><a href="#nvm-指令" class="headerlink" title="nvm 指令"></a>nvm 指令</h2><p>nvm 可用的指令有這些: </p>
<ul>
<li>nvm list : 查看已安裝的版本</li>
<li>nvm list availabel : 查看可安裝的NodeJs版本</li>
<li>nvm install 版本號 :  安裝指定版本的NodeJs</li>
<li>nvm use 版本號 : 指定NodeJs版本</li>
</ul>
<p>輸入 nvm list available 確認可用的nodeJs版本 (選擇LTS穩定版)</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*M3IU0v3oSFGFJ4tN31Awrw.png" alt="可用版本"></p>
<p>輸入 nvm install 版本號  下載nodeJs</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*f1MaLlOhzZk_xukIsqFfrA.png" alt="nvm install"></p>
<p>安裝好後，可輸入 <code>node -v</code> 確認安裝的nodeJs版本。</p>
<p>因為下載nodeJs時，會順便下載npm，輸入npm -v 來確認版本。</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*RkuPmVE75hwZt_PIwmX8SA.png" alt="npm -v"></p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>從 0 開始的 webpack 5 專案(6) Babel</title>
    <url>/2022/10/07/2022-10-7-4-webpack-babel/</url>
    <content><![CDATA[<h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>為了兼容較舊版本的瀏覽器，需要將比較新的 js 語法利用 babel 這個 loader 來轉換成舊的語法。</p>
<ul>
<li>babel-loader - Transpile files with Babel and webpack.</li>
<li>@babel&#x2F;core - Transpile ES2015+ to backwards compatible JavaScript</li>
<li>@babel&#x2F;preset-env - Smart defaults for Babel</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -D babel-loader @babel/core @babel/preset-env webpack</span><br></pre></td></tr></table></figure>

<p>安裝好 loader 後，在 config 檔裡設定新的 rule</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="attr">use</span>: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [</span><br><span class="line">            [<span class="string">&#x27;@babel/preset-env&#x27;</span>, &#123;</span><br><span class="line">              <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">              <span class="attr">modules</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">corejs</span>: <span class="number">3.6</span>,</span><br><span class="line">            &#125;]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>為了測試用，在 src&#x2F;index.js 新增一些新的 js 語法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create a class property without a constructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;Violin Charades&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myGame = <span class="keyword">new</span> <span class="title class_">Game</span>()</span><br><span class="line"><span class="comment">// Create paragraph node</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>最後執行 npm run dev 就可以成功轉換成較舊的語法。</p>
]]></content>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>從 0 開始的 webpack 5 專案(8) 圖片</title>
    <url>/2022/10/07/2022-10-7-5-webpack-image/</url>
    <content><![CDATA[<h2 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h2><p>js 預設是不能直接載入圖片的，可以先新增 src&#x2F;images 資料夾，並新增圖片到資料夾裡，最後試試將圖片看引入 js 檔裡。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> example <span class="keyword">from</span> <span class="string">&#x27;./images/example.png&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然後執行 npm run build 會發現錯誤發生。</p>
<p>為了解析圖片，webpack 有內建的 asset modules 可以用在靜態資源上。我們會使用 asset&#x2F;resource 在圖片類型上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// Images</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(?:ico|gif|png|jpg|jpeg)$/i</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">        <span class="attr">assetModuleFilename</span>: <span class="string">&#x27;images/[hash][ext]&#x27;</span>, <span class="comment">// 輸出到 dist/images 資料夾</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 output 選項可以將 assetModuleFilename 設為 ‘images&#x2F;[name][ext]’ ， 確保輸出的圖片名稱和src的來源相同，並且輸出到images的資料夾內。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">  <span class="attr">assetModuleFilename</span>: <span class="string">&#x27;images/[name][ext]&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後在執行 npm run build 就可以成功打包圖片囉。</p>
]]></content>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 基礎篇 (10) Event Listeners</title>
    <url>/2022/12/25/2022-12-25-1-event/</url>
    <content><![CDATA[<h2 id="事件偵聽"><a href="#事件偵聽" class="headerlink" title="事件偵聽"></a>事件偵聽</h2><p>如果要在網頁上與使用者互動時，必須在對應的元素上綁定事件偵聽 addEventListener 函式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> parent = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.parent&#x27;</span>);</span><br><span class="line">parent.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>addEventListener() 基本上有三個參數，分別是「事件名稱」、「事件的處理器」(事件觸發時執行的 function)，以及一個「Boolean」值，由這個 Boolean 決定事件是以「捕獲」或「冒泡」機制執行，若不指定則預設為「冒泡」。</p>
<h2 id="事件捕獲與冒泡"><a href="#事件捕獲與冒泡" class="headerlink" title="事件捕獲與冒泡"></a>事件捕獲與冒泡</h2><p>JS 觸發事件的流程可以分為兩個機制:</p>
<ul>
<li>事件冒泡 (Event Bubbling)</li>
<li>事件捕獲 (Event Capturing)</li>
</ul>
<h3 id="事件冒泡-Event-Bubbling"><a href="#事件冒泡-Event-Bubbling" class="headerlink" title="事件冒泡 (Event Bubbling)"></a>事件冒泡 (Event Bubbling)</h3><p>事件冒泡指的是「從啟動事件的元素節點開始，逐層往上傳遞」，直到整個網頁的根節點，也就是 document。</p>
<p><img src="https://miro.medium.com/max/828/1*GICF6UGsQpG6HDdHGoJ0BA.webp" alt="事件冒泡"></p>
<h3 id="事件捕獲-Event-Capturing"><a href="#事件捕獲-Event-Capturing" class="headerlink" title="事件捕獲 (Event Capturing)"></a>事件捕獲 (Event Capturing)</h3><p>事件捕獲是由上往下傳遞，從document 到 html 到body 最後元素本身。</p>
<p><img src="https://miro.medium.com/max/828/1*vECOzlIFJjDUPpFg7UhbtQ.webp" alt="事件捕獲"></p>
<p>既然事件傳遞順序有兩種機制，那我怎麼知道事件是依賴哪種機制執行的？</p>
<p>答案是兩種都會觸發，如下圖:</p>
<p><img src="https://miro.medium.com/max/828/1*M9djPJBxna73c1ShX01Deg.webp"></p>
<p>當 td 的 click 事件發生時，會先走紅色的 「capture phase」，上而下依序觸發它們的 click 事件。然後再繼續執行綠色的 「bubble phase」，反方向由 <td> 一路往上傳至 Document，整個事件流程到此結束。</p>
<h2 id="阻止事件傳遞"><a href="#阻止事件傳遞" class="headerlink" title="阻止事件傳遞"></a>阻止事件傳遞</h2><p>現在我們知道事件的傳遞流程會先經由捕獲機制再到冒泡機制，若想阻止事件的傳遞，可用 stopPropagation。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> grantParent = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.grantParent&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> parent = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.parent&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> child = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.child&#x27;</span>);</span><br><span class="line"></span><br><span class="line">grantParent.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;grantParent&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">parent.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;parent&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如上我們在 parent 的事件綁定上增加 e.stopPropagation() ，來阻止事件往上層 grantParent 傳遞。</p>
<h2 id="只觸發一次事件"><a href="#只觸發一次事件" class="headerlink" title="只觸發一次事件"></a>只觸發一次事件</h2><p>若想限制事件只觸發一次，可以將 once 參數設為 true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> child = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.child&#x27;</span>);</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child&#x27;</span>);</span><br><span class="line">&#125;, &#123; <span class="attr">once</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="解除事件偵聽"><a href="#解除事件偵聽" class="headerlink" title="解除事件偵聽"></a>解除事件偵聽</h2><p>若要取消事件偵聽，可以用 removeEventListener()，要注意的是取消偵聽的函式必須是同一個，所以函式要單獨宣告。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> child = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.child&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sayHi&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, sayHi);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  child.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, sayHi);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="事件指派"><a href="#事件指派" class="headerlink" title="事件指派"></a>事件指派</h2><p>當網頁上的元素會動態新增或刪除時，若想對動態增減的元素做事件偵聽，可以用事件指派的方式。</p>
<ul>
<li>事件指派(event delegation): 在外層元素做事件綁定，利用事件捕獲往下傳遞的機制，來選擇觸發事件的目標。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);</span><br><span class="line"></span><br><span class="line">container.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&#x27;div&#x27;</span>)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如上，在外層 container 做事件偵聽，當點擊到的是 div 時才處發函式。</p>
<h2 id="Handler-中的-event"><a href="#Handler-中的-event" class="headerlink" title="Handler 中的 event"></a>Handler 中的 event</h2><p>當監聽事件發生，透過 addEventListner 會去觸發註冊的 event handler ，也就是指定的函式。<br>此時 event handler 會去建立一個「事件物件」，裡面包含了與這個事件相關的屬性，並以參數的形式傳給handler。</p>
<p>常用的屬性:</p>
<ol>
<li>e.target：触发事件的元素。</li>
<li>e.currentTarget：当前正在处理事件的元素（即事件处理函数所附加的元素）。</li>
<li>e.type：事件的类型（例如，”click”、”mouseover” 等）。</li>
<li>e.preventDefault()：阻止事件的默认行为。</li>
<li>e.stopPropagation()：停止事件在 DOM 层次结构中的传播。</li>
</ol>
<ul>
<li>e.target 與 e.currentTarget 差異</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*uD_XnSta1UobXN4XIXB8rA.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;myButton&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span> </span><br><span class="line">&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myButton&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Clicked element:&#x27;</span>, e.<span class="property">target</span>); <span class="comment">// 可能是 span、svg、button</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Clicked element:&#x27;</span>, e.<span class="property">currenTarget</span>); <span class="comment">// myButton</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>當今天有一顆按鈕，裡面包有 span、svg 不同元素時</p>
<ul>
<li>e.target: 會指向我此時點擊的元素，點到 span 就指向span，點到 svg 就指向 svg</li>
<li>e.currentTarget: 永遠指向事件綁定的元素。</li>
</ul>
]]></content>
      <categories>
        <category>JS 基礎篇</category>
      </categories>
      <tags>
        <tag>JS 基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(1) JS實作系列 Drum-Kit</title>
    <url>/2022/06/14/2022-6-14-1-JS30-Drum-Kit/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列文章會實做一些JS的範例，從中熟練JS的觀念。</p>
<p>本文從第一個範例開始 Drum-Kit <a href="https://codepen.io/tim-chou/pen/oNEmjKR">範例程式碼</a></p>
<p><img src="https://miro.medium.com/max/1400/1*wUokqgRhKPwqMbffW1lZeA.png" alt="piano"></p>
<h2 id="keycode綁定"><a href="#keycode綁定" class="headerlink" title="keycode綁定"></a>keycode綁定</h2><p>在這次挑戰中，要完成的是按下琴鍵後，播放指定音樂，和改變樣式。</p>
<p>所以第一步要做的是，選出指定的dom元素和音檔，</p>
<p>在 html 結構中，用 data-key分別對div 跟 audio 元素綁定對應按鍵的 keycode。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;65&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;65&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/clap.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件監聽"><a href="#事件監聽" class="headerlink" title="事件監聽"></a>事件監聽</h2><p>要讓使用者能彈出聲音，要在window建立 keydown事件的監聽，當使用者按下鍵盤時，觸發對應函式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>,playHandeler,<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">playHandeler</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="comment">//播音樂</span></span><br><span class="line">  <span class="keyword">const</span> audio = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`audio[data-key=&quot;<span class="subst">$&#123;e.keyCode&#125;</span>&quot;]`</span>);</span><br><span class="line">  <span class="keyword">if</span>(audio)&#123;</span><br><span class="line">    audio.<span class="property">currentTime</span> = <span class="number">0</span>;<span class="comment">//若要連續撥放 要設為0</span></span><br><span class="line">    audio.<span class="title function_">play</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//改樣式</span></span><br><span class="line">  <span class="keyword">const</span> dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`div[data-key=&quot;<span class="subst">$&#123;e.keyCode&#125;</span>&quot;]`</span>);</span><br><span class="line">  <span class="keyword">if</span>(dom)&#123;</span><br><span class="line">    dom.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;playing&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在函式中，用 ES6 的選取方法，用 <code>audio[data-key=”$&#123;e.keyCode&#125;”]</code>直接選到 HTML 中的 [data-key]。<br>在利用 if 判斷式，判斷當使用者按到指定的按鍵時，也就是audio為true時，執行播放音檔，audio.play();<br>dom 為true時，執行classList.add()，彈奏時增加樣式。</p>
<h2 id="動畫結束時，拿掉樣式"><a href="#動畫結束時，拿掉樣式" class="headerlink" title="動畫結束時，拿掉樣式"></a>動畫結束時，拿掉樣式</h2><p>利用foreach，對每一個.key建立監聽，監聽事件為 transitionend 。這個事件是在css的 transition結束時觸發，也就是每一個drum kit撥放完時觸發。<br>要注意，若執行的transition屬性有很多種，如 transform、color、border-color，transitionend 會重複的觸發。<br>今天我們希望的是，在transform動畫結束時拿掉樣式，所以要加上判斷propertyName為 transform時，再執行 classList.remove拿掉樣式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.key&#x27;</span>).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">  item.<span class="title function_">addEventListener</span>(<span class="string">&#x27;transitionend&#x27;</span>, transitionendHandler)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transitionendHandler</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.<span class="property">propertyName</span> === <span class="string">&#x27;transform&#x27;</span>)&#123;</span><br><span class="line">    e.<span class="property">currentTarget</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;playing&#x27;</span>);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="額外補充"><a href="#額外補充" class="headerlink" title="額外補充"></a>額外補充</h2><p>若要在html 顯示 鍵盤按鍵 可以用 <code>&lt;kbd&gt;&lt;/kbd&gt;</code> 元素。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>JS實作系列</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>從 0 開始的 webpack 5 專案(7) Style</title>
    <url>/2022/10/07/2022-10-7-4-webpack-style/</url>
    <content><![CDATA[<p>現在前端開發的樣式處理方面可能會用到</p>
<ul>
<li>sass: css 的預處理器，新增了變數、模組化等功能到樣式的開發上</li>
<li>postcss: css 的後處理器，幫樣式新增必要的前贅詞，以兼容舊版瀏覽器。</li>
</ul>
<p>而在 webpack 裡為了將 css import 到 index.js裡，需要對應的 loader</p>
<ul>
<li>sass-loader - Load SCSS and compile to CSS</li>
<li>sass - sass</li>
<li>postcss-loader - Process CSS with PostCSS</li>
<li>postcss-preset-env - Sensible defaults for PostCSS</li>
<li>css-loader - Resolve CSS imports</li>
<li>style-loader - Inject CSS into the DOM</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -D  sass-loader sass postcss-loader css-loader style-loader postcss-preset-env</span><br></pre></td></tr></table></figure>

<p>在 config 檔裡新增 postcss的設定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;postcss-preset-env&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">browsers</span>: <span class="string">&#x27;last 2 versions&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 src 資料夾裡新增 styles 資料夾，裡頭新增 main.scss 檔案</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$font-size</span>: <span class="number">1rem</span>;</span><br><span class="line"><span class="variable">$font-color</span>: lch(<span class="number">53</span> <span class="number">105</span> <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$font-size</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$font-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 index.js 裡引入 main.scss</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./styles/main.scss&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然後在 config 裡新增 sass 的 rule</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// CSS, PostCSS, and Sass</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;postcss-loader&#x27;</span>, <span class="string">&#x27;sass-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後執行 npm run dev 就可以成功編譯囉。</p>
]]></content>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>(8) Hexo-第三方服務</title>
    <url>/2022/06/10/2022-6-10-2-Hexo-%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99/</url>
    <content><![CDATA[<h2 id="新增第三方服務"><a href="#新增第三方服務" class="headerlink" title="新增第三方服務"></a>新增第三方服務</h2><p>當我打開 <code>_config.next.yml</code> ，會發現NextT也整合了一些第三方服務進來，大多都只需要申請帳號並填入 ID 就可以使用。<br>以下就介紹幾個好用的服務。</p>
<h2 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h2><p>Disqus 是一個留言板服務，安裝流程如下</p>
<ol>
<li><p>到 <a href="https://disqus.com/">Disqus</a> 官網註冊一個帳號並登入。按下 <code>GET STARTED</code>按鈕，並選擇 <code> I want to install Disqus on my site</code>選項，就會來到 <code>Create a new site</code> 頁面。</p>
</li>
<li><p>輸入你的 <code>Website Name</code>，並按下 <code>Create Site </code>。</p>
</li>
<li><p>這邊就建立好你的 disqus帳號了</p>
</li>
</ol>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022061102.png?alt=media&token=518dfa72-a8fe-4c81-bead-89bc3a59e874" alt="disqus"></p>
<ol start="4">
<li>回到 <code>_config.next.yml</code>，將 disqus 選項改為true，並在shortname填入剛才在disqus設定的 <code>Website Name</code></li>
</ol>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022061103.png?alt=media&token=3a8584ce-3749-4640-99c0-c8ecd574faa7" alt="disqus-setting"></p>
<ol start="5">
<li>以上就完成了留言板設置囉</li>
</ol>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022061104.png?alt=media&token=dc77ed95-13ce-4a34-9769-1297dc7c1bda" alt="comments"></p>
<h2 id="圖片顯示"><a href="#圖片顯示" class="headerlink" title="圖片顯示"></a>圖片顯示</h2><p>NextT 內建有兩種圖片顯示的方式，分別是 fancybox 和 mediumzoom，只要到 <code>_config.next.yml</code>，將選項改為true即可。但記得不要同時開啟 fancybox 和 mediumzoom。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022061101.png?alt=media&token=c62c2900-a1e0-4d60-9a0a-bf13dc66d7a3" alt="image"></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>(7) Hexo-新增套件</title>
    <url>/2022/06/10/2022-6-10-1-Hexo-%E6%96%B0%E5%A2%9E%E5%A5%97%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="新增套件"><a href="#新增套件" class="headerlink" title="新增套件"></a>新增套件</h2><p>這章節會介紹一些NextT主題可以用的套件。</p>
<h2 id="hexo-generator-searchdb"><a href="#hexo-generator-searchdb" class="headerlink" title="hexo-generator-searchdb"></a>hexo-generator-searchdb</h2><p>這個套件可以讓你的部落格具有本地搜尋的功能，一樣先用NPM安裝。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>安裝完後只要到你根目錄的 <code>_config.next.yml</code> 檔案裡，將 local search 改為true即可產生搜尋功能囉。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/20220601001.png?alt=media&token=a25eac63-0114-4674-9c02-7f7723f027e1" alt="search-option"></p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/20220601002.png?alt=media&token=9b0afc38-cc99-4aef-abdc-68d318bc1c7e" alt="search-image"></p>
<h2 id="Reading-progress-bar-閱讀進度條"><a href="#Reading-progress-bar-閱讀進度條" class="headerlink" title="Reading progress bar 閱讀進度條"></a>Reading progress bar 閱讀進度條</h2><p>這個套件已經內建在NextT裡了，只要到  <code>_config.next.yml</code> 找到 reading_progress 選項，將enable改為true即可。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/20220601003.png?alt=media&token=61c1206c-5339-4a97-ae55-565d1d249f73" alt="reading-progress"></p>
<p>以上就是推薦可以安裝的套件囉</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>(2) JS實作系列 時鐘</title>
    <url>/2022/06/15/2022-6-15-1-JS30-clock/</url>
    <content><![CDATA[<p><img src="https://miro.medium.com/max/1400/1*JH-e_9OQS1lBH7hqb7lMXQ.png" alt="clock"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這次要在網頁實作一個時鐘，本次的 <a href="https://codepen.io/tim-chou/pen/RwReNQx">範例code</a></p>
<p>首先在 HTML 中新增 三組 DIV 分別為時、分、秒針</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clock&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clock-face&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hand second-hand&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hand min-hand&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hand hour-hand&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>時、分、秒針都設定為寬高是鐘面100%的正方形，並利用偽元素的方式，將指針加在正方形上，所以我們之後實際旋轉的是正方形。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hand</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1040/1*hxPjvHGmPHvKxnY7ZZFuUg.png" alt="hand"></p>
<h2 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h2><p>在js中，首先選取 時、分、秒針</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> second = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.second-hand&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> min = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.min-hand&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> hour = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hour-hand&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在setClock函式中，利用 建立 new Date() 取得時間，再用getSeconds、getMinutes、getHours取得秒、時、分。<br>並分別乘上 6 度 (每秒鐘在鐘面佔的角度 )、30度(每小時在鐘面佔的角度)，並利用 .style.transform &#x3D; <code>rotate($&#123;minDeg&#125;deg)</code>的方式指定角度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">setClock</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> secondDeg = date.<span class="title function_">getSeconds</span>() * <span class="number">6</span> <span class="comment">// (360/60)每分鐘所佔的角度</span></span><br><span class="line">  <span class="keyword">let</span> minDeg = date.<span class="title function_">getMinutes</span>() * <span class="number">6</span> + date.<span class="title function_">getSeconds</span>()* <span class="number">30</span> / <span class="number">60</span> <span class="comment">// (360/60)每秒所佔的角度</span></span><br><span class="line">  <span class="keyword">let</span> hourDeg = date.<span class="title function_">getHours</span>() * <span class="number">30</span> + date.<span class="title function_">getMinutes</span>()* <span class="number">30</span> / <span class="number">60</span><span class="comment">// (360/12)每小時時針所佔的角度 </span></span><br><span class="line"></span><br><span class="line">  second.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`rotate(<span class="subst">$&#123;secondDeg&#125;</span>deg)`</span></span><br><span class="line">  min.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`rotate(<span class="subst">$&#123;minDeg&#125;</span>deg)`</span></span><br><span class="line">  hour.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`rotate(<span class="subst">$&#123;hourDeg&#125;</span>deg)`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後用 setInterval 每過一秒就執行一次 setClock 函式，就完成拉。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(setClock,<span class="number">1000</span>); <span class="comment">//設定間隔，持續執行</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>JS實作系列</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(1) Gulp-介紹與安裝</title>
    <url>/2022/06/15/2022-6-15-2-Gulp-%E4%BB%8B%E7%B4%B9%E8%88%87%E5%AE%89%E8%A3%9D/</url>
    <content><![CDATA[<h2 id="Gulp-是什麼"><a href="#Gulp-是什麼" class="headerlink" title="Gulp 是什麼"></a>Gulp 是什麼</h2><p>在以前做網頁開發時，可能只需要處理html、css、js檔案就可以了。但現在前端開發工具越來越多，像css有scss的預處理器、html可以用pug來寫等等。此時就須要一個工具來將這些scss、pug檔案編譯成css跟html。<br>Gulp 就可以用來編譯 Sass、編譯 JavaScript 語法至相容性較高的 ES5、圖片優化壓縮、打包程式碼等等的事情，讓開發者可以專注於開發。</p>
<h2 id="安裝流程"><a href="#安裝流程" class="headerlink" title="安裝流程"></a>安裝流程</h2><h3 id="安裝node-js與npm"><a href="#安裝node-js與npm" class="headerlink" title="安裝node.js與npm"></a>安裝node.js與npm</h3><p>首先我們需要要先安裝 <a href="https://nodejs.org/en/">nodejs</a>，我們選擇穩定版(LTS)來安裝，安裝過程就不再贅述。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022061501.png?alt=media&token=3db09d20-f796-4c7b-8c12-0e894845871f" alt="nodejs"></p>
<p>安裝好後，到vscode編輯器，輸入下列指令來確認是否安裝完成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v   </span><br><span class="line">node -v</span><br></pre></td></tr></table></figure>

<p>若有正確安裝，會顯示版本號。</p>
<h2 id="安裝全域的-Gulp"><a href="#安裝全域的-Gulp" class="headerlink" title="安裝全域的 Gulp"></a>安裝全域的 Gulp</h2><p>在commend line輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install gulp -g  //windows系統</span><br><span class="line">sudo npm install gulp -g //Mac系統</span><br></pre></td></tr></table></figure>
<p>npm安裝套件分為全域與專案安裝，全域安裝只需安裝一次即可。</p>
<h2 id="安裝專案的Gulp"><a href="#安裝專案的Gulp" class="headerlink" title="安裝專案的Gulp"></a>安裝專案的Gulp</h2><p>我們先用vscode開一個新的資料夾作為這次專案使用。</p>
<p>先在commend line 輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>
<p>輸入完後，會新增一個package.json檔案，這個檔案會用來管理這個專案的套件。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022061502.png?alt=media&token=b12ce94d-b001-4fa8-b8b2-2912c6dca318" alt="package.json"></p>
<p>之後輸入下面指令來安裝專案內的gulp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install gulp --save</span><br></pre></td></tr></table></figure>

<p>安裝完成後輸入下面指令檢查一下，有正確安裝會顯示版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gulp -v</span><br></pre></td></tr></table></figure>

<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>到這邊就完成專案內gulp的安裝，下一堂課會帶大家新增一個gulp file，做一些好玩的功能囉。</p>
]]></content>
      <categories>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>(3) Gulp-撰寫gulp file</title>
    <url>/2022/06/16/2022-6-15-3-Gulp-%E5%9F%BA%E7%A4%8E%E7%AF%87/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面已經將專案的環境與gulp都安裝好了，這節會開始介紹如何撰寫你的第一支 gulp file</p>
<h2 id="開始撰寫-gulp-file"><a href="#開始撰寫-gulp-file" class="headerlink" title="開始撰寫 gulp file"></a>開始撰寫 gulp file</h2><p>一開始先在專案的根目錄新增一個檔案 <code>gulpfile.js</code>檔案</p>
<p>然後在根目錄 新增一個 <code>source</code> 資料夾<br>並在source資料夾內新增一個 style.css</p>
<p><img src="https://i.imgur.com/GsAJaOF.png" alt="img"></p>
<p>在gulpfile.js 最上面先引入 GULP</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>然後我們可以新增一個簡單的gulp任務</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">funciton <span class="title function_">copyFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">   gulp.<span class="title function_">src</span>(<span class="string">&#x27;./source/**/*/.css&#x27;</span>)</span><br><span class="line">     .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/css&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面這段程式中，我們用了 <code>gulp.src()</code> 來指定來源檔案的位置，<br>並用 <code>gulp.dest()</code> 將檔案輸出到指定的public資料夾。</p>
<p>然後可以開啟 commend line 輸入指令 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp copyFile</span><br></pre></td></tr></table></figure>

<p>就會發現檔案已經被輸出到 public 資料夾囉。</p>
<p>下堂課會開始介紹 其他的各種gulp任務喔。</p>
]]></content>
      <categories>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>(4) Gulp-編譯scss</title>
    <url>/2022/06/16/2022-6-15-4-Gulp-%E7%B7%A8%E8%AD%AFsass/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這篇來介紹如何在 gulp 中，進行scss的編譯吧。</p>
<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><p>首先來安裝 gulp-sass 套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install sass gulp-sass --save</span><br></pre></td></tr></table></figure>

<h2 id="載入設定"><a href="#載入設定" class="headerlink" title="載入設定"></a>載入設定</h2><p>在gulpfile.js裡，依照文件貼上相關設定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">&#x27;gulp-sass&#x27;</span>)(<span class="built_in">require</span>(<span class="string">&#x27;sass&#x27;</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildStyles</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./source/scss/**/*.scss&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">sass</span>().<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, sass.<span class="property">logError</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/css&#x27;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面為編譯scss的gulp任務，用 src 指定 scss 所在的資料夾後，最後在用gulp.dest() 指定編譯後的 css 輸出的位置。</p>
<p>之後在scss資料夾裡，新增一個all.scss檔案。</p>
<p>並輸入一些東西</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$color</span>: <span class="number">#00cc99</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在commend line 輸入 gulp buildStyles 就可以發現scss被編譯成css檔案，並輸出到public資料夾囉。</p>
]]></content>
      <categories>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>(2) Gulp-運作原理介紹</title>
    <url>/2022/06/16/2022-6-15-5-Gulp-%E9%81%8B%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/1200/0*_uAjbnaZaXs1ca6x.png" alt="img"></p>
<h2 id="運作原理"><a href="#運作原理" class="headerlink" title="運作原理"></a>運作原理</h2><p>Gulp運作的方式就是將每個任務像水管一樣串接下去</p>
<h2 id="簡單範例"><a href="#簡單範例" class="headerlink" title="簡單範例"></a>簡單範例</h2><p><img src="https://cdn-images-1.medium.com/max/1200/1*uBz4qK1ZMgkS6fNfP8u-NA.png" alt="gulp"></p>
<p>上圖是一個copy html檔案的簡單範例，主要如下:</p>
<ol>
<li>gulp.task(‘任務名稱’, function(){}): 指定一個gulp任務</li>
<li>gulp.src: 指定資料來源</li>
<li>gulp.pipe(): 指定事件，pipe就像水管，可以一個接一個</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*FWZTmYZm1Sbg5FIO0ZDycg.png" alt="pipe"></p>
<ol start="4">
<li>gulp.dest(): 輸出任務的結果</li>
</ol>
]]></content>
      <categories>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>(5) Gulp-postcss</title>
    <url>/2022/06/17/2022-6-17-1-Gulp-postcss/</url>
    <content><![CDATA[<h2 id="PostCSS-是什麼"><a href="#PostCSS-是什麼" class="headerlink" title="PostCSS 是什麼 ?"></a>PostCSS 是什麼 ?</h2><p>PostCSS 是一個使用JavaScript 轉換CSS 的工具。<br>以前在撰寫css時，因為有些新的語法舊的瀏覽器不支援，所以需要加上前贅詞</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*0gGNaqjQjKhcOhyBck5Bhw.png" alt="img"></p>
<p>但這步驟如果用人工判斷很費時，此時可以用post css搭配 autoprfixer 套件，來自動加入這些前贅詞。</p>
<h2 id="安裝流程"><a href="#安裝流程" class="headerlink" title="安裝流程"></a>安裝流程</h2><p>先安裝套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install postcss gulp-postcss autoprefixer --save</span><br></pre></td></tr></table></figure>

<p>然後在 <code>gulpfile.js</code> 中載入套件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> postcss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-postcss&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在我們編譯sass的任務中，加入postcss功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sassTask</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> plugins = [</span><br><span class="line">    <span class="title function_">autoprefixer</span>(),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./source/scss/**/*.scss&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">plumber</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">sass</span>().<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, sass.<span class="property">logError</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">postcss</span>(plugins))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/css&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面我們先新增一個 plugins 的變數，並在編譯成css後，加入 <code>postcss(plugins)</code></p>
<p>此時可能會遇到這個錯誤</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*r49hPlucU_l7u-wYZtzGBg.png" alt="error"></p>
<p>這個錯誤是要我們在根目錄增加一個 .browserslistrc 的檔案，裡面放需要支援的瀏覽器版本條件，如下圖:</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*RiUzC2vYWqZEFgT0nCa7lA.png" alt="browser"></p>
<p>之後如果要調整 CSS 支援版本就只需要調整 .browserslistrc 中的 last X version X 即可，關於支援版本設定，可參考<a href="https://github.com/browserslist/browserslist">這裡</a>。</p>
<p>以上就完成gulp-postcss的的設定囉</p>
]]></content>
      <categories>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>(6) Gulp-babel</title>
    <url>/2022/06/17/2022-6-17-2-Gulp-babel/</url>
    <content><![CDATA[<h2 id="什麼是-babel"><a href="#什麼是-babel" class="headerlink" title="什麼是 babel"></a>什麼是 babel</h2><p>使用babel套件，可以將 一些新的js語法，如箭頭函式、let、const，編譯為舊版瀏覽器看得懂的語法。</p>
<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp-babel @babel/core @babel/preset-env</span><br><span class="line">npm install --save gulp-sourcemaps  //壓縮後，可標記原始碼位置</span><br><span class="line">npm install --save gulp-concat  //合併程式碼用</span><br></pre></td></tr></table></figure>

<p>在 gulpfile.js 中引入任務</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">babel</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./source/js/**/*.js&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">plumber</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">babel</span>(&#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&#x27;@babel/env&#x27;</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">concat</span>(<span class="string">&#x27;all.js&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/js&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函式中，我們指定source資料夾裡的 js檔案進行用babel編譯，<br>並用concat套件將多支js檔案在輸出時合併成一支，最後用dest輸出到public資料夾。</p>
<h2 id="sourcemap套件"><a href="#sourcemap套件" class="headerlink" title="sourcemap套件"></a>sourcemap套件</h2><p>因為多支js檔案，最後會被編譯成同一支js。為了在最終編譯的js中，查找原先程式碼的位置，可以使用 sourcemap套件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">babel</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./source/js/**/*.js&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">plumber</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>($.sourcemaps.<span class="title function_">init</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">babel</span>(&#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&#x27;@babel/env&#x27;</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">concat</span>(<span class="string">&#x27;all.js&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>($.sourcemaps.<span class="title function_">write</span>(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/js&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn-images-1.medium.com/max/1200/1*ZT2zdCDxGvinb_v13KRccQ.png" alt="sourcemaps"></p>
<p>sourcemap 除了js檔案以外，也可以用在如scss檔案</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*nQzF8npRYhWcAaXJAzGgDw.png" alt="scss-source"></p>
]]></content>
      <categories>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
        <tag>gulp-babel</tag>
      </tags>
  </entry>
  <entry>
    <title>(8) Gulp-檔案壓縮</title>
    <url>/2022/06/17/2022-6-17-4-Gulp-compress/</url>
    <content><![CDATA[<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><ol>
<li>壓縮 css套件: <a href="https://www.npmjs.com/package/gulp-clean-css">gulp-clean-css</a></li>
<li>壓縮 js套件: <a href="https://www.npmjs.com/package/gulp-uglify">gulp-uglify</a></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install gulp-clean-css gulp-uglify --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="載入設定"><a href="#載入設定" class="headerlink" title="載入設定"></a>載入設定</h2><p>壓縮css的部分，可以在編譯完scss後，進行壓縮</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sassTask</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> plugins = [</span><br><span class="line">    <span class="title function_">autoprefixer</span>(),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./source/scss/**/*.scss&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">plumber</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>($.sourcemaps.<span class="title function_">init</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">sass</span>(&#123;</span><br><span class="line">      <span class="attr">includePaths</span>: [<span class="string">&#x27;./node_modules/bootstrap/scss&#x27;</span>]</span><br><span class="line">    &#125;).<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, sass.<span class="property">logError</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">postcss</span>(plugins))</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">cleanCss</span>(&#123; <span class="attr">compatibility</span>: <span class="string">&#x27;ie8&#x27;</span> &#125;)))</span><br><span class="line">    .<span class="title function_">pipe</span>($.sourcemaps.<span class="title function_">write</span>(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/css&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(browserSync.<span class="title function_">stream</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*mpisvD3qy987427Pd2n-kg.png" alt="壓縮css程式碼"></p>
<p>壓縮js的部分，可在babel編譯完後並且合併後( concat ) 進行壓縮</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">babel</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./source/js/**/*.js&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">plumber</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>($.sourcemaps.<span class="title function_">init</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">babel</span>(&#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&#x27;@babel/env&#x27;</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">concat</span>(<span class="string">&#x27;all.js&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">uglify</span>()))</span><br><span class="line">    .<span class="title function_">pipe</span>($.sourcemaps.<span class="title function_">write</span>(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/js&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(browserSync.<span class="title function_">stream</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn-images-1.medium.com/max/1200/1*1anhKo-vPFyBKX4scALEZw.png" alt="壓縮js"></p>
<h2 id="壓縮成果"><a href="#壓縮成果" class="headerlink" title="壓縮成果"></a>壓縮成果</h2><ol>
<li>css被壓成一行</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*tweaZBqP0_OJL3SnSgi-fQ.png" alt="css"></p>
<ol start="2">
<li>js被壓成一行</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*O3lohBob7h6KxqHGfVvong.png" alt="js"></p>
]]></content>
      <categories>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>(9) Gulp-if</title>
    <url>/2022/06/18/2022-6-18-1-Gulp-if/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通常在開發項目時，我們會分所謂的 development(開發環境) 與 production(生產環境)，在開發環境時，我們不會壓縮檔案，直到生產環境時，才會做檔案壓縮。此時，可以用 Minimist 命令行參數解析工具區分 Gulp 套件在 development 與 production 環境下的使用。</p>
<h2 id="Minimist-套件安裝"><a href="#Minimist-套件安裝" class="headerlink" title="Minimist 套件安裝"></a>Minimist 套件安裝</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install minimist   </span><br><span class="line">$ npm install gulp-if</span><br></pre></td></tr></table></figure>

<p>在gulpfile.js 中，載入 minimist</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> minimist= <span class="built_in">require</span>(<span class="string">&#x27;minimist&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="設定環境參數"><a href="#設定環境參數" class="headerlink" title="設定環境參數"></a>設定環境參數</h2><p>並設定envOption環境參數，以下面範例來說，預設是帶入字串，並且是develop這個環境。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> envOption = &#123;</span><br><span class="line">  <span class="attr">string</span>: <span class="string">&#x27;env&#x27;</span>,</span><br><span class="line">  <span class="attr">default</span>: &#123; <span class="attr">env</span>: <span class="string">&#x27;dev&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用minimist將環境參數讀入，並在後方帶入 envOption環境選項。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> options = <span class="title function_">minimist</span>(process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>), envOption)</span><br></pre></td></tr></table></figure>

<p>process.argv.slice(2) 這行意思是跳過前兩個 – 字元直接讀取 env 這個字串。<br>此時用console.log(options)，可以看到options目前環境參數是 develop</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*b1cLVsVXiWwj834lXdwTYA.png" alt="console"></p>
<p>若要更改參數，則可用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gulp --env 參數名稱</span><br></pre></td></tr></table></figure>

<p>例如我在commend line 上輸入 <code>gulp --env prod</code> 就可將環境參數從dev改成prod。</p>
<h2 id="使用gulp-if套件搭配環境參數"><a href="#使用gulp-if套件搭配環境參數" class="headerlink" title="使用gulp-if套件搭配環境參數"></a>使用gulp-if套件搭配環境參數</h2><p>環境參數設定好後，就可用gulp-if套件來判斷當前環境是 開發環境(dev) 還是 生產環境 (prod)。<br>讓我們能判斷如果是生產環境，則壓縮檔案，如果不是則不壓縮檔案。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">babel</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(path.<span class="property">js</span>.<span class="property">src</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">plumber</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>($.sourcemaps.<span class="title function_">init</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">babel</span>(&#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&#x27;@babel/env&#x27;</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">concat</span>(<span class="string">&#x27;all.js&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">if</span>(options.<span class="property">env</span> === <span class="string">&#x27;prod&#x27;</span>, $.<span class="title function_">uglify</span>()))</span><br><span class="line">    .<span class="title function_">pipe</span>($.sourcemaps.<span class="title function_">write</span>(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(path.<span class="property">js</span>.<span class="property">des</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(browserSync.<span class="title function_">stream</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面我們用了 gulp-if 來判斷當前環境變數是不是 prod，是的話則執行 uglify來壓縮。</p>
]]></content>
      <categories>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>(7) Gulp-browserSync</title>
    <url>/2022/06/17/2022-6-17-3-Gulp-browser-sync/</url>
    <content><![CDATA[<h2 id="什麼是-broswer-sync"><a href="#什麼是-broswer-sync" class="headerlink" title="什麼是 broswer sync"></a>什麼是 broswer sync</h2><p>browserSync 能建立起一個暫時性的開發用伺服器。搭配 gulp 使用，就能達成檔案修改時，browserSnyc 會自動重整畫面，讓開發者能在瀏覽器上即時看到修改後的畫面。</p>
<h2 id="安裝流程"><a href="#安裝流程" class="headerlink" title="安裝流程"></a>安裝流程</h2><p>網址: <a href="https://browsersync.io/docs/gulp">https://browsersync.io/docs/gulp</a></p>
<p>安裝套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install browser-sync gulp --save</span><br></pre></td></tr></table></figure>

<p>在gulpfile.js中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> browserSync = <span class="built_in">require</span>(<span class="string">&#x27;browser-sync&#x27;</span>).<span class="title function_">create</span>();</span><br></pre></td></tr></table></figure>

<p>建立任務，指定伺服器位置為最後輸出的public資料夾</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">browser</span>(<span class="params"></span>)&#123;</span><br><span class="line">  browserSync.<span class="title function_">init</span>(&#123;</span><br><span class="line">    <span class="attr">server</span>: &#123; <span class="attr">baseDir</span>: <span class="string">&quot;./public&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">reloadDebounce</span>: <span class="number">2000</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在其他gulp任務輸出的最後加上 <code>.pipe(browserSync.stream())</code></p>
<p>如在babel任務加上，就會在babel更新後，自動同步到瀏覽器。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">babel</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(path.<span class="property">js</span>.<span class="property">src</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">plumber</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>($.sourcemaps.<span class="title function_">init</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">babel</span>(&#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&#x27;@babel/env&#x27;</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">concat</span>(<span class="string">&#x27;all.js&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">if</span>(options.<span class="property">env</span> === <span class="string">&#x27;prod&#x27;</span>, $.<span class="title function_">uglify</span>()))</span><br><span class="line">    .<span class="title function_">pipe</span>($.sourcemaps.<span class="title function_">write</span>(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(path.<span class="property">js</span>.<span class="property">des</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(browserSync.<span class="title function_">stream</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>(10) Gulp 釋出開發成品</title>
    <url>/2022/06/18/2022-6-18-2-Gulp-result/</url>
    <content><![CDATA[<h2 id="安裝-gulp-clean"><a href="#安裝-gulp-clean" class="headerlink" title="安裝 gulp clean"></a>安裝 gulp clean</h2><p>在gulp專案中，有時我們可能在source資料夾裡有一些test檔案，是不該被編譯到public資料夾內的。但無法記得到底哪些test已經被編譯，那些沒有。此時就可以用 gulp clean、gulp-sequence來清理最終的public資料夾。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install gulp-clean --save</span><br></pre></td></tr></table></figure>

<p>建立一個 clean 任務</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clean</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public&#x27;</span>], &#123; <span class="attr">read</span>: <span class="literal">false</span>, <span class="attr">allowEmpty</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">clean</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用 clean 任務，刪除如 .tmp(暫存資料夾)、public資料夾，目的是將資料夾刪除後，重新編譯。</p>
<h2 id="gulp-parallel、series"><a href="#gulp-parallel、series" class="headerlink" title="gulp parallel、series"></a>gulp parallel、series</h2><p>在 gulp4.0 中新增了 parallel、series兩個方法</p>
<ol>
<li>parallel : 任務同時執行</li>
<li>series : 任務依序執行</li>
</ol>
<p>我們可以用這兩個方法，讓我們之前建立的各種gulp任務，依序或同時執行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">build</span> = gulp.<span class="title function_">series</span>(clean, ejs, sassTask, babel, vendorsJs)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = gulp.<span class="title function_">series</span>(clean, ejs, sassTask, babel, vendorsJs, gulp.<span class="title function_">parallel</span>(watch, browser))</span><br></pre></td></tr></table></figure>

<p>在 <code>gulpfile.js</code> 的最後，分別輸出build跟default指令。 </p>
<ul>
<li>default: 為預設指令，在commend line上輸入 gulp 即可執行。</li>
<li>build: 用來產出成品，在commend line上輸入 gulp build 即可執行。</li>
</ul>
<p>在 gulp.series() 中我們依序執行 clean、ejs、sass等任務，但要注意，在 export.default是開發時使用，所以加上了watch， browser等監聽的任務，若在build成品，則不需加入。</p>
<h2 id="完成程式碼參考"><a href="#完成程式碼參考" class="headerlink" title="完成程式碼參考"></a>完成程式碼參考</h2><p><a href="https://github.com/tim8076/gulp-project/blob/main/gulpfile.js">參考範例</a></p>
]]></content>
      <categories>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>(11) Gulp-git</title>
    <url>/2022/06/18/2022-6-18-3-Gulp-git/</url>
    <content><![CDATA[<h2 id="初始化git"><a href="#初始化git" class="headerlink" title="初始化git"></a>初始化git</h2><p>這章節，我們來幫gulp專案加入 git 版本控制，若電腦還沒安裝git的話，可以先到<a href="https://git-scm.com/">git官網</a>下載git並安裝。</p>
<p>安裝好git後，在commend line輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init // 建立本地儲存庫</span><br><span class="line">git add . // 加入所有檔案到目錄</span><br><span class="line">git commit -m &quot;first commit&quot;  // 提交本次紀錄</span><br></pre></td></tr></table></figure>

<h2 id="新增-gitignore-檔案"><a href="#新增-gitignore-檔案" class="headerlink" title="新增 gitignore 檔案"></a>新增 gitignore 檔案</h2><p>因為有一些檔案是不需要加入版本控制的，如 public資料夾、.temp資料夾、node_modules資料夾，此時可以開一個 .gitignore 檔案，將不須控制的檔案忽略。</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*6er_v_0LzoqbD_Pl0lTEgw.png" alt="gitignore"></p>
<p>在用 git status 去檢查未加入目錄的檔案時，就會發現有加入.gitignore的檔案都消失了，代表這些檔案不用被git做控制。</p>
<h2 id="快速發佈到-github-pages"><a href="#快速發佈到-github-pages" class="headerlink" title="快速發佈到 github pages"></a>快速發佈到 github pages</h2><p>在完成我們的gulp專案後，可以發佈到 github pages上。</p>
<p>先下載 <code>gulp-gh-pages</code>  套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install - save-dev gulp-gh-pages</span><br></pre></td></tr></table></figure>

<p>在gulpfile.js中加入deploy任務，因為有使用gulp-load-plugins這個套件，只要在ghPages()前方加入$即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deploy</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">ghPages</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>輸入 gulp deploy後，會在github上新開一個 gh-pages 的分支，自動將public資料夾裡的內容上傳到github。</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*5FV7yd4cKZ0mp4dL-Y1-Dw.png" alt="github"></p>
]]></content>
      <categories>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>(1) SCSS練功坊-基礎介紹</title>
    <url>/2022/06/18/2022-6-18-5-scss-intro/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>scss屬於css的預處理器，他加入了程式語言所用的變數、迴圈、模組化等概念，讓我們更方便管理css。<br>現今較為主流的 CSS 預處理器有三種，分別是 Sass&#x2F;SCSS、Less、Stylus，其中的 Sass&#x2F;SCSS 是目前較多人使用的選擇。</p>
<h2 id="scss-語法介紹"><a href="#scss-語法介紹" class="headerlink" title="scss 語法介紹"></a>scss 語法介紹</h2><h3 id="巢狀寫法（Nesting）"><a href="#巢狀寫法（Nesting）" class="headerlink" title="巢狀寫法（Nesting）"></a>巢狀寫法（Nesting）</h3><p>以往寫css時，為了選取到某個元素底下的標籤，我們可能會重複選取該元素許多次，例如:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面程式碼中，我們重複寫了 .card 3次。</p>
<p>在scss中我們可以用巢狀的寫法來減少重複的code，並且當父元素的class更改時，也只需要改一次即可:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>scss的功能除了上述介紹的巢狀語法以外，還有許多如變數、函式、mixin、模組化等概念會在之後等章節來介紹喔。</p>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>(2) SCSS練功坊-變數variable</title>
    <url>/2022/06/19/2022-6-19-1-scss-variable/</url>
    <content><![CDATA[<h2 id="以往css遇到的問題"><a href="#以往css遇到的問題" class="headerlink" title="以往css遇到的問題"></a>以往css遇到的問題</h2><p>以往在寫css時，可能我們會直接將顏色的值寫死，例如:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f0a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f0a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.article</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣做的問題是，當今天客戶想將某個顏色替換時，我們必須手動一個一個更改，假如網站有300個地方用到該顏色，就需要手動改300次。</p>
<p>在 SCSS裡，我們可以使用變數來管理重複的值，例如 我們可以將色碼設定為變數，當後續需要調整顏色時，只要調整變數，就改完全站的設定。</p>
<h2 id="變數設定方式"><a href="#變數設定方式" class="headerlink" title="變數設定方式"></a>變數設定方式</h2><p>首先先在程式碼最上面打個『$』字號，後面則是自己命名的變數，之後在填上變數的值。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$color-primary</span>: <span class="number">#fa0</span>;</span><br><span class="line"><span class="variable">$color-gray</span>: <span class="number">#aaa</span>;</span><br></pre></td></tr></table></figure>

<p>之後需要設定顏色樣式時，就可以引入變數。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color-primary</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>變數除了支援色碼外還支援「字串」、「數字」等等。</p>
<p>雙引號的字串也可用 #{ }取出來:</p>
<p><img src="https://miro.medium.com/max/1004/1*jvZyuT0ob0GIxXyu3fdjoQ.png" alt="va"></p>
<p><img src="https://miro.medium.com/max/1048/1*ZgC18gRiXbzEUl_FiZrwuQ.png" alt="編譯後"></p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>學會使用變數以後，就不用辛苦的一個一個修改css了，全站的設定統一由變數管理，讓之後的修改與維護更輕鬆。</p>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>(12) Gulp-ejs</title>
    <url>/2022/06/18/2022-6-18-4-Gulp-ejs/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當我們在開發一個多頁式網站時，常常會有許多重複的區塊，例如表頭與表尾，可以將這些重複的區塊抽離出來，作為layout。此時就需要用到樣板語言來達成，來替 HTML 語言加入條件判斷、for 迴圈、元件化、套用模板等等功能。<br>本篇會介紹如何在gulp中，加入ejs樣板語言，幫助我們將重複的區塊抽離。</p>
<h2 id="套件安裝"><a href="#套件安裝" class="headerlink" title="套件安裝"></a>套件安裝</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install ejs --save   //安裝ejs</span><br><span class="line">npm install gulp-front-matter --save  // 幫每頁 HTML 個別設定變數</span><br><span class="line">npm install gulp-layout --save  // 以先接收 front-matter 傳來的值，然後傳到 EJS 模板接收變數，再轉成 HTML</span><br></pre></td></tr></table></figure>

<h2 id="ejs-任務建立"><a href="#ejs-任務建立" class="headerlink" title="ejs 任務建立"></a>ejs 任務建立</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ejs</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(path.<span class="property">html</span>.<span class="property">src</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">plumber</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">frontMatter</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">      $.<span class="title function_">layout</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> file.<span class="property">frontMatter</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">if</span>(options.<span class="property">env</span> === <span class="string">&#x27;prod&#x27;</span>, $.<span class="title function_">htmlmin</span>(&#123; <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> &#125;)))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(browserSync.<span class="title function_">stream</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="資料夾結構"><a href="#資料夾結構" class="headerlink" title="資料夾結構"></a>資料夾結構</h2><p><img src="https://cdn-images-1.medium.com/max/1320/1*3cxas_T2MN-W3YIgg9v5aQ.png" alt="folder"></p>
<p>在source裡建立一個layout.ejs檔案，裡頭可放表頭表尾等每一頁都會出現的區塊。</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*XO6XwQGH-rn7AG2R3g9OsA.png" alt="layout"></p>
<p>在html裡，因為每個頁面會想客製化設定一些資訊，所以會在每個有使用到 EJS 模板的 HTML 檔的上方放上 front-matter。以首頁為例，front-matter 有著這些資訊：</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*Oo079oe6jMdMI5VqfJyrTg.png" alt="front-matter"></p>
<p>因此，ejs就可以取用 title變數取得首頁的值，並用layout變數指定layout的ejs檔。<br>整個運作過程大概是這樣：</p>
<ol>
<li>目錄下有具有 front-matter 的html檔、還有ejs 模板的 EJS 檔案</li>
<li>gulp-front-matter 套件會解析檔案中的 front-matter 部份，並轉成 JS object</li>
<li>gulp-layout 接收 JS object，把它跟 ejs 模板摻摻在一起，產出瀏覽器看得懂的 HTML 檔</li>
</ol>
]]></content>
      <categories>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
        <tag>ejs</tag>
      </tags>
  </entry>
  <entry>
    <title>(3) SCSS練功坊-計算功能</title>
    <url>/2022/06/19/2022-6-19-2-scss-calc/</url>
    <content><![CDATA[<h2 id="計算功能"><a href="#計算功能" class="headerlink" title="計算功能"></a>計算功能</h2><p>在 SCSS裡，我們可以用變數來做加減乘除等運算，如下我設定了 $font-size: 16px，之後再利用這個變數做運算，計算出其他font-size大小。但要注意計算時單位必須一樣。</p>
<p><img src="https://miro.medium.com/max/1028/1*n0VDI1urUorAt3oPPs4YXA.png" alt="font-size"></p>
<p>計算單位 除了px單位外，em與%數也可以，但假使你用px+em與%單位的話，會跳錯誤，因為單位不同。</p>
<h2 id="範例-計算container-寬度"><a href="#範例-計算container-寬度" class="headerlink" title="範例: 計算container 寬度"></a>範例: 計算container 寬度</h2><p>有一個 container 寬度為 $width :920px；裡面有6個子元素box，利用 width &#x2F; 6 ，直接算出每個box寬度。</p>
<p><img src="https://miro.medium.com/max/842/1*EzxbD-ztoCWUm-wqE3OVLA.png" alt="container"></p>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>(5) SCSS練功坊-mixin</title>
    <url>/2022/06/19/2022-6-19-4-scss-mixin/</url>
    <content><![CDATA[<h2 id="使用-mixin-管理重複的樣式"><a href="#使用-mixin-管理重複的樣式" class="headerlink" title="使用 mixin 管理重複的樣式"></a>使用 mixin 管理重複的樣式</h2><p>當我們有一段樣式，會被重複用到，裡頭樣式數值又會有不同時，可以用mixin做管理。<br>撰寫mixin方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@mixin + mixin名稱(參數) &#123; &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1266/1*M5IXbD8WVeMwgzfadFHNrQ.png" alt="circle"></p>
<p>上圖中， circle 裡可以帶入 $size，$bg-color等不同參數，如此在不同地方，我們可以依照不同需求，傳入不同參數，做出不同的圓形。</p>
<p>引入 mixin時，用 @include + mixin名稱</p>
<p><img src="https://miro.medium.com/max/1140/1*Yn5snpWqUCxsEJ1eA646zQ.png" alt="編譯後結果"></p>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>(4) SCSS練功坊-import</title>
    <url>/2022/06/19/2022-6-19-3-scss-import/</url>
    <content><![CDATA[<h2 id="模組化管理"><a href="#模組化管理" class="headerlink" title="模組化管理"></a>模組化管理</h2><p>以往寫css時，所有的code都寫在同一份css檔案裡，當code越來越多，就越難維護與管理你的css。<br>在scss裡，我們可以將檔案進行模組化管理，方法如下:</p>
<p>我們會有一個主要的scss檔案，在這個 scss 檔裡我們會import其他模組的scss檔進來，只有這個主要的scss檔案最後會被編譯成css。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022061901.png?alt=media&token=baae5c4a-b4de-4b55-a04f-9681653bf7d1" alt="all.scss"></p>
<p>至於其他被引入的scss，我們會在檔案名稱前加上 「 _ 」 ，如「_reset.scss」， 加了 _ 的檔案就不會被編譯成 css。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022061902.png?alt=media&token=61fab007-d152-47c8-ae03-ce4a073e3391" alt="module"></p>
<h2 id="引入順序"><a href="#引入順序" class="headerlink" title="引入順序"></a>引入順序</h2><p>通常我們會有一個 all.scss ，裡面放其他要載入的SCSS檔。</p>
<p>這個檔案就會有一堆 @import，編譯出來的CSS檔案就會依照@import的前後排列來依序產生CSS碼。</p>
<ol>
<li><p>@import最前面的檔案裏面一定都會先放全域變數、mixin、function等，這樣後面的檔案 才吃的到變數的設定。</p>
</li>
<li><p>再來是 reset、base等全站共用的樣式。</p>
</li>
<li><p>layout可以網頁版型的共通設計，如表頭、表尾。</p>
</li>
<li><p>再來就index首頁、page內頁，再來就看你的單元數量視情況來切割。</p>
</li>
</ol>
<p>引入參考順序</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// variables</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./abstract/functions&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./abstract/variables&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./abstract/media-query&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// base classes</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./base/reset&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./base/base&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./base/typography&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// utils</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./utils/utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//layout</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./layout/grid&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pages</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./pages/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//components</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./components/button&#x27;</span>;</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>(7) SCSS練功坊-顏色函數</title>
    <url>/2022/06/20/2022-6-20-1-scss-color/</url>
    <content><![CDATA[<h2 id="顏色函數"><a href="#顏色函數" class="headerlink" title="顏色函數"></a>顏色函數</h2><p><img src="https://miro.medium.com/max/1400/1*SFb0wzFGrTw4byZVEbn_8g.png" alt="color"></p>
<p>在SCSS中 ，可以利用一些內建的函數，來調整顏色。</p>
<p>如: darken(#fff, 20%) &#x2F;&#x2F;將白色調暗10%；</p>
<p>lighten(#000,30% ) &#x2F;&#x2F;將黑色調亮10%;</p>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>(8) SCSS練功坊-Each loops</title>
    <url>/2022/06/20/2022-6-20-2-scss-loop/</url>
    <content><![CDATA[<h2 id="建立陣列"><a href="#建立陣列" class="headerlink" title="建立陣列"></a>建立陣列</h2><p>在scss中，可以使用each loop快速產生樣式。</p>
<p>首先，可以建立一個陣列如下:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$theme-colors</span>: (</span><br><span class="line">  <span class="string">&#x27;primary&#x27;</span>:   <span class="number">#326dee</span>,</span><br><span class="line">  <span class="string">&#x27;secondary&#x27;</span>: <span class="number">#1ac886</span>,</span><br><span class="line">  <span class="string">&#x27;danger&#x27;</span>:    <span class="number">#d32752</span>,</span><br><span class="line">  <span class="string">&#x27;light&#x27;</span>:     <span class="number">#c2c2c2</span>,</span><br><span class="line">  <span class="string">&#x27;dark&#x27;</span>:      <span class="number">#000</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>陣列中會有key跟value，利用 @each 迴圈的方式產生樣式</p>
<p><img src="https://miro.medium.com/max/846/1*3n3L745sBINDgCmWKUQMmw.png" alt="loop"></p>
<p>其中 $name 跟 $color 分別代表 陣列裡的key跟value，利用 # { }將參數$name一一帶入後，就可以產生各個樣式。</p>
<h2 id="陣列寫法注意事項"><a href="#陣列寫法注意事項" class="headerlink" title="陣列寫法注意事項"></a>陣列寫法注意事項</h2><p><img src="https://miro.medium.com/max/810/1*4Jkss8qZjal6t_qG1s2qFw.png" alt="loop"></p>
<ol>
<li>key如果是string要加上 ‘ ‘</li>
<li>每個key和value都是獨立一行</li>
<li>最後一行，也建議加上 , 方便閱讀</li>
</ol>
<h2 id="陣列多個值"><a href="#陣列多個值" class="headerlink" title="陣列多個值"></a>陣列多個值</h2><p>一個scss陣列也可以有多組值</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$heading-list</span>: (</span><br><span class="line">  h1   <span class="number">50px</span>   <span class="number">300</span>,</span><br><span class="line">  h2   <span class="number">42px</span>   <span class="number">300</span>,</span><br><span class="line">  h3   <span class="number">34px</span>   <span class="number">400</span>,</span><br><span class="line">  h4   <span class="number">26px</span>   <span class="number">400</span>,</span><br><span class="line">  h5   <span class="number">20px</span>   <span class="number">600</span>,</span><br><span class="line">  h6   <span class="number">16px</span>   <span class="number">600</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$value</span> in <span class="variable">$heading-list</span> &#123;</span><br><span class="line">  #&#123;<span class="built_in">nth</span>($value, <span class="number">1</span>)&#125;,</span><br><span class="line">  <span class="selector-class">.txt-</span>#&#123;<span class="built_in">nth</span>($value, <span class="number">1</span>)&#125; &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: nth(<span class="variable">$value</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: nth(<span class="variable">$value</span>, <span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以產生如下的css</p>
<p><img src="https://miro.medium.com/max/920/1*TsqyJQQt3ZDwIrzVK0MWTQ.png" alt="img"></p>
<h2 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a>for loop</h2><p>除了 @each 以外，也可以使用 @for loop 來快速產生樣式。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// color plattes</span></span><br><span class="line"><span class="variable">$colors</span>: (</span><br><span class="line">  <span class="string">&quot;blue&quot;</span>: <span class="number">#1919e6</span>,</span><br><span class="line">  <span class="string">&quot;red&quot;</span>: <span class="number">#e61919</span>,</span><br><span class="line">  <span class="string">&quot;yellow&quot;</span>: <span class="number">#e6e619</span>,</span><br><span class="line">  <span class="string">&quot;green&quot;</span>: <span class="number">#19e635</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$key</span>, <span class="variable">$value</span> in <span class="variable">$colors</span> &#123;</span><br><span class="line">  <span class="comment">// light variations</span></span><br><span class="line">  <span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">9</span> &#123;</span><br><span class="line">    <span class="selector-class">.text-</span>#&#123;<span class="variable">$key</span>&#125;-light-#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">      <span class="attribute">color</span>: mix(white, <span class="variable">$value</span>, <span class="variable">$i</span> * <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.bg-</span>#&#123;<span class="variable">$key</span>&#125;-light-#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: mix(white, <span class="variable">$value</span>, <span class="variable">$i</span> * <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上，我們先用 @each 對$color 陣列跑回圈，在每次迴圈中，<br>再用 <code>@for $i from 1 through 9</code> 從 1 跑到 9 產生 9 個顏色的漸層樣式。</p>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>(6) SCSS練功坊-extend</title>
    <url>/2022/06/19/2022-6-19-5-scss-extend/</url>
    <content><![CDATA[<h2 id="合併樣式"><a href="#合併樣式" class="headerlink" title="合併樣式"></a>合併樣式</h2><p>當我們有一段樣式常常用到，可以用@extend來將樣式合併在一起。</p>
<p>使用 % +class 撰寫要合併之樣式，並用@extend 來載入樣式。</p>
<p><img src="https://miro.medium.com/max/1220/1*E5-ebZ9tVXeHmwf4i4uN2w.png" alt="extend"></p>
<p><img src="https://miro.medium.com/max/1134/1*gUgESgMLa1DmyLz94Rp9Rw.png" alt="編譯後"></p>
<h2 id="Mixin與extend的使用時機"><a href="#Mixin與extend的使用時機" class="headerlink" title="Mixin與extend的使用時機"></a>Mixin與extend的使用時機</h2><p>基本上來說，<br>@mixin是將程式碼帶入到對應的class去，同時可帶入變數。<br>@extend則是藉由class合併，並吃到共通樣式，但沒辦法帶入變數。</p>
<p>所以如果你的樣式都固定不變的，不會需要用參數帶進去改變樣式的話，<br>那就用@extend，程式碼會比較少些。</p>
<p>但如果你的程式碼需要帶入多個變數進行運算時，<br>那用@mixin則較適合。</p>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>(9) SCSS練功坊-7+1資料夾規劃</title>
    <url>/2022/06/20/2022-6-20-3-scss-7-1/</url>
    <content><![CDATA[<h2 id="7-1-資料夾規劃"><a href="#7-1-資料夾規劃" class="headerlink" title="7 + 1 資料夾規劃"></a>7 + 1 資料夾規劃</h2><p>當我們有許多SCSS檔案要規劃時，可以使用7+1歸納法，也就是7個資料夾搭配 1個 all.scss檔案</p>
<p><img src="https://miro.medium.com/max/1128/1*jmb4MvIeinaRy7etvwvhZw.png" alt="img"></p>
<h3 id="abstract-資料夾"><a href="#abstract-資料夾" class="headerlink" title="abstract 資料夾"></a>abstract 資料夾</h3><p>放 variables、mixin、funtion等不會真正產出 css 的 scss 檔案</p>
<h3 id="base-資料夾"><a href="#base-資料夾" class="headerlink" title="base 資料夾"></a>base 資料夾</h3><p>放 base.scss 、 reset.scss、Typography等全域設定的scss</p>
<h3 id="components-資料夾"><a href="#components-資料夾" class="headerlink" title="components 資料夾"></a>components 資料夾</h3><p>放全站都會用到的元件，如 button 、 label、nav等等</p>
<h3 id="layout-資料夾"><a href="#layout-資料夾" class="headerlink" title="layout 資料夾"></a>layout 資料夾</h3><p>放全站共用的layout區塊，如 grid 、header、footer等等</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;&#125; <span class="comment">// header 樣式</span></span><br><span class="line"><span class="selector-class">.footer</span> &#123;&#125; <span class="comment">// footer 樣式</span></span><br><span class="line"><span class="selector-class">.l-list</span> &#123;&#125; <span class="comment">// 使用 l- 前贅詞代表是 layout 用的樣式</span></span><br><span class="line"><span class="selector-class">.l-grid</span> &#123;&#125; </span><br></pre></td></tr></table></figure>

<h3 id="pages-資料夾"><a href="#pages-資料夾" class="headerlink" title="pages 資料夾"></a>pages 資料夾</h3><p>放 每頁不同的scss</p>
<h3 id="themes資料夾"><a href="#themes資料夾" class="headerlink" title="themes資料夾"></a>themes資料夾</h3><p>如果你的網站有主題樣式，可以放這裡</p>
<h3 id="vendor-資料夾"><a href="#vendor-資料夾" class="headerlink" title="vendor 資料夾"></a>vendor 資料夾</h3><p>放外部資源的scss檔，如bootstrap.scss</p>
<p>另外可參考<a href="https://gist.github.com/rveitch/84cea9650092119527bc">此網站配置</a></p>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>(1) Git 練功坊-安裝教學</title>
    <url>/2022/06/21/2022-6-21-3-git-install/</url>
    <content><![CDATA[<h2 id="什麼是git"><a href="#什麼是git" class="headerlink" title="什麼是git"></a>什麼是git</h2><p>以往在做檔案版本的管理時，最簡單的方法就是複製編輯前的檔案並在檔案名稱加上日期，但是，每次編輯檔案都要複製非常的麻煩，也很容易出錯。</p>
<p>Git為分散式版本控制系統，可以把檔案的狀態作為更新歷史記錄保存起來。因此可以把編輯過的檔案復原到以前的狀態，也可以顯示編輯過內容的差異。</p>
<p>本系列文章為參考 <a href="https://courses.hexschool.com/p/git-github">六角學院git課程</a> 紀錄。</p>
<h2 id="安裝git"><a href="#安裝git" class="headerlink" title="安裝git"></a>安裝git</h2><p><img src="https://miro.medium.com/max/1400/1*9tfhhWJLGL5HM7V99xkKXw.png" alt="git官網"></p>
<p>先到 <a href="https://git-scm.com/">git官網</a> 下載git</p>
<h2 id="確認git版本"><a href="#確認git版本" class="headerlink" title="確認git版本"></a>確認git版本</h2><p>在VScode編輯器裡，按 ctrl + ~ 開啟終端機畫面。<br>輸入 <code>git version</code> 確認下載的git版本，若有出現版本號，就安裝成功囉。</p>
<p><img src="https://miro.medium.com/max/1138/1*Q48Ug1afDJ2JzugYH_fslA.png" alt="git版本"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>(1) CSS 基礎篇-Position</title>
    <url>/2022/06/21/2022-6-21-1-css-posotion/</url>
    <content><![CDATA[<h2 id="Position-屬性介紹"><a href="#Position-屬性介紹" class="headerlink" title="Position 屬性介紹"></a>Position 屬性介紹</h2><p>在網頁中 position 的用途是設定「物件定位時所要的參考對像」，預設狀態下物件的位置是依據資料流來做排列，也就是跟隨資料做排列，如果對物件添加了不同的 position 之後，就能改變物件所參考的空間對像，進而改變物件的位置。</p>
<p>以下分別介紹各種position 屬性</p>
<h2 id="static-靜態定位"><a href="#static-靜態定位" class="headerlink" title="static 靜態定位"></a>static 靜態定位</h2><p>是元素的預設值，不會被特別定位」在頁面上特定位置，而是照著瀏覽器預設的配置自動排版在頁面上</p>
<h2 id="relative-相對定位"><a href="#relative-相對定位" class="headerlink" title="relative 相對定位"></a>relative 相對定位</h2><p>在一個設定為 position: relative 的元素內設定 top 、 right 、 bottom 和 left 屬性，會使其元素「相對地」調整其原本該出現的所在位置，而不管這些「相對定位」過的元素如何在頁面上移動位置或增加了多少空間，都不會影響到原本其他元素所在的位置。可以稱為【偏移顯示】</p>
<p>不過通常不會對position relative設定top 、 right 等位移，因為會讓元素脫離預設的排版，讓我們很難去設定周圍元素的樣式。</p>
<p><a href="https://youtu.be/jx5jmI0UlXU?t=166">參考影片</a></p>
<h2 id="abosulute-絕對定位"><a href="#abosulute-絕對定位" class="headerlink" title="abosulute 絕對定位"></a>abosulute 絕對定位</h2><p>會將元素從預設排版中抽離，就像不存在於html結構中一樣。<br>元素設定 Position abosulute 後會去尋找父層中，有定位的元素做定位，如最常用的 position:relative、或fixed、absolute；<br>若父層都沒有定位元素，就會跟瀏覽器做定位。</p>
<p>position absolute可以搭配top 、bottom 、right、left 來設定定位位置，如下面範例將元素定位在左上角。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: position;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="absolute搭配-width-height技巧"><a href="#absolute搭配-width-height技巧" class="headerlink" title="absolute搭配 width height技巧"></a>absolute搭配 width height技巧</h3><p>width、height、margin: auto 跟top 、bottom等一起用，可以控制元素的大小與位置，<a href="https://www.youtube.com/watch?v=QGKO0PGzFXQ&t=16s">教學影片</a></p>
<p><img src="https://miro.medium.com/max/826/1*ThNCveqMOYrXF4nVoTBWkw.png" alt="position"></p>
<p><img src="https://miro.medium.com/max/1400/1*PIKeD9RV4TGRvLhT3w5ylA.png" alt="position"></p>
<h2 id="fixed-固定定位"><a href="#fixed-固定定位" class="headerlink" title="fixed 固定定位"></a>fixed 固定定位</h2><p>固定定位（position: fixed）的元素會相對於瀏覽器視窗來定位，這意味著即便頁面捲動，它還是會固定在相同的位置。和 relative 一樣，我們會使用 top 、 right 、 bottom 和 left 屬性來定位。</p>
<p>固定定位元素不會保留它原本在頁面應有的空間，不會跟其他元素的配置互相干擾。</p>
<h2 id="sticky-黏著定位"><a href="#sticky-黏著定位" class="headerlink" title="sticky 黏著定位"></a>sticky 黏著定位</h2><p>結合了 position : relative，跟 position: fixed，當使用者沒滑動卷軸時，就跟relative元素一樣，當使用者滑動卷軸時，則跟position: fixed 會固定在視窗上。</p>
<p><a href="https://codepen.io/tim-chou/pen/NWbvMQL">範例</a></p>
<h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h2><p>z-index 用來設定物件的前後層級，最常見的要素是必須要有「position」屬性，且 position 的值不可為 static。z-index 設定數值越大越前面，能蓋住其他物件。若數值一樣大，則原始碼後方物件會蓋過前方物件。</p>
<p><img src="/../images/css/z-index.png"></p>
<h3 id="顯示物件在父層後方"><a href="#顯示物件在父層後方" class="headerlink" title="顯示物件在父層後方"></a>顯示物件在父層後方</h3><p>若想讓物件顯示在父層後方，就不能在父層將「z-index」設為 auto 以外的值。只要父層的z-index 是數值，子層z-index會被限定在父層之中，無法落於父層後。</p>
<p><a href="https://codepen.io/jskrtivy-the-animator/pen/WNBadYp">範例參考</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(1) CSS 響應式設計-文字大小</title>
    <url>/2022/06/20/2022-6-20-4-rwd-text/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當我們設計一個響應式的網站時，除了版面隨著裝置大小不同，文字大小也會不同。例如手機板的文字應該就要比桌機版的文字來的小。這章節就介紹一些設定響應式文字的方法。</p>
<h2 id="Media-query"><a href="#Media-query" class="headerlink" title="Media-query"></a>Media-query</h2><p>使用media-query來設定不同裝置的文字大小，算是最常用的手法。<br>本系列範例皆以 scss 的寫法呈現。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">960px</span>) &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">3rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="VW"><a href="#VW" class="headerlink" title="VW"></a>VW</h2><p>使用vw這個單位來設計，會隨著網頁縮放而改變尺寸，每1vw代表螢幕寬度的 1%。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: calc(<span class="number">16px</span> + <span class="number">2vw</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面我們用了 calc 語法，將16px + 2vw 作為文字大小。這樣做確保我們的文字最小是 16px，並且隨著螢幕越大，2vw的值也會越大，讓文字能隨螢幕縮放。</p>
<h2 id="clamp"><a href="#clamp" class="headerlink" title="clamp"></a>clamp</h2><p>使用 clamp 語法來設計，clamp可以傳入三個值，讓我們設定最大和最小的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clamp(最小的值，我們希望的值，最大的值)</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: clamp(<span class="number">1.375rem</span>, <span class="number">0.875rem</span> + <span class="number">2vw</span>, <span class="number">2.25rem</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://youtu.be/jfMHA8SqUL4?t=7595">參考教學影片</a></p>
<h2 id="響應式文字的單位"><a href="#響應式文字的單位" class="headerlink" title="響應式文字的單位"></a>響應式文字的單位</h2><p>關於響應式文字的單位，盡量使用相對單位 rem 來設計。如果使用px這種絕對單位設計，會讓使用者無法在瀏覽器的設定中調整文字大小。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022062001.png?alt=media&token=c30147dd-d0b8-486b-be92-d972de794d77" alt="瀏覽器設定文字大小"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>RWD</tag>
      </tags>
  </entry>
  <entry>
    <title>(2) Git 練功坊-數據庫</title>
    <url>/2022/06/21/2022-6-21-4-git-basic/</url>
    <content><![CDATA[<h2 id="使用數據庫管理歷史記錄"><a href="#使用數據庫管理歷史記錄" class="headerlink" title="使用數據庫管理歷史記錄"></a>使用數據庫管理歷史記錄</h2><p>數據庫 (Repository) 是 git 用來記錄檔案或目錄狀態的地方，儲存內容的修改歷史記錄。數據庫可分為兩種</p>
<ul>
<li>遠端數據庫 : 配有專用的伺服器，為了讓多人共享而建立的數據庫。</li>
<li>本地端數據庫 : 在本機專案上建立的數據庫。</li>
</ul>
<p>在本地端更新好檔案後，我們可以用 push 等方法將本地端的資料上傳到遠端數據庫。<br>遠端數據庫的資料有更新時，也可下載更新到本地端。</p>
<h2 id="初始化-git"><a href="#初始化-git" class="headerlink" title="初始化 git"></a>初始化 git</h2><p>如果是第一次用 git，需要先輸入姓名和電子信箱的資料</p>
<p>在終端機輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config — global user.email “ 電子信箱“</span><br><span class="line"></span><br><span class="line">git config — global user.name ”名字”</span><br></pre></td></tr></table></figure>

<p>方便之後再做版本控制時，可以知道是誰修改檔案。</p>
<p>輸入完後，可以輸入下面指令，查詢 git 設定內容(小寫 q 離開)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<h2 id="建立本地端數據庫"><a href="#建立本地端數據庫" class="headerlink" title="建立本地端數據庫"></a>建立本地端數據庫</h2><p>先新開一個專案資料夾並移動進去，先新增一個本地端數據庫<br>在終端機輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init  // 新增本地數據庫</span><br></pre></td></tr></table></figure>

<p>新增完成後，會出現 master 字樣，代表新增成功囉。</p>
<p><img src="https://miro.medium.com/max/1354/1*e-Nug4-xJBAoymsYYN91TQ.png" alt="git數據庫"></p>
<p>這指令主要就是會在你的資料夾建立一個 .git 資料夾，任何版本控制項目都會透過它進行監視版控。數據庫建立好後，下一章節會介紹 git 基礎語法喔。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>(2) CSS 基礎篇-background-image</title>
    <url>/2022/06/21/2022-6-21-2-css-bg/</url>
    <content><![CDATA[<h2 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h2><p>background-image 可以設定一張或多張的圖片，寫法如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;tim.png&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>背景圖片的設定，在不控制大小的情況下，預設就是原始圖片大小，且圖片僅會顯示在區塊的範圍內，也就是說當圖片太大張的時候，圖片將會發生裁切的情形。另外，當同時設定了background-color與background-image的時候，background-image將會蓋住background-color。</p>
<p>background-image支援的值有以下幾種</p>
<ul>
<li>url( )</li>
<li>linear-gradient( )</li>
<li>radial-gradient( )</li>
<li>repeating-linear-gradient( )</li>
<li>repeating-radial-gradient()</li>
<li>Inital</li>
<li>Inherit</li>
</ul>
<h2 id="url-設定"><a href="#url-設定" class="headerlink" title="url() 設定"></a>url() 設定</h2><p>url所要撰寫的是圖片檔案所在的位置，可使用</p>
<ul>
<li><p>相對路徑: (“..&#x2F;pic&#x2F;01.jpg”);<br>從該段 css background-image 所在位置前往圖片所在位置 </p>
</li>
<li><p>絕對路徑: (“<a href="https://medium.com/&quot;">https://medium.com/&quot;</a>);<br>完整的網址</p>
</li>
</ul>
<h2 id="多重背景功能"><a href="#多重背景功能" class="headerlink" title="多重背景功能"></a>多重背景功能</h2><p><img src="https://miro.medium.com/max/1336/1*hj-Xjk2RizivLb7zWblx3Q.png" alt="多重背景"></p>
<p>可以寫入多張背景圖的url，並在每個url之間使用了逗號做區隔，要注意</p>
<ol>
<li>背景圖片的堆疊是按照順序的，先寫的則顯示在前，後寫的顯示在後，依序堆疊</li>
<li>背景圖片設定不要重複(background-repeat: no-repeat;)</li>
<li>背景圖片的位置設定要錯開(position)</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bg</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://picsum.photos/200/100?random=1</span>),</span><br><span class="line">                    <span class="built_in">url</span>(<span class="string">https://picsum.photos/200/100?random=2</span>),</span><br><span class="line">                     <span class="built_in">url</span>(<span class="string">https://picsum.photos/200/100?random=3</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: left top, right bottom, center center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/jskrtivy-the-animator/pen/eYaVwGQ">範例</a></p>
<h2 id="漸層背景設定"><a href="#漸層背景設定" class="headerlink" title="漸層背景設定"></a>漸層背景設定</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-image: linear-gradient(起始色彩, 結束色彩);</span><br></pre></td></tr></table></figure>

<p>指定方向漸層</p>
<p><img src="https://miro.medium.com/max/1374/1*yBOyNTlobUkGFw_qt1a4Yg.png" alt="漸層設定"></p>
<ul>
<li>to top (下方漸層到上方)</li>
<li>to right (左方漸層到右方)</li>
<li>to bottom (上方漸層到下方)</li>
<li>to left (右方漸層到左方)</li>
<li>to top left (右下漸層到左上)</li>
<li>to top right (左下漸層到右上)</li>
<li>to bottom right (左上漸層到右下)</li>
<li>to bottom left (右上漸層到左下)</li>
</ul>
<p><img src="https://miro.medium.com/max/1114/1*qsdu8QDqQ-SRelX0DySwLw.png" alt="漸層設定"></p>
<p>或使用角度設定 (60deg,起始顏色，結束顏色)</p>
<p>常用角度如: </p>
<ul>
<li>0deg: 由下往上</li>
<li>45deg: 左下往右上</li>
<li>90deg: 由左向右</li>
<li>135deg: 左上往右下</li>
<li>180deg: 由上往下</li>
<li>270deg: 由右往左</li>
<li>360deg: 由下午往上</li>
</ul>
<p>用漸層背景做兩個顏色區塊拼接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-image: linear-gradient(115deg, #f00 50%, #ff0 50%);</span><br><span class="line">                              角度, 起始色彩 開始漸層位置, 結束色彩 結束漸層位置 </span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/jskrtivy-the-animator/pen/PovQrQm">範例</a></p>
<h2 id="背景重複設定"><a href="#背景重複設定" class="headerlink" title="背景重複設定"></a>背景重複設定</h2><p>background-repeat 用來設定背景圖是否重複，預設是 repeat(重複撲滿整個容器，會出現裁切現象)</p>
<ol>
<li>background-repeat: repeat (預設)</li>
<li>background-repeat: no-repeat (不重複)</li>
<li>background-repeat: repeat-x (水平方向位移)</li>
<li>background-repeat: repeat-y(垂直方向位移)</li>
</ol>
<p><img src="/../images/css/bg-repeat.png" alt="repeat"><br><img src="/../images/css/bg-repeat-no.png" alt="no-repeat"><br><img src="/../images/css/bg-repeat-x.png" alt="repeat-x"><br><img src="/../images/css/bg-repeat-y.png" alt="repeat-y"></p>
<ol start="5">
<li>background-repeat: space<br>  在不裁切，不變形，不縮放的情況下重複背景圖片，有多餘空間會分布在圖片之間。</li>
</ol>
<p><img src="/../images/css/bg-repeat-space.png" alt="space"></p>
<ol start="6">
<li>background-repeat: round<br>  使用縮放或變形的方式，讓圖片在不裁切下重複填滿容器。</li>
</ol>
<p> <img src="/../images/css/bg-repeat-round.png" alt="round"></p>
<h3 id="x-y-軸設定"><a href="#x-y-軸設定" class="headerlink" title="x, y 軸設定"></a>x, y 軸設定</h3><p>background-repeat，也可以寫成兩個值，分別代表 x軸，y軸。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span>: no-repeat round;</span><br></pre></td></tr></table></figure>

<p>可以達到 x 軸不重複，y軸則不裁切方式重複。</p>
<p><img src="/../images/css/bg-repeat-x-y.png"></p>
<p><a href="https://codepen.io/jskrtivy-the-animator/pen/bGyvREg">codepen</a></p>
<h2 id="背景圖片位置"><a href="#背景圖片位置" class="headerlink" title="背景圖片位置"></a>背景圖片位置</h2><p>可以用 background-position 來設定背景圖位置，可設定值或關鍵字。</p>
<ul>
<li>值: px、%、em</li>
<li>關鍵字: (x軸, y軸)<br>  left top (左上)<br>  center center (正中)<br>  right bottom (右下)<br>  50px center (距離左側50px 垂直居中)<br>  center 50px (水平居中，距離上方50px)<br>  right 100px bottom 30px (距離右方 100px 距離下方 30px)</li>
</ul>
<h2 id="背景圖片大小"><a href="#背景圖片大小" class="headerlink" title="背景圖片大小"></a>背景圖片大小</h2><p>background-size 可以用來設定背景圖片大小，可設定的值有:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: auto;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">200pt</span>;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">2em</span>; </span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">50%</span>; //百分比</span><br><span class="line"><span class="attribute">background-size</span>: cover;</span><br><span class="line"><span class="attribute">background-size</span>: contain;</span><br><span class="line"><span class="attribute">background-size</span>: initial;</span><br><span class="line"><span class="attribute">background-size</span>: inherit;</span><br></pre></td></tr></table></figure>

<h3 id="百分比的問題"><a href="#百分比的問題" class="headerlink" title="百分比的問題"></a>百分比的問題</h3><p>當設定 background-size: 100% 100% 時，表示背景圖要跟容器一樣大，但當容器尺寸改變時，例如高度不變，寬度卻變窄，圖片會因為尺寸和容器的寬高比不同而變形。</p>
<h3 id="cover-和-contain"><a href="#cover-和-contain" class="headerlink" title="cover 和 contain"></a>cover 和 contain</h3><ul>
<li>cover: 讓圖片在「不變形」、「寬高等比例」、「必要時裁切」的方式填滿整個空間。</li>
<li>cotain: 讓圖片在「不變形」、「寬高等比例」、「不裁切」的方式填滿整個空間。</li>
</ul>
<p><img src="/../images/css/bg-cover.png" alt="cover"><br><img src="/../images/css/bg-cotain.png" alt="contain"></p>
<h2 id="背景圖範圍"><a href="#背景圖範圍" class="headerlink" title="背景圖範圍"></a>背景圖範圍</h2><p>預設背景圖範圍是在邊框線以內(border)，background-origin 可以設定背景原點，也就是圖片依容器中的卡個座標為起點。可設定的值有:</p>
<ol>
<li>content-box:<br>指 css 屬性 width、height 定出的範圍內，若沒指定 width、height 則會在padding內。</li>
<li>padding-box<br>指 css 屬性 border 內(不含border範圍)</li>
<li>border-box<br>指 css 屬性 border 內(含border範圍)</li>
</ol>
<p><img src="/../images/css/bg-origin.png"></p>
<h2 id="背景圖固定方式"><a href="#背景圖固定方式" class="headerlink" title="背景圖固定方式"></a>背景圖固定方式</h2><p>background-attachment 用來設定背景圖是要依照「視窗可見範圍」的捲軸來滾動，或是依照容器區塊來滾動。</p>
<p>可以設定的值包括:</p>
<ol>
<li>scroll: 捲動</li>
<li>fixed: 固定</li>
<li>local: 區域</li>
</ol>
<h3 id="scroll-捲動背景"><a href="#scroll-捲動背景" class="headerlink" title="scroll 捲動背景"></a>scroll 捲動背景</h3><p>scroll 會依照視窗的卷軸來捲動，當視窗卷軸捲動時，背景圖會被捲走，也是瀏覽器預設使用的值。要注意的是，當捲動的不是瀏覽器視窗，而是內部容器視窗時，內部容器的背景圖不會被捲走。</p>
<p><img src="https://raw.githubusercontent.com/tinatyc/IThome-gif/master/Amos_gif/background-attachment02.gif"></p>
<h3 id="fixed-固定背景"><a href="#fixed-固定背景" class="headerlink" title="fixed 固定背景"></a>fixed 固定背景</h3><p>background-attachment: fixed，會將視窗可見範圍當作定位空間，設定後圖片位置會跑到視窗左上角。</p>
<p><img src="https://raw.githubusercontent.com/tinatyc/IThome-gif/master/Amos_gif/background-attachment03.gif"></p>
<h3 id="Local"><a href="#Local" class="headerlink" title="Local"></a>Local</h3><p>背景圖片會「跟著所在空間的捲軸」捲走，所以可以看到內部的淺黃色區塊捲動捲軸時，該區塊的背景圖就會跟著被捲走。</p>
<p><img src="https://raw.githubusercontent.com/tinatyc/IThome-gif/master/Amos_gif/background-attachment04.gif"></p>
<h3 id="簡易版視差滾動"><a href="#簡易版視差滾動" class="headerlink" title="簡易版視差滾動"></a>簡易版視差滾動</h3><p>利用 background-attachment: fixed，將背景圖固定，可以做到簡易版視差滾動效果。</p>
<p><a href="https://codepen.io/jskrtivy-the-animator/pen/bGyvRKo">範例</a></p>
<h2 id="background-縮寫"><a href="#background-縮寫" class="headerlink" title="background 縮寫"></a>background 縮寫</h2><p>background 也可以寫成縮寫語法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: gray <span class="built_in">url</span>(<span class="string">&quot;amos.png&quot;</span>) scroll no-repeat <span class="number">50%</span> <span class="number">50%</span> / <span class="number">50%</span> <span class="number">50%</span>;</span><br></pre></td></tr></table></figure>

<p>上面分別對應的值如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: color image attachment repeat poition / size</span><br></pre></td></tr></table></figure>

<p>最後面那段斜線用來區隔 position 和 size。</p>
<h3 id="background-寫法注意"><a href="#background-寫法注意" class="headerlink" title="background 寫法注意"></a>background 寫法注意</h3><p>當  background-position &#x2F; background-size 這一組值，在僅有 background-position 時 可以省略 &#x2F; ，但要寫background-size 時，要與 background-position 一起寫。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 有效寫法</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;amos.png&quot;</span>) no-repeat center</span><br><span class="line">background: <span class="built_in">url</span>(<span class="string">&quot;amos.png&quot;</span>) no-repeat center / <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;amos.png&quot;</span>) no-repeat center / cover;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 無效寫法</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;amos.png&quot;</span>) no-repeat / <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;amos.png&quot;</span>) no-repeat / cover;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;amos.png&quot;</span>) no-repeat center cover;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(4) Git 練功坊-遠端數據庫</title>
    <url>/2022/06/21/2022-6-21-6-git-remote/</url>
    <content><![CDATA[<h2 id="遠端數據庫"><a href="#遠端數據庫" class="headerlink" title="遠端數據庫"></a>遠端數據庫</h2><p>之前介紹過如何再本地端提交更新，今天要教大家將本地端的更新提交到遠端數據庫(Github)。</p>
<h2 id="註冊-Github"><a href="#註冊-Github" class="headerlink" title="註冊 Github"></a>註冊 Github</h2><p>我們要先去 <a href="https://github.com/">GitHub</a> 註冊會員。</p>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20190908/20119923T2oDPSuQK3.png" alt="github"></p>
<h2 id="新建一個-repository"><a href="#新建一個-repository" class="headerlink" title="新建一個 repository"></a>新建一個 repository</h2><p>註冊好帳號後，可以在 github 上新建一個 repository 數據庫</p>
<p><img src="https://miro.medium.com/max/1400/1*7xMLMI0zZ87X4s9Hi4EIHg.png" alt="repository"></p>
<p>這邊填寫數據庫名稱</p>
<p><img src="https://miro.medium.com/max/1400/1*PdIfUXuiD4hS1HDjNyhU7w.png" alt="repo-name"></p>
<h2 id="複製遠端數據庫到本地端"><a href="#複製遠端數據庫到本地端" class="headerlink" title="複製遠端數據庫到本地端"></a>複製遠端數據庫到本地端</h2><p>新開一個專案資料夾並移動進去</p>
<p>輸入:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone 遠端數據庫網址</span><br></pre></td></tr></table></figure>

<p>輸入完後，會將遠端新增的 repository 複製到本地資料夾內。</p>
<p><img src="https://miro.medium.com/max/1400/1*TRv6Lzld1DosUcNDlJWErQ.png" alt="git-clone"></p>
<h2 id="推送資料到遠端數據庫"><a href="#推送資料到遠端數據庫" class="headerlink" title="推送資料到遠端數據庫"></a>推送資料到遠端數據庫</h2><p>在本地端新增資料，並照上個章節的做法 commit 完以後，就可以將 commit 上傳到遠端資料夾內囉。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push  // 將資料推到遠端</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1400/1*7mwBekzTKtNV_DHCBs_txg.png" alt="上傳成功"></p>
<h2 id="從遠端下載資料"><a href="#從遠端下載資料" class="headerlink" title="從遠端下載資料"></a>從遠端下載資料</h2><p>若遠端資料庫的資料有更新，比如說其他同事有 push 新的資料上去，那我們有兩種方式將資料下載下來。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull  // 從遠端拉取資料下來，並直接合併</span><br></pre></td></tr></table></figure>

<p>執行 git pull 會將遠端更新的資料下載下來，並且會直接合併。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch  // 從遠端拉取資料下來，但不合併</span><br></pre></td></tr></table></figure>

<p>執行 git fetch 也會從遠端下載資料下來，但不會直接合併，而是以新的 commit 呈現。<br>等確認這些新的 commit 內容 ok，可以再自行用 git merge 合併進專案。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">語法</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure>

<h2 id="語法介紹"><a href="#語法介紹" class="headerlink" title="語法介紹"></a>語法介紹</h2><p>遠端儲存庫(Repository)操作</p>
<ul>
<li>註冊遠端儲存庫：git remote add &lt;遠端數據庫簡稱&gt; 遠端儲存庫網址</li>
<li>更新資料到遠端 master 分支：git push -u origin master</li>
<li>觀看遠端數據庫列表：git remote</li>
<li>觀看遠端數據庫列表(包含 rul)：git remote -v</li>
<li>下載遠端數據庫：git clone <url></li>
<li>-u 是指他預設會推到哪個遠端數據庫服務</li>
<li>origin 可以改它的遠端數據庫名稱，例如 git push -u github master</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>(3) Git 練功坊-紀錄修改與提交</title>
    <url>/2022/06/21/2022-6-21-5-git-commit/</url>
    <content><![CDATA[<p><img src="https://miro.medium.com/max/1400/0*adRfjDwIz9wuzSTb" alt="git流程"></p>
<h2 id="新增資料並加入索引"><a href="#新增資料並加入索引" class="headerlink" title="新增資料並加入索引"></a>新增資料並加入索引</h2><p>上一章節已經將專案的數據庫建立好了，那我們先在專案內新增一些資料，我先建立一個 「sample.txt」的文字檔案，並在裡面打一些內容。</p>
<p>此時我們可以將新增的資料加入索引，加入索引的檔案之後才能被 commit 提交，方法如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .    // 將所有更新的檔案加入索引。</span><br><span class="line">git add 檔案名稱  // 將特定檔案加入索引。</span><br></pre></td></tr></table></figure>

<h2 id="查詢檔案狀況"><a href="#查詢檔案狀況" class="headerlink" title="查詢檔案狀況"></a>查詢檔案狀況</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status  // 查詢目前檔案狀況</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1268/1*0-Hunc2dByNVE3AeTQPTyQ.png" alt="git status"></p>
<p>上圖中綠色是已加入索引，紅色是未加入。</p>
<p>若要取消加入索引，可用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset HEAD   // 取消已加入索引的全部檔案，此時檔案會呈現未追蹤狀態。</span><br><span class="line">git reset HEAD 檔案名稱   // 取消已加入索引的單個檔案，呈現未追蹤狀態。</span><br></pre></td></tr></table></figure>

<h2 id="提交檔案"><a href="#提交檔案" class="headerlink" title="提交檔案"></a>提交檔案</h2><p>若確認檔案都加入索引後，可以將索引內的檔案提交到數據庫</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;更新內容&quot;</span><br></pre></td></tr></table></figure>

<p>我們使用 git commit 將本次的更新提交到數據庫，-m 可以輸入更新的內容重點。<br>通常我們會在專案開發完某個功能後，做一次 commit。例如完成首頁輪播功能，或切完首頁版型等等，方便之後做版本切換。</p>
<p><img src="https://miro.medium.com/max/1400/1*rM-6FClWTQvcFPXmYmq8JQ.png" alt="commit"></p>
<h2 id="查詢紀錄"><a href="#查詢紀錄" class="headerlink" title="查詢紀錄"></a>查詢紀錄</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log  // 查詢過去commit 的紀錄</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1400/1*qNvdGY6XePWNMA3h4a--LQ.png" alt="git log"></p>
<p>若要退出，請鍵入小寫 q。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>(7) Git 練功坊-分支合併與刪除</title>
    <url>/2022/06/23/2022-6-23-3-git-merge/</url>
    <content><![CDATA[<h2 id="分支合併-merge"><a href="#分支合併-merge" class="headerlink" title="分支合併 merge"></a>分支合併 merge</h2><p><img src="https://miro.medium.com/max/1080/1*fnd052WeDjGw8beojbdr9Q.png" alt="branch"></p>
<p>如上圖，當我們在新的分支(feature)做開發，同事也確認分支的內容沒問題，就可以準備將分支合併到上線版本的master上。</p>
<p>首先用 git chcekout master，將HEAD 切回 master分支上，輸入 git merge 分支名稱，將分支合併到master上。</p>
<p><img src="https://miro.medium.com/max/820/1*feA1uszhAzBRENRGEAD2zQ.png" alt="branch"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge 分支名稱</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/616/1*AAb6Xi_rtOs_Tq4Gq6gAUw.png" alt="git merge"></p>
<p><img src="https://miro.medium.com/max/968/1*Ov7_N-2e1vFkRriAJDLzcw.png" alt="git"></p>
<p>此時就完成合併了。</p>
<h2 id="分支合併-rebase"><a href="#分支合併-rebase" class="headerlink" title="分支合併 rebase"></a>分支合併 rebase</h2><p>除了使用merge合併外，也可用 rebase 合併</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*_pZko1Os8-4Jf-n769khKQ.png" alt="rebase"></p>
<p>目前有 cat、dog 以及 master 這三個分支，並且切換至 cat 分支上。這時候如果下這個指令：git rebase dog<br>這個指令翻成白話文，大概就是「我，就是 cat 分支，我現在要重新定義我的參考基準，並且將使用 dog 分支當做我新的參考基準」的意思。<br>完成之後，cat 分支將會接到 dog 分支上，像這樣：</p>
<ol>
<li><p>「我先拿 c68537 這個 Commit 接到 053fb2 這個 Commit 上」，因為 c68537 原本的上一層 Commit 是 e12d8e，現在要接到 053fb2 上，所以需要重新計算這個 Commit 的 SHA-1 值，重新做出一顆新的 Commit 物件 35bc96。</p>
</li>
<li><p>「我再拿 b174a5 這個 Commit 接到剛剛那個新做出來的 Commit 物件 35bc96 上」，同理，因為 b174a5 這顆 Commit 要接到新的 Commit 的原因，所以它也會重新計算 SHA-1 值，得到一個新的 Commit 物件 28a76d。</p>
</li>
<li><p>最後，原本的 cat 是指向 b174a5 這個 Commit，現在要改指向最後做出來的那顆新的 Commit 物件 28a76d。<br>HEAD 還是繼續指向 cat 分支。</p>
</li>
</ol>
<h3 id="rebase-衝突"><a href="#rebase-衝突" class="headerlink" title="rebase 衝突"></a>rebase 衝突</h3><p><img src="https://cdn-images-1.medium.com/max/1320/1*ZV1WbkVCN04Wz63k8tqH6g.png" alt="rebase-conflict"></p>
<p>當rebase發生衝突時，要先手動解決衝突，如上圖選擇要保留的檔案。<br>處理完衝突後，輸入:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .  //加入索引</span><br><span class="line">git rebase --continue  // 完成rebase流程</span><br></pre></td></tr></table></figure>

<h2 id="刪除分支"><a href="#刪除分支" class="headerlink" title="刪除分支"></a>刪除分支</h2><p>既然feature分支的內容已經順利地合併到master分支了，現在我們可以將其刪除。</p>
<p>欲刪除分支，請執行branch -d 命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;分支名稱&gt;</span><br></pre></td></tr></table></figure>

<p>執行 <code>git branch -d feature</code> 就可以將 feature 分支刪除囉。</p>
<p>feature分支被刪除了，可以用”git branch”命令來確認分支是否已被刪除。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 let、const、var的區別</title>
    <url>/2022/06/21/2022-6-21-7-js-variables/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在es6以前，我們會用 var 來宣告一個變數。而在es6推出後，新增了 let 與 const的變數宣告方法，改善了使用 var 宣告變數的一些缺點，以下用講解 var 與 let const 宣告的差異。</p>
<h2 id="區塊與函式作用域"><a href="#區塊與函式作用域" class="headerlink" title="區塊與函式作用域"></a>區塊與函式作用域</h2><p>var是函式作用域的設計，在函式內宣告的變數，函式外讀取不到。<br>但在一些使用了區塊語句(用花括號的語句)的像if, else, for, while等等區塊語句中，在這裡面用var宣告的變數仍然是會曝露到全域之中可被存取，例如:</p>
<p><img src="https://miro.medium.com/max/1178/1*iO1BqGOT_318PIkF8jjxJQ.png" alt="函式作用域"></p>
<p>let或const來宣告是區塊作用域，就是以區塊語句 { } 為分界的作用域:</p>
<p>不管是在函式內宣告的變數，或是 在 if, else, for, while等等區塊語句{ }中宣告的變數，都不會在全域中被讀取到。</p>
<p><img src="https://miro.medium.com/max/964/1*1IltRn_k3xANnY6fWcZW1A.png" alt="區塊作用域"></p>
<h2 id="重複宣告的問題"><a href="#重複宣告的問題" class="headerlink" title="重複宣告的問題"></a>重複宣告的問題</h2><p>以往用 var 宣告變數，是可以進行重複宣告的: </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>這樣可能會不小心複寫了變數的值，導致專案出錯。</p>
<p>用 const let 告的變數，在同一個作用域下，則無法重新再被宣告。</p>
<p><img src="https://miro.medium.com/max/440/1*06HErRPc-Jcyhazl3fuj7w.png" alt="const let"></p>
<p><img src="https://miro.medium.com/max/1286/1*zsSWcfXZBnj3Ap1D5JE7Pg.png" alt="error"></p>
<h2 id="常數"><a href="#常數" class="headerlink" title="常數"></a>常數</h2><p>const 針對是常數的定義，常數在一宣告時就必定要指定給值，不然會產生錯誤。而對於常數在ES6的定義是: 不可再指定。</p>
<p><img src="https://miro.medium.com/max/1278/1*lpOInYC-ccAVD_dBcv5csg.png" alt="const"></p>
<p>上面因為再次賦予 a &#x3D; 20 而出現錯誤。</p>
<p>如果你宣告的常數是一個物件或陣列類型，像這種參照類型的值，裡面的值是可以作改變的，如下:</p>
<p><img src="https://miro.medium.com/max/336/1*IP1XW0OtYFB_Am976yXjNA.png" alt="array"></p>
<p>所以對於物件、陣列、函式來說，使用 const 常數來宣告就可以，除非你有需要再指定這個陣列或物件的參照。</p>
<h2 id="Hoisting-向上提升特性"><a href="#Hoisting-向上提升特性" class="headerlink" title="Hoisting 向上提升特性"></a>Hoisting 向上提升特性</h2><p>var 跟 function 都有向上提升特性，在宣告後會自動提升到 js 最上面 ，縱使還沒賦予值，還是先建立好記憶體位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a =<span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>如上面程式，我們在第 2 行宣告了 a 變數等於3，但在第一行就讀取a變數，此時並不會報錯，因為 a 已經有記憶體位置了，只是還沒給予值，所以會是 undefined。 在第3行讀取a變數就可以正確讀到 3 的值。</p>
<p>用 let 和 const 宣告的變數一樣會有 hosting，在創造階段被存入記憶體，在執行階段被賦值。但若執行階段前就要去讀取變數的話，會出現暫時性死區的錯誤。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創造</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Ming</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>) <span class="comment">// cannot access Ming before initialization</span></span><br><span class="line"><span class="comment">// 執行</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(5) Git 練功坊-合併與衝突</title>
    <url>/2022/06/23/2022-6-23-1-git-conflict/</url>
    <content><![CDATA[<h2 id="合併與衝突"><a href="#合併與衝突" class="headerlink" title="合併與衝突"></a>合併與衝突</h2><p>上章節講過我們可以用 git pull 或 git fetch 來下載遠端更新的內容。<br>如果遠端數據庫和本地端數據庫的同一個地方都發生了修改的情況下（例：檔案中同一行的地方）。<br>這時，因為 Git 不能自動判斷要導入那一個修改內容於是就會發生錯誤。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是 Cat<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  =======</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是 Dog<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &gt;&gt;&gt;&gt;&gt;&gt;&gt; dog</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此時發生衝突的地方必須手動修改，如上例，VScode 會提醒你產生衝突的地方，此時再決定要留 cat 還是 dog。假設你要留下 cat ，則改為</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是 Cat<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>當儲存後，你就可以輸入 git add . 將它重新加入索引後，你可以使用 git status 觀察狀態。</p>
<p><img src="/../images/git/git-1.png"></p>
<p>此時的回饋就會說，您目前沒有任何衝突了，可以使用 git commit 來提交。於是我們就輸入該指令後。就會彈跳編輯器顯示預設訊息。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Merge branch <span class="string">&#x27;dev&#x27;</span></span><br><span class="line"></span><br><span class="line"># Conflicts:</span><br><span class="line">#    <span class="keyword">all</span>.css</span><br><span class="line">#</span><br><span class="line"># It looks like you may <span class="keyword">be</span> committing <span class="keyword">a</span> merge.</span><br><span class="line"># If this <span class="keyword">is</span> not correct, please <span class="built_in">remove</span> the <span class="keyword">file</span></span><br><span class="line">#    .git/MERGE_HEAD</span><br><span class="line"># <span class="built_in">and</span> <span class="keyword">try</span> again.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Please enter the commit message <span class="keyword">for</span> your <span class="keyword">changes</span>. Lines starting</span><br><span class="line"># with <span class="string">&#x27;#&#x27;</span> will <span class="keyword">be</span> ignored, <span class="built_in">and</span> <span class="keyword">an</span> <span class="built_in">empty</span> message aborts the commit.</span><br><span class="line">#</span><br><span class="line"># On branch master</span><br><span class="line"># All conflicts fixed but you are still merging.</span><br><span class="line">#</span><br><span class="line"># Changes <span class="keyword">to</span> <span class="keyword">be</span> committed:</span><br><span class="line">#    modified:   <span class="built_in">index</span>.html</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

<p>Git 預設訊息裡，你也可以自己編輯相關內容，若是覺得沒問題就儲存關閉，本次合併就完成了！</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>(6) Git 練功坊-建立分支</title>
    <url>/2022/06/23/2022-6-23-2-git-branch/</url>
    <content><![CDATA[<h2 id="什麼是分支？"><a href="#什麼是分支？" class="headerlink" title="什麼是分支？"></a>什麼是分支？</h2><p>分支是為了將修改記錄的整體流程分開儲存，讓分開的分支不受其他分支的影響，所以在同一個數據庫裡可以同時進行多個不同的修改。</p>
<p>當我們輸入完 git init 後，並完成第一次提交後(commit)會自動產生一個 main 分支，在建立其他分支前，所有紀錄都存在main分支上。</p>
<h2 id="建立分支"><a href="#建立分支" class="headerlink" title="建立分支"></a>建立分支</h2><p>要建立一個新的分支，可以用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch 分支名稱</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1206/1*MM7zD5dXszOgNHn_UcqtOg.png" alt="branch"></p>
<p>要查詢目前有的分支可以輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1134/1*8p-_J_x4kqDFcnO15JBRLQ.png" alt="brach"></p>
<p>此時用git branch 去查詢，可以發現多了 feature1 分支，但目前所在分支還是master。</p>
<h2 id="切換分支"><a href="#切換分支" class="headerlink" title="切換分支"></a>切換分支</h2><p>假設目前有 master 分支和 feature1分支，我現在在master分支上，想切換到 feature1分支，可用:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout 分支名稱</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1218/1*Gzf7OBa_JANOziPgnxYaVQ.png" alt="checkout"></p>
<h2 id="HEAD標籤"><a href="#HEAD標籤" class="headerlink" title="HEAD標籤"></a>HEAD標籤</h2><p>HEAD是目前所在位置的指標，會跟隨在最新的commit上面，如下圖:</p>
<p><img src="https://miro.medium.com/max/680/1*vBHV9Vo4Ws2O4a_AfGPdig.png" alt="head"></p>
<p>在git裡的每個commit都有自己的代碼，我們可以用 git log 查詢所有 commit 紀錄。</p>
<p><img src="https://miro.medium.com/max/1272/1*fcmwOhm5NG9_XpjeoFhPxw.png" alt="commit"></p>
<p>如果想看前一版本commit紀錄裡做了哪些事，可以透過指令將HEAD移動到該commit版本上，看完後再移動回最新的commit上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout commit前四碼</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/676/1*ItxAAKHhndN-_oToicuXnw.png" alt="checkout"></p>
<p>分支的切換其實也就是將HEAD移動到不同分支標籤上而已。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>(8) Git 練功坊-推送分支到遠端</title>
    <url>/2022/06/23/2022-6-23-4-git-branch-remote/</url>
    <content><![CDATA[<h2 id="推送分支上-github"><a href="#推送分支上-github" class="headerlink" title="推送分支上 github"></a>推送分支上 github</h2><p>本節會講解如何推送branch到github上。</p>
<p>首先我們先開一個新的分支，並用git checkout 分支，移動到該分支上。</p>
<p><img src="https://miro.medium.com/max/1400/1*gN684t4CgXrmbfitc8Ro2A.png" alt="add branch"></p>
<p>再來新增一個commit 記錄到該分支</p>
<p><img src="https://miro.medium.com/max/1400/1*9GKiKFBMWI50hjFgxLm7QA.png" alt="commit"></p>
<p>這時如果用git push指令想將本地端的commit推到github上，可能會出現下面錯誤。</p>
<p><img src="https://miro.medium.com/max/1400/1*050HdBhOzj3125XCFpOFzg.png" alt="error"></p>
<p>原因是因為我們可能有許多遠端數據庫，有的是測試用的、有的是正式主機用的，git不知道你的分支要推到哪個數據庫。</p>
<p>所以可用 git remote 指令來查詢本地端有多少遠端數據庫。</p>
<p><img src="https://miro.medium.com/max/1208/1*ZV4Dyk2Rq2l36mbNiGNxWA.png" alt="remote"></p>
<p>可以發現有一個 github 預設的 origin 數據庫。</p>
<p>要將分支推上github 的話 ，可使用指令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push 遠端數據庫名稱 分支名稱</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1268/1*avTlKgGgw8qFA08F88x_Pg.png" alt="push"></p>
<h2 id="更改遠端數據庫名稱"><a href="#更改遠端數據庫名稱" class="headerlink" title="更改遠端數據庫名稱"></a>更改遠端數據庫名稱</h2><p>如果不想用github預設的origin數據庫名稱，可輸入: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote rename 更改前名稱 更改後名稱</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/930/1*wNOekbkp-5Gsu3iiFVHGvQ.png" alt="rename"></p>
<p>在用 git remote來查詢， 會發現數據庫名稱從 origin 改成 github了。</p>
<p><img src="https://miro.medium.com/max/1400/1*6DAh5wMtkOZ-ga1uvU__fw.png" alt="git-rename"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>(4) CSS基礎篇 Flex</title>
    <url>/2022/06/29/2022-6-29-1-css-flex/</url>
    <content><![CDATA[<h2 id="什麼是-flex"><a href="#什麼是-flex" class="headerlink" title="什麼是 flex"></a>什麼是 flex</h2><p>flex 和grid一樣是排版用的 css屬性，使用flex時可分為外容器屬性與內元件屬性。以下分別介紹各屬性使用方法。</p>
<h2 id="外容器屬性"><a href="#外容器屬性" class="headerlink" title="外容器屬性"></a>外容器屬性</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>啟用flex的第一步，就是在外容器設定 display: flex;</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在父層設定 display:flex 可以讓子層區塊並排<br><img src="https://miro.medium.com/max/972/1*cPIZHT7a0P0v5mljoBjdvg.png" alt="flex"></p>
<p>當子層寬度超過父層時，flex也會依照比例自動做調整，不會跑版，並且當子層其中一個元素高度變高，其他元素也會自動等高。</p>
<p><img src="https://miro.medium.com/max/1246/1*yO5cUEPDPz7of4-KZyoTCw.png" alt="自動等高"></p>
<p>其餘特性包刮:</p>
<ul>
<li>元素自身轉變為類似「block」屬性的排版特性。</li>
<li>元素自身寬度變成父層容器的 content-box 寬度。</li>
<li>元素第一層子物件，變成 block 排版特性，並帶有等高、與彈性收縮特性。</li>
<li>元素第一層子物件，預設不換列「nowrap」</li>
<li>元素第一層子物件，以內容為預設寬度</li>
<li>元素第一層子物件總寬度超過父層flex物件寬度時，會自動收縮，符合父層寬度。</li>
<li>元素第一層子物件預設高度符合 flex 元素高度。</li>
</ul>
<h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p>flex的主軸指的是資料的流向 ，預設是從左到右排版，可以設定的值如下:</p>
<ul>
<li><p>flex-direction: row; 從左到右</p>
</li>
<li><p>flex-direction: row-reverse; 從右到左</p>
</li>
<li><p>flex-direction: column; 從上到下</p>
</li>
<li><p>flex-direction: column-reverse; 從下到上</p>
</li>
</ul>
<p><img src="https://miro.medium.com/max/1400/1*jgot2tuYYebDZFe6ZTssyQ.png" alt="主軸"></p>
<h3 id="justfy-content"><a href="#justfy-content" class="headerlink" title="justfy-content"></a>justfy-content</h3><p>依照主軸的方向(flex-direction)，可以設定 justfy-content 來對齊子元素。所以實際對齊方向是水平或垂直，要依主軸的方向而定喔。</p>
<p><img src="https://miro.medium.com/max/1400/1*UDLawhonhqaaTSbx5lwa9Q.png" alt="justify-content"></p>
<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>超出範圍時是否換行的屬性，分為換行、不換行、換行時反轉。</p>
<p>預設是 flex-wrap:nowrap 不換行，設定flex-wrap:wrap則會換行。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p><img src="https://miro.medium.com/max/1400/1*gUKuGGbB3B0AfezDlzulZw.png" alt="交錯軸"></p>
<p>和主軸垂直的方向稱為交錯軸，例如主軸是水平的，那交錯軸就是垂直。align-items屬性可以設定交錯軸的對齊方式。</p>
<p><img src="https://miro.medium.com/max/1400/1*jxzyFebBjrX8jyZ6VFF9bQ.png" alt="align-items"></p>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>多行物件的交錯軸對齊，可以使用的屬性和align-items一樣。</p>
<p><img src="https://miro.medium.com/max/1348/1*bvaLIRwiLKGak1nOLhCwXg.png" alt="align-content"></p>
<h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>flex-flow 是 flex-direction 與 flex-wrap 的縮寫，所以只要在這前後帶上相對應的值即可。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;<span class="string">&#x27;flex-direction&#x27;</span>&gt; || &lt;<span class="string">&#x27;flex-wrap&#x27;</span>&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="gap"><a href="#gap" class="headerlink" title="gap"></a>gap</h3><p>gap 用來設定子物件間的水平與垂直距離。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 一個值</span><br><span class="line"><span class="attribute">gap</span>: value;</span><br><span class="line"></span><br><span class="line">// 兩個值</span><br><span class="line"><span class="attribute">gap</span>: <span class="built_in">row-gap</span>(列與列) <span class="built_in">column-gap</span>(欄與欄);</span><br></pre></td></tr></table></figure>

<h3 id="place-content"><a href="#place-content" class="headerlink" title="place-content"></a>place-content</h3><p>可以使用 place-content，一次設定 「justify-content」、「align-content」的值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">place-<span class="attribute">content</span>: flex-start (align-content) space-around (justify-content);</span><br></pre></td></tr></table></figure>

<h2 id="內元件屬性"><a href="#內元件屬性" class="headerlink" title="內元件屬性"></a>內元件屬性</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>用來指定子層物件的順序，order 預設都是 0。小於 0 的元件會往前排，大於 0 往後排。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">order</span> : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/818/1*s71cQM9RnsxFauhOIt6q6w.png" alt="order"></p>
<h3 id="flex-grow-伸展"><a href="#flex-grow-伸展" class="headerlink" title="flex-grow 伸展"></a>flex-grow 伸展</h3><p>flex-grow 設定元件的伸展性，會把剩下的空間份配給子物件，並針對子物件去設定伸展的比例，預設值為 0不會縮放。<br>如下圖: 設定flex-grow: 2 的元素會有較大的位置。<br><img src="https://miro.medium.com/max/548/1*3qDfiEcjgxQvyup9ygcAww.png" alt="flex-grow"></p>
<p><a href="https://codepen.io/jskrtivy-the-animator/pen/PovaJGB">範例參考</a></p>
<h3 id="flex-shrink-收縮"><a href="#flex-shrink-收縮" class="headerlink" title="flex-shrink 收縮"></a>flex-shrink 收縮</h3><p>flex-shrink: 元件的收縮性，是一個數值，當空間分配還不足時的當前元件的收縮性，預設值為 1 會收縮，如果設置為 0 則不會縮放。</p>
<p><img src="https://miro.medium.com/max/1400/1*1kyY6pGhIUCz79CHJ74deQ.png" alt="flex-shrink"></p>
<p>上圖當子層物件寬度超過父層時，如果將子層設定 flex-shrink: 0 ，代表不收縮，此時子層會超出父層寬度。</p>
<p><img src="https://miro.medium.com/max/1400/1*nANSTLkevML4QdU2VKIHmQ.png" alt="flex-shrink"></p>
<p>當設定其中一個子層 flex-shrink: 0 ，其他為1時，設定0的物件不收縮，保持原來寬度，設定shrink的則依比例收縮。</p>
<h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>flex-basis 可以設定子元件 flex-item 的主軸長度。</p>
<ul>
<li><p>當主軸為橫向時，對應到元件的寬，</p>
</li>
<li><p>當主軸是直向時，對應到元件的高。</p>
</li>
</ul>
<p>可以設定每個flex-item 的 flex-basis 為 0， 就可以依照想要的比例來設定flex-grow。</p>
<p><img src="https://miro.medium.com/max/1400/1*GN7XSfKQGUABUGAY-nIjSg.png" alt="flex-basis"></p>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>align-self 可以調整單一物件的交錯軸對齊，可以使用的屬性和align-items一樣。</p>
<p><img src="https://css-tricks.com/wp-content/uploads/2018/10/align-self.svg" alt="align-self"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>Js 中繪製動畫 requestAnimationFrame</title>
    <url>/2022/06/27/2022-6-24-1-js-requestAnimation/</url>
    <content><![CDATA[<h2 id="製作動畫"><a href="#製作動畫" class="headerlink" title="製作動畫"></a>製作動畫</h2><p>在以前用Js中做動畫，可能會用 setInterval()或setTimeOut()，而現在有了更好用的API <code>requestAnimationFrame</code>。</p>
<h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h2><p>requestAnimationFrame是依照瀏覽器更新的頻率(通常是 1 &#x2F;60 秒)來更新畫面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> boxLeft = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">currentTime</span>) &#123;</span><br><span class="line">  boxLeft += <span class="number">0.1</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(currentTime);</span><br><span class="line">  box.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--left&#x27;</span>, boxLeft);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(main);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(main);</span><br></pre></td></tr></table></figure>

<p>requestAnimationFrame在約1&#x2F;60秒後呼叫傳給它的callback函式(main)，<br>並且將timestamp當做參數傳給這個callback函式。</p>
<p>為了讓 requestAnimationFrame 能持續執行，我們在callback函式再執行一次 requestAnimationFrame。</p>
<p>如果把 timestamp console.log 出來，會發現timesatmp是以每6豪秒持續累加。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022062701.png?alt=media&token=c961a215-9334-4ef0-a5e9-dd9408fb16a3" alt="timestamp"></p>
<p><a href="https://codepen.io/tim-chou/pen/eYMOVGR">範例</a></p>
<h2 id="控制更新頻率"><a href="#控制更新頻率" class="headerlink" title="控制更新頻率"></a>控制更新頻率</h2><p>每6毫秒更新一次函式可能太快了，假設我們希望每秒更新一次畫面就好，可如下設定</p>
<h3 id="紀錄上次更新時間"><a href="#紀錄上次更新時間" class="headerlink" title="紀錄上次更新時間"></a>紀錄上次更新時間</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lastRenderTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">currentTime</span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(main);</span><br><span class="line">  <span class="keyword">const</span> secondSinceLastRender = (currentTime - lastRenderTime) / <span class="number">1000</span>; <span class="comment">// 將milisecond 轉成 second</span></span><br><span class="line">  lastRenderTime = currentTime;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(currentTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以先設一個變數用來記錄上次更新畫面的時間(lastRenderTime)，然後在函式中用currentTime減掉lastRenderTime，就可以得到從上次更新到這次過了多久時間(毫秒)，可以將時間除 1000 轉換成過了幾秒。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022062702.png?alt=media&token=6ebc37f7-3bc4-4e9b-a951-4533190544ef" alt="second"></p>
<p>可以發現每次更新的間隔時間約是 6 毫秒。</p>
<h3 id="設定更新門檻"><a href="#設定更新門檻" class="headerlink" title="設定更新門檻"></a>設定更新門檻</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">SPEED</span> = <span class="number">2</span>; <span class="comment">// 每秒更新次數</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">currentTime</span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(main);</span><br><span class="line">  <span class="keyword">const</span> secondSinceLastRender = (currentTime - lastRenderTime) / <span class="number">1000</span>; <span class="comment">// 將milisecond 轉成 second</span></span><br><span class="line">  <span class="keyword">if</span> (secondSinceLastRender &lt; <span class="number">1</span> / <span class="variable constant_">SPEED</span>) <span class="keyword">return</span>;</span><br><span class="line">  lastRenderTime = currentTime;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(main);</span><br></pre></td></tr></table></figure>
<p>先設定SPEED變數代表每秒更新次數，在main函式裡增加判斷</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (secondSinceLastRender &lt; <span class="number">1</span> / <span class="variable constant_">SPEED</span>) <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure>
<p>用 1 除以 SPEED 可以得到每零點幾秒才能更新，上例是0.5秒更新1次，也就是每秒更新2次。<br>當 secondSinceLastRender 小於更新頻律，就將函式 return 不執行。</p>
<p>以上就完成控制更新頻律的方法了。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>(1) Hexo 部落格安裝</title>
    <url>/2022/06/07/2022-6-7-Hexo-%E9%83%A8%E8%90%BD%E6%A0%BC%E5%AE%89%E8%A3%9D%E8%88%87%E9%83%A8%E5%B1%AC/</url>
    <content><![CDATA[<h2 id="什麼是-Hexo？"><a href="#什麼是-Hexo？" class="headerlink" title="什麼是 Hexo？"></a>什麼是 Hexo？</h2><p>Hexo 是一個快速、簡單且強大的網誌框架。Hexo 使用 Markdown（或其他標記語言）解析您的文章，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。</p>
<h2 id="安裝需求"><a href="#安裝需求" class="headerlink" title="安裝需求"></a>安裝需求</h2><ul>
<li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低於8.10，建議使用 Node.js 10.0 及以上版本)</li>
<li><a href="http://git-scm.com/">Git</a></li>
</ul>
<p>若您的電腦已經安裝上述的必備軟體，那麼恭喜您！只需要透過 npm 即可完成 Hexo 的安裝。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>一旦 Hexo 完成後，請執行下列指令，Hexo 會在指定資料夾中建立所有您需要的檔案。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>建立完成後，專案資料夾會有下列檔案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<h2 id="資料夾配置說明"><a href="#資料夾配置說明" class="headerlink" title="資料夾配置說明"></a>資料夾配置說明</h2><p>以下說明不同資料夾功能</p>
<h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p>scaffolds 資料夾裡放的是md範例檔案，當我們要寫新聞章時，可以將範例檔另存到source資料夾裡，來開始撰寫。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022060702.png?alt=media&token=3ee586a3-0af2-4191-8cac-1d299028f03b" alt="scaffolds圖片範例"></p>
<h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>source 資料夾是放置文章的地方。所有的檔案或是資料夾通常都會在這邊，開頭會加上 _(底線) 來命名，讓這些資料夾或是檔案也成為隱藏檔案而被忽略，除了 _posts 資料夾以外。Markdown 和 HTML 檔案會被發布並存放到 public 資料夾，而其他檔案沒有以底線命名的就會被拷貝過去。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022060701.png?alt=media&token=a71a827f-ea1c-4ad8-b570-0ce5372488b6" alt="source資料夾"></p>
<h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p>themes 資料夾放的是hexo的主題樣式，後續更換主題也是將檔案載到這個地方。</p>
<h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>_config.yml 是網站的配置檔案（如下圖），網站的各種配置設定都在這邊，例如：網頁標題、網站描述、網站的網址、路徑等等，詳細內容可以參考： <a href="https://hexo.io/zh-tw/docs/configuration">https://hexo.io/zh-tw/docs/configuration</a></p>
<p>大家可以自行修改看看，如下圖</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022060801.png?alt=media&token=a28a52df-edb2-4848-a690-9fe3f5807343" alt="config修改"></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>(9) Git 練功坊-取消修改</title>
    <url>/2022/06/30/2022-6-30-1-git-reset/</url>
    <content><![CDATA[<h2 id="取消修改"><a href="#取消修改" class="headerlink" title="取消修改"></a>取消修改</h2><p>在 git 裡主要用兩種方法來取消修改，一種是 git reset，另外一種是 git revert。</p>
<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p>git reset 利用把分支的參考點退回到上一個 commit 來取消修改。你可以認為這是在”重寫歷史”。git reset 往回移動 branch，原來的 branch 所指向的 commit 好像從來沒有存在過一樣。</p>
<p><img src="https://miro.medium.com/max/504/1*YExCjHyozE-SQLif6Egfhg.png" alt="reset"><br><img src="https://miro.medium.com/max/674/1*zFOz7tr23cEQG2OTkffCjg.png" alt="reset"></p>
<p>git reset 可以分為 –hard、 –soft 、 –mixed 三種模式</p>
<h3 id="reset-–mixed"><a href="#reset-–mixed" class="headerlink" title="reset –mixed"></a>reset –mixed</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --mixed HEAD~1   # 數字表示移動到 HEAD後面第幾個</span><br><span class="line">git reset HAED^ 回復到上一個commit</span><br><span class="line">git reset HAED^^ 回復到上上一個commit</span><br></pre></td></tr></table></figure>

<p>–mixed 是預設的參數，如果沒有特別加參數，git reset 指令將會使用 –mixed 模式。這個模式會把暫存區的檔案丟掉，但不會動到工作目錄的檔案，也就是說 Commit 拆出來的檔案會留在工作目錄，但不會留在暫存區。</p>
<h3 id="reset-–soft"><a href="#reset-–soft" class="headerlink" title="reset –soft"></a>reset –soft</h3><p>這個模式下的 reset，工作目錄跟暫存區的檔案都不會被丟掉，所以看起來就只有 HEAD 的移動而已。也因此，Commit 拆出來的檔案會直接放在暫存區。</p>
<h3 id="reset-–hard"><a href="#reset-–hard" class="headerlink" title="reset –hard"></a>reset –hard</h3><p>hard 模式下，不管是工作目錄以及暫存區的檔案都會丟掉。</p>
<h3 id="取消-reset"><a href="#取消-reset" class="headerlink" title="取消 reset"></a>取消 reset</h3><p>如果你 reset 完後悔，輸入 git reset + 還原點的 hash 值，是可以回復的。因為 reset 的概念就是帶著目前分支前往特定 commit。還原點的 hash 值可以用 git reflog 查詢。</p>
<p><img src="https://miro.medium.com/max/290/1*iP8bv0VETpcpfPbl5xEnFA.png" alt="hash"></p>
<h3 id="操作注意"><a href="#操作注意" class="headerlink" title="操作注意"></a>操作注意</h3><p>如果你是跟其他開發者遠端協作，盡量不要將已經推到遠端數據庫的版本，進行 git reset 後再推上去。</p>
<p>試想如果你的同事推了個版本到遠端數據庫，但你抓下來後用 reset 還原掉他的資料，又 push 更新上去，這樣他的資料就都不見了。</p>
<p>所以使用 git reset 的時機在於，你將遠端數據庫 clone 下來後，在本地自己新增的 commit 可以還原。而遠端數據庫既有的 commit ，就不要再試圖還原。</p>
<h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p>為了將你想取消的紀錄分享給你的同事，可以用 git revert，概念是再做一個新的 Commit，來取消你不要的 Commit，新的 commit 點上會有 ‘ 代表是 revert 的點。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert + 要刪除的commit點</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/574/1*c_R6Jsz3I7bhynusCX2Hyg.png" alt="新增C2&#39; 來取消C2"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>(3) CSS基礎篇 Grid</title>
    <url>/2022/06/28/2022-6-28-1-css-grid/</url>
    <content><![CDATA[<h2 id="Grid-排版"><a href="#Grid-排版" class="headerlink" title="Grid 排版"></a>Grid 排版</h2><p>Grid和flex一樣是用來排版的屬性，flex以單軸為主來排版，Grid則能夠同時設定兩個方向(欄和列)，能夠快速建立網頁布局。</p>
<p>Grid的屬性可以分成外部屬性和內部屬性，以下分別介紹。</p>
<h2 id="外部容器-父層"><a href="#外部容器-父層" class="headerlink" title="外部容器(父層)"></a>外部容器(父層)</h2><p>以下介紹可以在父層設定的屬性</p>
<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>在父層容器設定 display: grid，讓父層是 gird 容器。</p>
<ul>
<li>grid – 設定 block-level的 grid</li>
<li>inline-grid – 設定 inline-level的 grid</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid | inline-grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="grid-template-columns-grid-template-rows"><a href="#grid-template-columns-grid-template-rows" class="headerlink" title="grid-template-columns grid-template-rows"></a>grid-template-columns grid-template-rows</h3><p>設定好 display:grid後，可以用grid template 來定義版型的結構，分別設定column(欄)，和列(row)來排列格線，grid-template-columns 定義水平方向的空間，grid-template-rows 定義垂直方向的空間</p>
<p><img src="https://css-tricks.com/wp-content/uploads/2018/11/template-column-rows-02.svg" alt="grid"><br><a href="https://css-tricks.com/wp-content/uploads/2018/11/template-column-rows-02.svg">圖片來源</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: ...  ...;</span><br><span class="line">  <span class="comment">/* e.g. </span></span><br><span class="line"><span class="comment">      1fr 1fr</span></span><br><span class="line"><span class="comment">      minmax(10px, 1fr) 3fr</span></span><br><span class="line"><span class="comment">      repeat(5, 1fr)</span></span><br><span class="line"><span class="comment">      50px auto 100px 1fr</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: ... ...;</span><br><span class="line">  <span class="comment">/* e.g. </span></span><br><span class="line"><span class="comment">      min-content 1fr min-content</span></span><br><span class="line"><span class="comment">      100px 1fr max-content</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>設定單位可以使用彈性的長度、百分比<br>或用fr (等分)，如下例會將父層寬度扣掉50px後，分成三等份到三欄裡。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">50px</span> <span class="number">1</span>fr <span class="number">1</span>fr; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果有重複一樣寬度的欄位，則可以用repeat設定。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repeat(欄位數量, 寬度)</span><br></pre></td></tr></table></figure>

<h3 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h3><p>grid-template-areas可以透過將每個欄位命名，將內容作分配。</p>
<p>在父層設定 grid-template-areas，可設定的值有:</p>
<ul>
<li>[欄位名稱] : 設定該欄位名稱。</li>
<li>.   設定 . 代表是空的欄位。</li>
<li>none: 代表欄位未定義。</li>
</ul>
<p>在子層則設定 grid-area 決定內容要放到哪個欄位。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: header;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-b</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-c</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-d</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: auto;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: </span><br><span class="line">    <span class="string">&quot;header header header header&quot;</span></span><br><span class="line">    <span class="string">&quot;main main . sidebar&quot;</span></span><br><span class="line">    <span class="string">&quot;footer footer footer footer&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://css-tricks.com/wp-content/uploads/2018/11/dddgrid-template-areas.svg" alt="grid-area"><br><a href="https://css-tricks.com/wp-content/uploads/2018/11/dddgrid-template-areas.svg">圖片來源</a></p>
<h3 id="grid-gap-grid-column-gap-grid-row-gap"><a href="#grid-gap-grid-column-gap-grid-row-gap" class="headerlink" title="grid-gap, grid-column-gap, grid-row-gap"></a>grid-gap, grid-column-gap, grid-row-gap</h3><p>設定水平與垂直的欄位間隔</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">column-gap</span>: &#123; <span class="attribute">column-gap</span> &#125;;  //設定每欄的間隔</span><br><span class="line"><span class="attribute">row-gap</span>: &#123; <span class="attribute">row-gap</span> &#125;; //設定每列的間隔</span><br><span class="line"><span class="attribute">gap</span>: &#123; <span class="attribute">row-gap</span> &#125; &#123; <span class="attribute">column-gap</span> &#125;;  // 同時設定欄和列的間隔</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">80px</span> auto <span class="number">80px</span>; </span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">row-gap</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="justify-items"><a href="#justify-items" class="headerlink" title="justify-items"></a>justify-items</h3><p>justify-items 可以設定子元素水平對齊格子的方式，可設定的值有:</p>
<ul>
<li>start: 對齊開頭</li>
<li>end: 對齊末端</li>
<li>center: 對齊中間</li>
<li>stretch: 填滿格子(預設值)</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  justify-items: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-items-start.svg" alt="justify-items: start"></p>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>align-items 可以設定子元素垂直對齊格子的方式，可設定的值有:</p>
<ul>
<li>start: 對齊頂端</li>
<li>end: 對齊底部</li>
<li>center: 對齊中間</li>
<li>stretch: 填滿格子(預設值)</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-items-center.svg" alt="align-items: center"></p>
<h3 id="place-items"><a href="#place-items" class="headerlink" title="place-items"></a>place-items</h3><p>place-items 能同時設定 justify-items跟align-items</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">place-items: &lt;align-items&gt; / &lt;justify-items&gt;</span><br></pre></td></tr></table></figure>
<p>第一個值設定 align-items，第二個值設定 justify-items。如果只設一個值，則會同時套用到 justify-items跟align-items。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  place-items: center;  // 快速將內容置中於格子內</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="justify-content、align-content"><a href="#justify-content、align-content" class="headerlink" title="justify-content、align-content"></a>justify-content、align-content</h3><p>有時候你的格子尺寸可能會小於父層grid容器，此時可以用 justify-content 同時調整所有子元素的水平對齊，align-content 同時調整所有子元素的垂直對齊</p>
<p>可設定的值:</p>
<ul>
<li>start: 對齊開頭</li>
<li>end: 對齊末端</li>
<li>center: 對齊中間</li>
<li>stretch: 填滿格子(預設值)</li>
<li>space-around: 平均分配寬度和間距</li>
<li>space-between: 平均分配寬度，第一項和最後一項貼齊邊緣</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: end;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-content-end.svg" alt="justify-content: end"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: space-around;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-content-space-around.svg" alt="align-content: space-around"></p>
<h3 id="grid-auto-columns-、-grid-auto-rows"><a href="#grid-auto-columns-、-grid-auto-rows" class="headerlink" title="grid-auto-columns 、 grid-auto-rows"></a>grid-auto-columns 、 grid-auto-rows</h3><p>當我們的grid-items數量超過我們設定的格線，或是將元素指定到格線以外時，會自動產生格線。<br>如下我們設定一個 2 x 2的格線。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">60px</span> <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">90px</span> <span class="number">90px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但子元素設定的區域超過格線內，會自動產生格線。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-b</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">5</span> / <span class="number">6</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://css-tricks.com/wp-content/uploads/2018/11/grid-auto-columns-rows-02.svg" alt="gird"></p>
<p>此時可以設定 grid-auto-columns | grid-auto-rows 來指定自動產生的格線寬度。等於是設定格線寬度或高度的預設值，當格線沒有被 grid-template-columns 設定寬度時，就套用 grid-auto-columns的值。 </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-auto-columns</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h3><p>當有grid-item沒有被指定位置時，gird會自動排列這些grid-item，排列方式如下:</p>
<ul>
<li>row: 水平排列 (預設值)</li>
<li>column: 垂直排列</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-e</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">5</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://css-tricks.com/wp-content/uploads/2018/11/grid-auto-flow-01.svg" alt="水平排列"></p>
<p>item-b、item-c、item-d 因為沒有指定位置，自動依照grid-auto-flow水平排列</p>
<p><img src="https://css-tricks.com/wp-content/uploads/2018/11/grid-auto-flow-02.svg" alt="垂直排列"></p>
<p>item-b、item-c、item-d 因為沒有指定位置，自動依照grid-auto-flow垂直排列</p>
<h2 id="內部元素-子層"><a href="#內部元素-子層" class="headerlink" title="內部元素(子層)"></a>內部元素(子層)</h2><p>以下介紹可以在內部元素設定的屬性</p>
<h3 id="grid-column-start-grid-column-end-grid-row-start-grid-row-end"><a href="#grid-column-start-grid-column-end-grid-row-start-grid-row-end" class="headerlink" title="grid-column-start, grid-column-end, grid-row-start, grid-row-end"></a>grid-column-start, grid-column-end, grid-row-start, grid-row-end</h3><p>物件所佔的空間位置，Column 及 Row 所到的起始點及終點</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>number : 用數字表示 物件 所在的線。</li>
<li>span number - 物件會橫跨的欄位數</li>
<li>span name - 物件所在的 grid 名稱</li>
<li>auto - 自動</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">3</span>; <span class="comment">/* 物件起始線 */</span></span><br><span class="line">  <span class="attribute">grid-column-end</span>: span <span class="number">4</span>; <span class="comment">/* 終點線 = 物件所佔的空間數 */</span>  </span><br><span class="line">  <span class="attribute">grid-row-end</span>: auto; // 不設定終點線</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="grid-column-、-grid-row"><a href="#grid-column-、-grid-row" class="headerlink" title="grid-column 、 grid-row"></a>grid-column 、 grid-row</h3><p>上面屬性的縮寫，使用斜線 (&#x2F;) 隔開屬性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;</span><br><span class="line">  <span class="attribute">grid-row</span>: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>start-line: 開始的格線</li>
<li>end-line : 結束的格線</li>
<li>span value: 指定橫跨的欄位數</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-c</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">3</span> / span <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: third-line / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://css-tricks.com/wp-content/uploads/2018/11/grid-column-row.svg" alt="grid-column"></p>
<h3 id="justify-self"><a href="#justify-self" class="headerlink" title="justify-self"></a>justify-self</h3><p>指定單一格子內的grid-item水平對齊的方式，可設定的值如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  justify-self: start | end | center | <span class="built_in">stretch</span>(預設值);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>範例: </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  justify-self: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-self-start.svg" alt="justify-self"></p>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>指定單一格子內的grid-item垂直對齊的方式，可設定的值如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>範例: </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-self-end.svg" alt="align-self"></p>
<h3 id="place-self"><a href="#place-self" class="headerlink" title="place-self"></a>place-self</h3><p>是 align-self跟justify-self的縮寫，用法如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">place-self : &lt;align-self&gt; / &lt;justify-self&gt; </span><br></pre></td></tr></table></figure>

<p>第一個值設定 align-self，第二個值設定justify-self。如果只設定一個值，則會同時套用到align-self跟justify-self。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  place-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://css-tricks.com/wp-content/uploads/2018/11/place-self-center.svg" alt="center"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  place-self: center stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://css-tricks.com/wp-content/uploads/2018/11/place-self-center-stretch.svg" alt="place-self"></p>
<h2 id="特殊單位與函式"><a href="#特殊單位與函式" class="headerlink" title="特殊單位與函式"></a>特殊單位與函式</h2><h3 id="fr-單位"><a href="#fr-單位" class="headerlink" title="fr 單位"></a>fr 單位</h3><p>在grid裡，可以用 fr 作為單位，1fr指的是 1等分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-template-columns: 1fr 3fr;</span><br></pre></td></tr></table></figure>

<p>上面我們設定的兩欄就分別代表 25% 和 75% 的寬度。</p>
<p>fr 也可以搭配其他單位使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-template-columns: 50px min-content 1fr;</span><br></pre></td></tr></table></figure>

<h3 id="關鍵字"><a href="#關鍵字" class="headerlink" title="關鍵字"></a>關鍵字</h3><p>當我們在設定欄位長寬時，可以用 px 、% 、rem 等等，也可以使用關鍵字設定。</p>
<ul>
<li>min-content: 指的是內容的最小尺寸</li>
<li>max-content: 指的是內容的最大尺寸</li>
</ul>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022062901.png?alt=media&token=acf4677c-2652-40d6-aa52-6fd328611d56" alt="min-content"></p>
<p>假設有一個grid-item是一段句子:</p>
<ul>
<li>min-content: 句子裡最長的字的寬度。</li>
<li>max-content: 完整句子的寬度。</li>
</ul>
<h3 id="特殊函式"><a href="#特殊函式" class="headerlink" title="特殊函式"></a>特殊函式</h3><ul>
<li>minmax(最小寬度, 最大寬度)</li>
</ul>
<p>使用 minmax 可以同時設定欄位的最小和最大寬度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-template-columns: minmax(100px, 1fr) 3fr; </span><br></pre></td></tr></table></figure>

<ul>
<li>repeat(欄位數量, 欄位寬度)</li>
</ul>
<p>當要設定的欄位寬度都一樣時，可以用 repeat方法來設定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-template-columns:</span><br><span class="line">  1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;</span><br><span class="line"></span><br><span class="line">/* easier: */</span><br><span class="line">grid-template-columns:</span><br><span class="line">  repeat(8, 1fr);</span><br><span class="line"></span><br><span class="line">/* especially when: */</span><br><span class="line">grid-template-columns:</span><br><span class="line">  repeat(8, minmax(10px, 1fr));</span><br></pre></td></tr></table></figure>

<p>在使用 repeat() 時，如果不確定自己要的重複次數，可以使用 auto-fill 和 autofit 讓重複的網格持續填滿。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  gird-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">50px</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上例，因為容器寬度是500px, 設定auto-fill 會產生 5 * 3的網格。</p>
<p>至於 auto-fill 和 auto-fit的差異在:</p>
<ul>
<li>auto-fill: 盡量產生重複的欄位。</li>
<li>auto-fit: 盡量產生重複的欄位，但多的格子會被設為0px，折疊起來。</li>
</ul>
<p><a href="https://jhlstudy.blogspot.com/2018/07/grid-layout-auto-fill-auto-fit_8.html">詳細解說文章看這</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(3) Hexo-基礎Hexo指令</title>
    <url>/2022/06/08/2022-6-8-Hexo-%E5%9F%BA%E7%A4%8EHexo%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文將會介紹一些基礎的Hexo指令，那就一起看下去吧。</p>
<h2 id="基礎Hexo指令"><a href="#基礎Hexo指令" class="headerlink" title="基礎Hexo指令"></a>基礎Hexo指令</h2><ul>
<li><code>hexo new &#39;新文章&#39;</code>  新增文章</li>
<li><code>hexo generate</code> 產生編譯後的靜態檔案</li>
<li><code>hexo server</code> 開啟一個本地端伺服器</li>
<li><code>hexo clean</code> 清除暫存檔案</li>
<li><code>hexo deploy</code> 部屬靜態檔案</li>
</ul>
<h2 id="產生新文章"><a href="#產生新文章" class="headerlink" title="產生新文章"></a>產生新文章</h2><p>要產生一篇新的文章，可以用 <code>hexo new &#39;新文章</code> 指令，產生後的文章會放在 <code>source</code> 資料夾的 <code>_posts</code>裡</p>
<h2 id="產生編譯後的檔案"><a href="#產生編譯後的檔案" class="headerlink" title="產生編譯後的檔案"></a>產生編譯後的檔案</h2><p>當文章寫完後，需要將md檔案進行編譯，此時可以用 <code>hexo generate</code> 指令，編譯完後會產生一個 <code>public</code> 資料夾，作為之後部屬使用。<br>此指令的簡寫為 <code>hexo g</code></p>
<h2 id="開啟一個本地端伺服器"><a href="#開啟一個本地端伺服器" class="headerlink" title="開啟一個本地端伺服器"></a>開啟一個本地端伺服器</h2><p>當靜態檔案編譯完後，可以用 <code>hexo server</code> 指令開啟一個本地端的模擬伺服器，用來即時瀏覽我的寫完的文章，此指令的簡寫為 <code>hexo s</code></p>
<h2 id="清除暫存檔案"><a href="#清除暫存檔案" class="headerlink" title="清除暫存檔案"></a>清除暫存檔案</h2><p><code>hexo clean</code> 指令主要用來清除一些奇怪的暫存檔案，通常部屬前會先清理一遍。</p>
<h2 id="部屬靜態檔案"><a href="#部屬靜態檔案" class="headerlink" title="部屬靜態檔案"></a>部屬靜態檔案</h2><p><code>hexo deploy</code> 將我們的靜態網站部屬到雲端使用的指令，詳細用流程在之後部屬的章節會提到。<br>此指令的簡寫為 <code>hexo d</code></p>
<p>這就是今天 hexo 指令的介紹囉。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>(2) Hexo 撰寫第一篇文章</title>
    <url>/2022/06/08/2022-6-8-Hexo-%E6%92%B0%E5%AF%AB%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="建立你的第一篇文章"><a href="#建立你的第一篇文章" class="headerlink" title="建立你的第一篇文章"></a>建立你的第一篇文章</h2><p>我們可以在Vscode 中，開啟上個章節所建立的專案</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022060802.png?alt=media&token=cba3f60e-8fba-4f61-83b4-9668e01bd2e7" alt="專案圖片"></p>
<p>在Vscode中用快捷鍵 Control + ESC，開啟終端機 </p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022060803.png?alt=media&token=e185edcc-77fc-4d1e-8499-b6c467085d8b" alt="終端機"></p>
<p>然後下方終端機輸入 <code>hexo new &#39;我的第一篇部落格文章&#39;</code> 輸入完後會顯示 <code>INFO  Generated: 2022/06/07/2022-6-7-Hexo-部落格安裝與部屬/index.html</code> 代表文章被順利建立在source資料夾裡的 <code>_posts</code>底下。</p>
<h2 id="MD-內容"><a href="#MD-內容" class="headerlink" title="MD 內容"></a>MD 內容</h2><p>在md檔案裡，最上面會有可以填寫 標題等欄位<br><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022060804.png?alt=media&token=27df0ccb-a65b-434b-aece-6c7af864d641" alt="標題"></p>
<p>文章撰寫則以Markdown格式為主，若不了解Markdown格式，可以參考 <a href="https://markdown.tw/">markdown</a></p>
<p>以上就是撰寫文章的方法囉</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>(6) Hexo-新增佈景主題</title>
    <url>/2022/06/09/2022-6-9-2-Hexo-%E6%96%B0%E5%A2%9E%E4%BD%88%E6%99%AF%E4%B8%BB%E9%A1%8C/</url>
    <content><![CDATA[<h2 id="挑選佈景主題"><a href="#挑選佈景主題" class="headerlink" title="挑選佈景主題"></a>挑選佈景主題</h2><p>除了Hexo預設的版型外，也可以新增不同的佈景主題上去。<br>可以先來到 <a href="https://hexo.io/themes/">Hexo 官網</a>的主題區挑選你喜歡的主題</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022060904.png?alt=media&token=9deec5ff-8e70-433d-810c-412773e6566d" alt="theme-page"></p>
<p>本文以 <a href="https://theme-next.js.org/">NexT</a> 主題為例，點選後來到NextT官網。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022060905.png?alt=media&token=ae056e59-0cfc-4958-8d21-e18bfa158b6d" alt="NEXTT"></p>
<p>點選左上角doc可以進入教學文件。</p>
<h2 id="下載NextT主題"><a href="#下載NextT主題" class="headerlink" title="下載NextT主題"></a>下載NextT主題</h2><p>這邊使用NPM來下載主題，在你的Vscode的終端機輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ npm install hexo-theme-next</span><br></pre></td></tr></table></figure>

<h2 id="主題設定檔"><a href="#主題設定檔" class="headerlink" title="主題設定檔"></a>主題設定檔</h2><p>下載好後會發現我們現在有兩個 <code>_config.yml</code>設定檔</p>
<ol>
<li>第一個在我們專案的根目錄，也就是一開始hexo的設定檔</li>
<li>第二個在我們主題的目錄下，(e.g. <code>thems/next/_config.yml</code> or <code>node_modules/hexo-theme-next/_config.yml</code>)</li>
</ol>
<p>以下稱第一個為hexo設定檔，第二個為NextT設定檔。</p>
<h2 id="hexo設定檔"><a href="#hexo設定檔" class="headerlink" title="hexo設定檔"></a>hexo設定檔</h2><p>當我們下載完NextT主題後，到hexo設定檔裡，找到theme選項，並將值改為 next</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h2 id="NextT設定檔"><a href="#NextT設定檔" class="headerlink" title="NextT設定檔"></a>NextT設定檔</h2><p>官網不建議我們直接修改NextT設定檔，所以我們可以在專案根目錄新增一個 <code>/_config.next.yml</code>檔案。<br>我們可以複製所有NextT設定檔裡的資料到我們新增的 _config.next.yml 檔案裡。</p>
<p>NextT有提供四種不同風格的版型，可以在此挑選你喜愛的版型，只要將 # 取消或勾選即可</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022060906.png?alt=media&token=cacc04e2-a6d7-4992-b096-37bb1a2bb206" alt="scheme"></p>
<p>Next 也提供dark mode可以選擇，只要將dark mode改為true即可</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022060907.png?alt=media&token=c97c2e01-2382-4dec-abee-f64b3e5cb980" alt="darkmode"></p>
<p>以上都設定好後，就可發現我們的部落格套用了nextT主題囉</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022060908.png?alt=media&token=7b16821f-7ef1-4b28-b075-5be943ebfd76" alt="theme"></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax解說系列(1) Ajax的原理</title>
    <url>/2022/07/01/2022-7-1-1-js-ajax/</url>
    <content><![CDATA[<h2 id="Ajax-原理"><a href="#Ajax-原理" class="headerlink" title="Ajax 原理"></a>Ajax 原理</h2><p>AJAX即「Asynchronous JavaScript and XML」（非同步的JavaScript與XML技術）</p>
<p>傳統的Web應用允許使用者端填寫表單（form），當送出表單時就向網頁伺服器傳送一個請求。伺服器接收並處理傳來的表單，然後送回一個新的網頁，但這個做法浪費了許多頻寬，因為在前後兩個頁面中的大部分HTML碼往往是相同的。</p>
<p>Ajax 透過瀏覽器發送一個網頁請求給伺服器，伺服器再回傳對應資料，如此不用重新整理網頁，就能更新資料，並避免了在網路上傳送那些沒有改變的資訊。網頁請求代碼可分為以下幾種</p>
<h2 id="網頁請求狀態碼"><a href="#網頁請求狀態碼" class="headerlink" title="網頁請求狀態碼"></a>網頁請求狀態碼</h2><ul>
<li>資訊回應 (Informational responses, 100–199),</li>
<li>成功回應 (Successful responses, 200–299),</li>
<li>重定向 (Redirects, 300–399),</li>
<li>用戶端錯誤 (Client errors, 400–499),</li>
<li>伺服器端錯誤 (Server errors, 500–599).</li>
</ul>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>(4) Hexo-部屬部落格</title>
    <url>/2022/06/08/2022-6-8-Hexo-%E9%83%A8%E5%B1%AC%E9%83%A8%E8%90%BD%E6%A0%BC/</url>
    <content><![CDATA[<h2 id="Gihub-Pages"><a href="#Gihub-Pages" class="headerlink" title="Gihub Pages"></a>Gihub Pages</h2><p>本文會使用 Github Pages ，來部屬我們的部落格。</p>
<h2 id="創建repository"><a href="#創建repository" class="headerlink" title="創建repository"></a>創建repository</h2><p>首先來到Gihub創建一個新的 repository， 這個repository會用來放我們的部落格</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022060805.png?alt=media&token=78b7c432-452d-4595-9c87-e8492d3a445d" alt="repository"></p>
<p>點選 create new repository來創建我們的儲存庫，這邊要先說明每個Github帳號都有一個主儲存庫，網址會呈現如下圖 new 的網址，由你的 <code>github名稱 + github.io</code> 組成。<br>每個Github帳號的主儲存庫只有一個，通常會用來放最重要的內容，這邊就用來放我們的部落格</p>
<p>在創建時儲存庫時，可以將主儲存庫的網址填入</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022060806.png?alt=media&token=329c82e8-b023-429d-a0f4-0e1efddbda06" alt="repository-name"></p>
<p>建立好後來到這個畫面</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022060807.png?alt=media&token=a7adcd93-9818-4df2-8a1d-c6285c2b5c1a" alt="建立儲存庫"></p>
<p>此時回到Vscode，開啟一個新的專案，並輸入以下指令，將git專案建立好後推到github上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/tim8076/test.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
<p>專案推上 github 後，開啟專案底下的 <code>_config.yml</code> 檔案，找到deploy項目，並將內容修改如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/tim8076/tim8076.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<p>這邊type選用git，repo則貼上你的儲存庫的網址，branch選擇 main</p>
<h2 id="部屬部落格"><a href="#部屬部落格" class="headerlink" title="部屬部落格"></a>部屬部落格</h2><p>當完成以上步驟後，要先安裝 hexo 自動部屬的套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>安裝完後，先使用<code>hexo clean</code> 清除暫存檔，再用 <code>hexo g</code> 來編譯靜態檔，最後用 <code>hexo d</code>來將網站部署上github</p>
<p>部屬完後輸入你的 githubpages網址，如 <a href="https://tim8076.github.io/">https://tim8076.github.io/</a>，就可以看到部屬好的部落格了。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax解說系列(2) XMLHttpRequest</title>
    <url>/2022/07/01/2022-7-1-2-js-XMLHttpRequest/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>XMLHttpRequest (XHR) 是 JavaScript 著名的 古老 API，能透過它操作 HTTP 請求，進行網路作業，<br>擷取資料的同時，卻不需進行頁面重載 (page reload)，以下介紹使用方法</p>
<h2 id="建立物件"><a href="#建立物件" class="headerlink" title="建立物件"></a>建立物件</h2><p>我們可以透過new 一個 XMLHttpRequest 物件 ，來向伺服器發送請求，這個XMLHttpRequest 物件包含許多屬性可使用。</p>
<p><img src="https://miro.medium.com/max/714/1*e4T8bl0a1-yLF-6ty31wSA.png" alt="xml"><br><img src="https://miro.medium.com/max/1155/1*32TavTHF8TJWAcE5XIOyGw.png"></p>
<p>其中 readyState 的狀態分為幾種，分別代表發出請求的不同階段</p>
<ul>
<li>1 代表你用了 open 但還沒有把資料傳過去</li>
<li>2 偵測到你用 send</li>
<li>3 資料loading 中 ，可能資料太大</li>
<li>4 你撈到資料了，數據完全接收了</li>
</ul>
<h2 id="設定請求"><a href="#設定請求" class="headerlink" title="設定請求"></a>設定請求</h2><p>使用 open() 方法，設定請求，<br>請求方法 除了 GET 與 POST，還能使用 PUT、DELETE、HEAD、OPTIONS</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;請求方法&#x27;</span>, <span class="string">&#x27;請求資源網址&#x27;</span>, <span class="literal">true</span> | <span class="literal">false</span>)</span><br></pre></td></tr></table></figure>

<p>其中第三個參數代表: </p>
<p>true 代表非同步，不等資料回傳，程式碼就會繼續跑。<br>false 代表同步，資料回傳，程式碼才繼續跑。</p>
<h2 id="發送請求"><a href="#發送請求" class="headerlink" title="發送請求"></a>發送請求</h2><p>使用 send() 方法，發送請求。</p>
<p><img src="https://miro.medium.com/max/1155/1*DvrAzDHjq31_kdppxvivyQ.png" alt="send"></p>
<h2 id="監聽事件"><a href="#監聽事件" class="headerlink" title="監聽事件"></a>監聽事件</h2><p>當使用非同步時，要監聽onload事件，確認資料撈回後，再進行處理。</p>
<p><img src="https://miro.medium.com/max/1155/1*-UC5WKjY-A5ClIMLUM3PbQ.png" alt="on-load"></p>
<h2 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h2><p>和 get取得資料不同，利用 post 方法，傳送資料到伺服器，可以做帳號驗證、登入等功能。</p>
<p><img src="https://miro.medium.com/max/1155/1*4ip7E7cbry2cIWUcO1Ufvg.png" alt="post"></p>
<ol>
<li>open方法，選用post</li>
<li>setRequestHeader，指定傳送資料的格式</li>
</ol>
<ul>
<li>json : application&#x2F;json</li>
<li>傳統表單: application&#x2F;x-www-form-urlencoded</li>
</ul>
<ol start="3">
<li><p>send 傳送要核對的資料 ，利用 &amp; 連接多筆資料</p>
</li>
<li><p>監聽 onload事件，處理回傳後資料</p>
</li>
</ol>
<p><img src="https://miro.medium.com/max/1086/1*RSI2A1RPc5obLx5K_sYEyQ.png" alt="onload"></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax解說系列(3) Fetch</title>
    <url>/2022/07/01/2022-7-1-3-js-fetch/</url>
    <content><![CDATA[<h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><p>和 XMLHttpRequest一樣，Fetch 是window物件底下的方法，用來發送網路請求。當請求成功，fetch就會回傳一個promise物件(狀態是fulfilled)，這物件內會帶有response物件，裏面會放有我們想抓的資料。</p>
<p>以下介紹不同請求類型的用法:</p>
<h2 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h2><p><img src="https://miro.medium.com/max/919/1*aa1YL0BX_PnipFIh2nJgJQ.png" alt="get"></p>
<p>單純發送get請求時，在fetch填入api的url，在第一次.then接收時，要用.json()方法，將資料轉為物件，此時會返回一個promise。<br>在用一個then去接收promise返回的資料，此時就是真正的物件資料。</p>
<h2 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h2><p><img src="https://miro.medium.com/max/1155/1*FArkQAKzv0-HP0tZ7_PRmQ.png" alt="post"></p>
<ol>
<li>使用post資料到伺服器時，要設定 method: ‘POST’，</li>
<li>headers 要設定 傳送資料的格式:</li>
</ol>
<ul>
<li>json 格式 : application&#x2F;json</li>
<li>傳統表單格式: application&#x2F;x-www-form-urlencoded</li>
</ul>
<ol start="3">
<li>body 內放要傳送的資料，記得資料要用JSON.stringify轉為字串傳入。</li>
<li>最後用 .then .catch接收回傳資料。</li>
</ol>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>(5) Hexo-新增頁面</title>
    <url>/2022/06/09/2022-6-9-1-Hexo-%E6%96%B0%E5%A2%9E%E9%A0%81%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="新增頁面"><a href="#新增頁面" class="headerlink" title="新增頁面"></a>新增頁面</h2><p>與新增文章不同，我們也可以在hexo 裡新增一些頁面，用來放作者介紹等資訊。</p>
<p>建立頁面的指令格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;頁面名稱（網址用）&quot;</span><br></pre></td></tr></table></figure>

<p>新增好的頁面會在放在source資料夾底下</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/202206009.png?alt=media&token=4e8aaa96-e6ea-4a18-9bb1-37d18acec1b7" alt="about-page"></p>
<p>頁面預設只有 title 以及 date， 而頁面預設是可以留言的，如果不開放留言則可以新增 comments 設定為false。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/20220600902.png?alt=media&token=6fbb9f83-991a-4e9b-b2dc-9291231e6dfb" alt="comment"></p>
<h2 id="新增分類與標籤頁"><a href="#新增分類與標籤頁" class="headerlink" title="新增分類與標籤頁"></a>新增分類與標籤頁</h2><p>我們也可在hexo裡增加分類頁面與標籤頁面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags  // 建立標籤頁</span><br><span class="line">hexo new page categories // 建立分類頁</span><br></pre></td></tr></table></figure>

<p>頁面一樣會新增在source資料夾底下，進入 <code>source/tags</code>，會看到<code>index.md</code>檔，<br>將裡面內容再加入以下這行即可 <code>type: &quot;tags&quot;</code>。</p>
<p>最後找到主題 (theme) 設置文件 (_config.yml)，這邊以 NexT 為例，將 tags 及 categories 前的#字號移除即可。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/20220600903.png?alt=media&token=f53ac521-d777-4cc9-b6e0-c34b04da5458" alt="theme"></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>(3)  Node.js Global全域物件</title>
    <url>/2022/07/11/2022-7-11-2-node-global/</url>
    <content><![CDATA[<h2 id="Global-全域物件"><a href="#Global-全域物件" class="headerlink" title="Global 全域物件"></a>Global 全域物件</h2><p>在js中有 window 這個全域物件，我們可以將變數賦予到window上存取，我們稱為全域變數。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071103.png?alt=media&token=e0e1c0f6-8781-4730-b61b-7361b9e60446" alt="window"></p>
<p>在 node.js中也有 Global 全域物件，我們將 global console出來會發現global內也有許多預設的功能。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071105.png?alt=media&token=8fe2bec8-2284-4917-a8a5-487630b0eb4e" alt="global"></p>
<h2 id="在global上新增變數"><a href="#在global上新增變數" class="headerlink" title="在global上新增變數"></a>在global上新增變數</h2><p>和window一樣，我們也可將變數賦予到 global 上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">global</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>

<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071106.png?alt=media&token=9c5107fe-7d60-4bdc-aa03-701075ff6d83" alt="a賦予到 global"></p>
<h2 id="global的變數作用域"><a href="#global的變數作用域" class="headerlink" title="global的變數作用域"></a>global的變數作用域</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071107.png?alt=media&token=4129e4f2-53df-4ec2-a84b-8a77b3080717" alt="變數作用域"></p>
<p>在每隻js裡宣告的變數，只會在那隻js裡有效，無法在global內被存取。如果想存取到global上，要寫 <code>global.a = 1</code> 的方式。這和在winddow能直接繼承用var宣告的變數不同。</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>(4) Node.js require、module exports 模組設計</title>
    <url>/2022/07/11/2022-7-11-3-node-export-import/</url>
    <content><![CDATA[<h2 id="匯入匯出"><a href="#匯入匯出" class="headerlink" title="匯入匯出"></a>匯入匯出</h2><p>在node.js如果想讀取或匯出不同js檔案的資料，可用:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = data;  <span class="comment">// 匯出資料</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="built_in">require</span>(<span class="string">&#x27;./data&#x27;</span>);  <span class="comment">// 匯入資料</span></span><br></pre></td></tr></table></figure>

<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071108.png?alt=media&token=d3064ea4-4ab5-43a0-b915-1a5a5d20a434" alt="匯入匯出"></p>
<p>如上圖，我們在 data.js裡用module.exports匯出資料，並在 app.js裡用 require 匯入。</p>
<h2 id="匯出整筆物件"><a href="#匯出整筆物件" class="headerlink" title="匯出整筆物件"></a>匯出整筆物件</h2><p>若有多筆資料要同時匯出，也可將資料放到物件裡同時匯出:</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071109.png?alt=media&token=d4e53e3c-1b7a-4ec8-b8ed-8e095399cd7d" alt="匯出物件"></p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>(2) 透過 Node.js 執行 JS 檔案</title>
    <url>/2022/07/11/2022-7-11-1-node-run/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇我們已經將 Node.js 安裝好了，這章節就小試身手，來用 Node.js 執行檔案吧。</p>
<h2 id="新增js檔案"><a href="#新增js檔案" class="headerlink" title="新增js檔案"></a>新增js檔案</h2><p>我們先在桌面新增一個project資料夾，並在裡面新增一隻app.js檔案。新增後，我們用vscode編輯器開啟該資料夾。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071101.png?alt=media&token=58b8f450-806a-4c33-bafe-b23e4a61353e" alt="project"></p>
<h2 id="執行js檔案"><a href="#執行js檔案" class="headerlink" title="執行js檔案"></a>執行js檔案</h2><p>檔案開啟後，我們就可用node.js來執行它，開啟終端機並輸入:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node app.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071102.png?alt=media&token=9980edd6-0205-420e-9705-26810cb3818a" alt="執行js檔案"></p>
<p>執行後就可看到終端機順利輸出 console.log的結果囉。</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax解說系列(4) Axios 套件</title>
    <url>/2022/07/01/2022-7-1-4-js-axios/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>除了使用 fetch這種原生api來處理AJAX以外，我們也可以使用套件來處理，本文介紹的axios即是處理ajax可用的套件。</p>
<h2 id="axios基本語法"><a href="#axios基本語法" class="headerlink" title="axios基本語法"></a>axios基本語法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(url[,config])</span><br></pre></td></tr></table></figure>

<p>axios回傳的是一個promise，所以我們可以用 <code>.then() .catch()</code> 來接收結果。</p>
<h2 id="get-方法"><a href="#get-方法" class="headerlink" title="get 方法"></a>get 方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;https://example/api/&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>( <span class="function">(<span class="params">response</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(response))</span><br><span class="line">    .<span class="title function_">catch</span>( <span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</span><br></pre></td></tr></table></figure>

<p>用 axios.get(‘資源網址’) 即可發出get請求。</p>
<p>也可加入參數，参數放在params屬性裏面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;https://example/api/&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error))</span><br></pre></td></tr></table></figure>

<h2 id="post-方法"><a href="#post-方法" class="headerlink" title="post 方法"></a>post 方法</h2><p><img src="https://miro.medium.com/max/1155/1*wUR2CLqYOBdpxogkcB-5aA.png" alt="post"><br><img src="https://miro.medium.com/max/1155/1*pwaLtrNzCstPuhKF9p6Spg.png" alt="post"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(‘api網址’ , 物件格式資料)</span><br></pre></td></tr></table></figure>
<p>用.then接收成功資訊，.catch()接收失敗資訊。</p>
<p>因為axios預設是傳送將物件以Json格式傳送，若要傳送 application&#x2F;x-www-form-urlencoded 格式，可以使用 qs 套件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="string">&#x27;bar&#x27;</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">data</span>: qs.<span class="title function_">stringify</span>(data),</span><br><span class="line">  url,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">axios</span>(options);</span><br></pre></td></tr></table></figure>

<h2 id="物件形式寫法"><a href="#物件形式寫法" class="headerlink" title="物件形式寫法"></a>物件形式寫法</h2><p>也可以將參數統一寫在config 物件傳入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Send a POST request</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user/12345&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="配置的優先順序-低到高"><a href="#配置的優先順序-低到高" class="headerlink" title="配置的優先順序 (低到高)"></a>配置的優先順序 (低到高)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建立實體時的設定，優先度最低</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Override timeout default for the library</span></span><br><span class="line"><span class="comment">// Now all requests using this instance will wait 2.5 seconds before timing out</span></span><br><span class="line"><span class="comment">// 覆蓋實體設定 優先度第二</span></span><br><span class="line">instance.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Override timeout for this request as it&#x27;s known to take a long time</span></span><br><span class="line"><span class="comment">// 發送請求的 config ， 優先度最高</span></span><br><span class="line">instance.<span class="title function_">get</span>(<span class="string">&#x27;/longRequest&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="axios-api-管理"><a href="#axios-api-管理" class="headerlink" title="axios api 管理"></a>axios api 管理</h2><p><a href="https://medium.com/i-am-mike/%E4%BD%BF%E7%94%A8axios%E6%99%82%E4%BD%A0%E7%9A%84api%E9%83%BD%E6%80%8E%E9%BA%BC%E7%AE%A1%E7%90%86-557d88365619">參考文章</a><br><a href="https://ithelp.ithome.com.tw/articles/10212121">參考文章2</a></p>
<p>當axios要打的api變多時，可以新開一個 api.js 檔案來管理。利用 <code>axios.create()</code> 方法來新建一個axios實體。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此為 api.js 檔案 (統一管理 API)</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userRequest = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,  <span class="comment">// 預設Url</span></span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;, <span class="comment">// headers資訊</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>, <span class="comment">// 請求超過指定時間時即停止。</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以統一管理 API Call</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">postFunc</span> = data =&gt; userRequest.<span class="title function_">post</span>(<span class="string">&#x27;/users&#x27;</span>, data)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getFunc</span> = url =&gt; userRequest.<span class="title function_">get</span>(url)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要使用該 api 的檔案，使用 import將方法載入</span></span><br><span class="line">  <span class="keyword">import</span> &#123; postFunc, getFunc &#125; <span class="keyword">from</span> <span class="string">&#x27;api.js&#x27;</span>; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getPost</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> post = <span class="keyword">await</span> <span class="title function_">getFunc</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Ajax</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>(6) Node.js 內建模組</title>
    <url>/2022/07/11/2022-7-11-5-node-module/</url>
    <content><![CDATA[<h2 id="OS模組-operating-system模組"><a href="#OS模組-operating-system模組" class="headerlink" title="OS模組(operating system模組)"></a>OS模組(operating system模組)</h2><p>os 提供了一些基本的系统操作函数，首先載入模組</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/942/1*N07WqfVXhpTjXTv7Tc1TSA.png" alt="os"></p>
<p><img src="https://miro.medium.com/max/982/1*VhskxuDYl8iPxJWp8vrKcA.png" alt="os"></p>
<p>上圖中顯示 userInfo和 uptime</p>
<p><img src="https://miro.medium.com/max/954/1*gUiWv1LYXUv5DWUh3zdlvg.png" alt="os"></p>
<p><img src="https://miro.medium.com/max/786/1*HDXgZT45S93ydYeiIPVnIA.png" alt="os"></p>
<p>上圖顯示，使用者系統名稱如windows和相關記憶體資料。</p>
<h2 id="Path模組"><a href="#Path模組" class="headerlink" title="Path模組"></a>Path模組</h2><p>再講 path模組前，先介紹兩個功能 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__dirname : 回傳檔案目錄位置</span><br><span class="line">__filename : 回傳檔案目錄位置(包含檔名)</span><br></pre></td></tr></table></figure>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071114.png?alt=media&token=e85ea62f-4e45-47fe-8746-55740d27bc8f" alt="__dirname，__filename"></p>
<p>nodeJs裡有一個 path 模組，可用來取得檔案與目錄路徑，詳細也可瀏覽 <a href="https://nodejs.org/api/path.html">Node.js PATH API文件</a></p>
<ul>
<li>抓目錄路徑： path.dirname(‘&#x2F;xx&#x2F;yy&#x2F;zz.js’) 回傳 &#x2F;xx&#x2F;yy</li>
<li>路徑合併：path.join(__dirname,’&#x2F;xx’) 回傳 前後路徑合併</li>
<li>抓檔名： path.basename(‘&#x2F;xx&#x2F;yy&#x2F;zz.js’) 回傳 zz.js</li>
<li>抓副檔名： path.extname(‘&#x2F;xx&#x2F;yy&#x2F;zz.js’) 回傳 js</li>
<li>分析路徑： path.parse(‘&#x2F;xx&#x2F;yy&#x2F;zz.js’) 回傳 上述綜合物件</li>
</ul>
<h3 id="絕對路徑-path-resolve"><a href="#絕對路徑-path-resolve" class="headerlink" title="絕對路徑: path.resolve()"></a>絕對路徑: path.resolve()</h3><p>path.resolve()方法用於將path-segments序列解析為絕對路徑。它通過處理從右到左的路徑順序來工作，在每個路徑之前添加，直到創建絕對路徑為止。</p>
<p><img src="https://miro.medium.com/max/1400/1*RzS_lXFO03QUo1fP5D5xkA.png" alt="path"></p>
<p><img src="https://miro.medium.com/max/1400/1*2Yq7Z3y8Dh5AGiDVMvvBWA.png" alt="path"></p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(1) 開啟web伺服器</title>
    <url>/2022/07/11/2022-7-11-6-node-express-1/</url>
    <content><![CDATA[<h2 id="什麼是Express"><a href="#什麼是Express" class="headerlink" title="什麼是Express?"></a>什麼是Express?</h2><p>Express 這個套件主要幫忙解決許多node.js http server 所需要的基本服務，讓開發http service 變得更為容易，不需要像之前需要透過層層模組（module）才有辦法開始編寫自己的程式。</p>
<p>這個套件是由TJ Holowaychuk 製作而成的套件，裡面包含基本的路由處理(route)，http 資料處理（GET&#x2F;POST&#x2F;PUT），另外還與樣板套件（js html template engine）搭配，同時也可以處理許多複雜化的問題。</p>
<h2 id="安裝express"><a href="#安裝express" class="headerlink" title="安裝express"></a>安裝express</h2><p>在新專案裡 輸入 npm init 建立 package.json檔後，輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install express --save   // 安裝express 套件</span><br></pre></td></tr></table></figure>

<h2 id="建立web伺服器"><a href="#建立web伺服器" class="headerlink" title="建立web伺服器"></a>建立web伺服器</h2><p><img src="https://miro.medium.com/max/1400/1*-a7Jvq3IudAqXHKVJYVXKQ.png" alt="app.js"></p>
<p>在js檔裡，先把express require()進來，並將express賦予到app變數上。</p>
<p>app.get: 第一個參數是路由，看前端是訪問哪個網址，第二個function則帶入req, res參數。</p>
<p>app.listen: 監聽個別的port。</p>
<h2 id="404頁面設計"><a href="#404頁面設計" class="headerlink" title="404頁面設計"></a>404頁面設計</h2><p><img src="https://miro.medium.com/max/1236/1*WcOY6fVxz7hTrTSOot1xyQ.png" alt="404頁面"></p>
<p>使用app.all(‘*’)來設計404頁面，不論使用者是發出 get 、post 、put 、delete請求，都會觸發app.all。並且使用 * 做為路由，代表不管使用者前往哪個路由都會觸發這個function。</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(3) 路由設計</title>
    <url>/2022/07/11/2022-7-11-8-node-route/</url>
    <content><![CDATA[<h2 id="設計路由-固定路徑"><a href="#設計路由-固定路徑" class="headerlink" title="設計路由(固定路徑)"></a>設計路由(固定路徑)</h2><p><img src="https://miro.medium.com/max/1400/1*dZ1tIxswvDQ40zTICPcpUg.png" alt="路由"></p>
<p>我們可以設計像 ‘&#x2F;user&#x2F;edit-photo’、’&#x2F;user&#x2F;edit-profile’ 不同的路由，讓使用者來到user頁面後再去不同的頁面如edit-photo、edit-profile。</p>
<h2 id="動態路由"><a href="#動態路由" class="headerlink" title="動態路由"></a>動態路由</h2><p><img src="https://miro.medium.com/max/1400/1*-X6TxEjNyQ0DPy5IMtVwaA.png" alt="動態路由"></p>
<p>有時候會在網址路徑後看到一串亂碼，那串亂碼就是專屬的序號內容，利用這個序號內容去資料庫撈出對應的資料。</p>
<h2 id="取得動態路徑"><a href="#取得動態路徑" class="headerlink" title="取得動態路徑"></a>取得動態路徑</h2><p><img src="https://miro.medium.com/max/1400/1*zxg6lOzZWL8c3ijWK-i7rw.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/route/:params  指定動態路由</span><br><span class="line">req.params  取得動態路由</span><br></pre></td></tr></table></figure>

<p>如上圖我指定動態路由是&#x2F;:name，就可以用req.params.name將動態路由的值撈出來去資料庫做判斷。</p>
<p><img src="https://miro.medium.com/max/1400/1*FSy3X_0YLDQWpzgGslbdPg.png"></p>
<p>路由裡也可以有多組params，如上圖我有 &#x2F;:productID和 &#x2F;:reviewID兩組params，req.params回傳後是一個物件，裡面是各個params的值。</p>
<p><img src="https://miro.medium.com/max/990/1*DMxLXRpjJ1FHZjHqTcjrhg.png"></p>
<h2 id="query-—-取得網址參數"><a href="#query-—-取得網址參數" class="headerlink" title="query — 取得網址參數"></a>query — 取得網址參數</h2><p><img src="https://miro.medium.com/max/1400/1*2igJn3maJXQnHbDaxlIjlA.png"></p>
<p><img src="https://miro.medium.com/max/816/1*IBO0l0IXCUR2NpMfQ-ixYg.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">req.query.參數名稱   取得參數的值</span><br></pre></td></tr></table></figure>

<p>在網址中?後方代表的是query參數，在express中，可以用 req.query.參數名稱，來取得參數的值。</p>
<h3 id="query範例"><a href="#query範例" class="headerlink" title="query範例"></a>query範例</h3><p><img src="https://miro.medium.com/max/1002/1*uLDTt5JDg1HpufIpz_J9AQ.png"></p>
<p><img src="https://miro.medium.com/max/1400/1*si0clmAdnnJYOxd-dnBBOA.png"></p>
<p>上面範例中，先將 search跟 limit 從req.query解構出來後，再利用if判斷 search跟limit有沒有值，有的話就用search跟limit做資料過濾。</p>
<p>如果過濾完沒有值，就回傳空陣列，有值則回傳過濾後陣列。要注意 res回傳只能有一個，所以 前面判斷後的res要加上return。</p>
<h2 id="路由模組化"><a href="#路由模組化" class="headerlink" title="路由模組化"></a>路由模組化</h2><p>為了將不同頁面的路由做模組化，可以先新增一個routes資料，裏頭放不同頁面的路由，例如我有一個user頁面的路由。</p>
<p><img src="https://miro.medium.com/max/784/1*x1CvqoWfVU-tyqLdd4pvvA.png"></p>
<p><img src="https://miro.medium.com/max/1400/1*o2HfO91SWYAhQT_quM6pfg.png"></p>
<p>在user.js裡，可以先載入express.Router()這個模組。利用這個模組，去接分頁的路由。</p>
<p><img src="https://miro.medium.com/max/1400/1*U_m027G0wE2o4rhvsuKJGQ.png"></p>
<p>在app.js中，可以將’.&#x2F;routes&#x2F;user’引入，再用app.use載入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/user&#x27;</span>, user)，<span class="comment">// 使用者造訪/user時，就會去user模組裡載入對應的路由。</span></span><br></pre></td></tr></table></figure>

<h3 id="function-拆分"><a href="#function-拆分" class="headerlink" title="function 拆分"></a>function 拆分</h3><p>更進一步，我們可以將 routes裡的function再拆分出來到 controllers 資料夾<br><img src="https://miro.medium.com/max/714/1*RaxVzLnFqPCea4SL4msVqQ.png"></p>
<p><img src="https://miro.medium.com/max/1400/1*n_Ji23Gxgq7a-GN9VRW9vQ.png"></p>
<p>在 people.js中，我將路由的callback function拆分出來，在用module.exports一次export出去。</p>
<p><img src="https://miro.medium.com/max/1400/1*lT4RKWhgu8Kka-jH1ueqdQ.png"></p>
<p>在 路由的 js檔中，再將這些方法 require 進來。</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>(5) Node.js 內建模組 createServer</title>
    <url>/2022/07/11/2022-7-11-4-node-createServer/</url>
    <content><![CDATA[<h2 id="內建模組-createServer"><a href="#內建模組-createServer" class="headerlink" title="內建模組 createServer"></a>內建模組 createServer</h2><p>在 node.js 中有許多內建模組，其中 createServer 可以用來開啟個web伺服器。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071110.png?alt=media&token=7ce0ed04-70e6-405b-99c2-fab0e7782e73" alt="createServer"></p>
<p>上圖中，我們用<code>require(&#39;http&#39;)</code>，將http模組引入。引入後，用http模組的createServer功能開啟伺服器。並在createServer()裡帶入一個函式，並傳入兩個參數 request， response。</p>
<ul>
<li>request: 代表前端發出的請求的詳細資訊</li>
<li>response: 代表伺服器要回傳的資料</li>
</ul>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071111.png?alt=media&token=db5e0f66-5d26-473d-a617-3ab8cd50d137" alt="req, res"></p>
<p>我們用 response.writeHead()撰寫表頭資料，response.write()寫回傳的內容，response.end()代表結束。最後用listen()來監聽port。</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(5) 靜態檔案</title>
    <url>/2022/07/12/2022-7-12-2-node-static/</url>
    <content><![CDATA[<h2 id="設定靜態檔案"><a href="#設定靜態檔案" class="headerlink" title="設定靜態檔案"></a>設定靜態檔案</h2><p>靜態檔案泛指瀏覽器在呈現完整畫面時所需要的資源檔案，指的是伺服器端不需要去改變的檔案。<br>常見有的.js、.css、.jpg、.png等</p>
<p>在express中如果要載入靜態檔案如圖片、css檔案等，要在程式碼前面先指定靜態檔路徑: </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>上面程式中，我們將靜態檔案設定在public資料夾裡，這樣之後的靜態檔路徑就會從public開始抓</p>
<p><img src="https://miro.medium.com/max/1400/1*kn1VKZekT892LH8V5YZsvg.png"></p>
<p>如上圖會去找&#x2F;public&#x2F;images&#x2F;logo.png</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(4) Middleware</title>
    <url>/2022/07/12/2022-7-12-1-node-middleware/</url>
    <content><![CDATA[<h2 id="Middleware-概念"><a href="#Middleware-概念" class="headerlink" title="Middleware 概念"></a>Middleware 概念</h2><p>Middleware 像水管一樣可以串聯在一起，所有的 Request 及 Response 都會層層經過這些水管。<br>用圖例可以很容易理解，如下圖：</p>
<p><img src="https://miro.medium.com/max/1200/0*6JyVusGg4jQkcBJw.png" alt="middleware"></p>
<h2 id="App-use"><a href="#App-use" class="headerlink" title="App.use"></a>App.use</h2><p>在express中，使用app.use作為類似守門員的角色，app.use就像一層一層的水管，當程式符合條件，才會執行next()，進到下一個funciton。</p>
<p><img src="https://miro.medium.com/max/1400/1*ZG8cv5Yke-HB8ZdEx0oUoQ.png" alt="app.use"></p>
<h2 id="404路由設定"><a href="#404路由設定" class="headerlink" title="404路由設定"></a>404路由設定</h2><p><img src="https://miro.medium.com/max/1400/1*tdatSPLTGHYNUeRLNnEzNA.png" alt="404"></p>
<p>當今天使用者輸入錯誤網址，應該要回傳404頁面。像上圖，當使用者輸入 &#x2F;user ，那沒問題會進入user頁面。</p>
<p>但如果輸入錯誤，可以使用app.use，來回傳res.status(404)，並且send一個404提示頁面給使用者看。如果是程式有問題則可回傳res.status(500)。</p>
<h2 id="middleware-位置"><a href="#middleware-位置" class="headerlink" title="middleware 位置"></a>middleware 位置</h2><p>middleware寫的位置也可不同，以下介紹不同的寫法:</p>
<h3 id="寫在參數內"><a href="#寫在參數內" class="headerlink" title="寫在參數內"></a>寫在參數內</h3><p>middleware也可以寫在路由函式的第二個參數，當使用者進入’&#x2F;user’後，就會進入守門員 middleware，當通過next()後，才會跑最後的function。</p>
<p><img src="https://miro.medium.com/max/1400/1*eIOZrfAsK9x2Ey328D1wxQ.png" alt="寫在第二個參數"></p>
<h3 id="加入多個middleware"><a href="#加入多個middleware" class="headerlink" title="加入多個middleware"></a>加入多個middleware</h3><p>加入多個middleware，可以用陣列方式</p>
<p><img src="https://miro.medium.com/max/1400/1*9IjEP7363kE6HV1ZgHI8GA.png" alt="多個middleware"></p>
<h3 id="加入所有router"><a href="#加入所有router" class="headerlink" title="加入所有router"></a>加入所有router</h3><p>上圖中，我們是手動將logger加入路由中，但當今天路由很多時，無法一一加入，可以用app.use(middleware)，一次將middleware加入所有頁面。</p>
<p><img src="https://miro.medium.com/max/1400/1*-18WRu76rnoT2zAaDQyObw.png" alt="加入所有router"></p>
<p>當有多個middleware要加入時，可以用陣列方式加入，陣列裡的順序會影響middleware的執行順序。</p>
<p><img src="https://miro.medium.com/max/1328/1*QXP-U-OUPfYuBOMyqT9B8Q.png" alt="加入多個"></p>
<h3 id="加入指定路徑的路由"><a href="#加入指定路徑的路由" class="headerlink" title="加入指定路徑的路由"></a>加入指定路徑的路由</h3><p><img src="https://miro.medium.com/max/948/1*tArClOuxGOqWKeursFf5NQ.png"></p>
<p>app.use()，第一個參數可加入指定路徑，如上圖只要路徑是&#x2F;api開頭的都會被加上middleware，如 &#x2F;api&#x2F;about、&#x2F;api&#x2F;products</p>
<p><img src="https://miro.medium.com/max/1216/1*H0R6d3NsPCX423vN5NZT3A.png"></p>
<h2 id="express內建-middleware"><a href="#express內建-middleware" class="headerlink" title="express內建 middleware"></a>express內建 middleware</h2><p>在express中，已經內建了許多 middleware，如之前學過的express.static()</p>
<p><img src="https://miro.medium.com/max/908/1*eQ0DKpqLRQ2rIXcShoOwxg.png"></p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(2) 網址規則</title>
    <url>/2022/07/11/2022-7-11-7-node-network/</url>
    <content><![CDATA[<h2 id="網址的組成"><a href="#網址的組成" class="headerlink" title="網址的組成"></a>網址的組成</h2><p><img src="https://miro.medium.com/max/1400/1*IeJWJEhLIuP0HUfUKMcPgA.png" alt="網址組成"></p>
<p><img src="https://miro.medium.com/max/1400/1*QuRd_DEPJoO76rLIFYklQw.png" alt="https"></p>
<p>https相較http協定，因為有加密是較安全的。</p>
<p><img src="https://miro.medium.com/max/1400/1*324Ulsn-ffPuzx9EX1eMwg.png" alt="網域"></p>
<p>購買好主網址後，次網域可以依據不同服務掛在主網域下。</p>
<p><img src="https://miro.medium.com/max/1400/1*mXxjTDg-yFBJUeKlT2zo4g.png" alt="參數"></p>
<p>在路徑search之後，可以設置query也就是參數，傳到後端後會解析成物件格式，再用這個物件去資料庫撈出對應資料。參數可以有多個，彼此用 &amp; 符號連接。</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(6) EJS樣板語言</title>
    <url>/2022/07/13/2022-7-13-1-ejs-install/</url>
    <content><![CDATA[<h2 id="EJS-介紹"><a href="#EJS-介紹" class="headerlink" title="EJS 介紹"></a>EJS 介紹</h2><p>EJS 的全名是「Embedded Javascript」，顧名思義就是內嵌式的樣板引擎，可以將邏輯與內容直接嵌入到 HTML 頁面上，也就是 EJS 可以讓我們利用 JavaScript 生成 HTML 頁面 。</p>
<h2 id="替-Express-加入-EJS"><a href="#替-Express-加入-EJS" class="headerlink" title="替 Express 加入 EJS"></a>替 Express 加入 EJS</h2><p>首先要先來安裝 EJS 套件進入專案，這邊選用 <a href="https://www.npmjs.com/package/ejs-locals">ejs-locals</a> 這個鄉民開發的套件，因為正版ejs有些功能較缺乏。</p>
<p><img src="https://miro.medium.com/max/1400/1*gfvzeVND9wZ-5HET2qaaKg.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">engine</span>() <span class="comment">// 指定我們要用的樣板引擎是ejs。</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;./views&#x27;</span>)  <span class="comment">//設定views資料夾，存放所有ejs樣板檔案。</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>) <span class="comment">// 告訴express要用ejs樣板來跑。</span></span><br></pre></td></tr></table></figure>

<h2 id="新增-ejs-檔案"><a href="#新增-ejs-檔案" class="headerlink" title="新增 ejs 檔案"></a>新增 ejs 檔案</h2><p><img src="https://miro.medium.com/max/788/1*GVlx6DfG7W4l9SMN9UOcAg.png"></p>
<p><img src="https://miro.medium.com/max/1400/1*q-nTWNurcyFK6D3LeObr6w.png"></p>
<p>在view資料夾下，新增不同頁面的 ejs檔案。</p>
<p><img src="https://miro.medium.com/max/1400/1*RvhXzYdnc6cshoJ3NhS3Zg.png"></p>
<p>在app.get裡，可以用res.render()來指定要渲染的ejs檔案，這邊不用加副檔名.ejs，因為在app.set時已經指定渲染樣板為ejs。</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman-API 管理工具</title>
    <url>/2022/07/13/2022-7-13-3-postman/</url>
    <content><![CDATA[<h2 id="什麼是postman"><a href="#什麼是postman" class="headerlink" title="什麼是postman?"></a>什麼是postman?</h2><p>Postman 是一個可以模擬 HTTP Request 的工具，其中包含常見的 HTTP 的請求方式，例如： GET 、POST、PUT、DELETE，而它的主要功能就是能夠快速的測試你的 API 是否能夠正常的請求資料，並得到正確的請求結果。</p>
<h2 id="安裝程式"><a href="#安裝程式" class="headerlink" title="安裝程式"></a>安裝程式</h2><p>首先來 <a href="https://www.postman.com/downloads/">postman官網</a> 下載postman程式。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071301.png?alt=media&token=11df68e4-e1e5-49a5-9bb6-86811c4c9aae" alt="postman"></p>
<h2 id="基礎操作"><a href="#基礎操作" class="headerlink" title="基礎操作"></a>基礎操作</h2><p>開啟postman程式後，左側是我們的放專案資料夾的區域，每個資料夾裡可以新增該專案要測試的api。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071302.png?alt=media&token=9886dcd1-a663-44d5-bebe-c1cd8d07ff35"></p>
<p>可以新增 GET 、POST、PUT、DELETE 等不同請求的api進行測試。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071303.png?alt=media&token=9f647251-777b-4e37-861d-83ea5174168d"></p>
<h2 id="post-傳送表單資料"><a href="#post-傳送表單資料" class="headerlink" title="post 傳送表單資料"></a>post 傳送表單資料</h2><p>在postman裡，我們可以模擬前端表單發送資料。api方法選擇 POST，並在body輸入key跟value，其中key就相當於表單的name，value就是name的值，表單方法選擇 <code>x-www-form-urlencoded</code>。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071304.png?alt=media&token=2d840b29-a9b9-4280-8bf1-c2591e4abce9"></p>
<p>如果是向後端傳送 JSON格式，body裡選擇 raw ，格式選擇 JSON</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071305.png?alt=media&token=55812d07-a857-4c5f-b1a2-245ce2518337"></p>
<h2 id="建立環境變數"><a href="#建立環境變數" class="headerlink" title="建立環境變數"></a>建立環境變數</h2><p>在postman裡也可以建立 環境變數，作法如下:</p>
<ol>
<li>點選postman面版 右上角的 眼睛符號 👁</li>
<li>新增變數，並設定預設值 initial value，並儲存</li>
</ol>
<p><img src="https://assets.postman.com/postman-docs/environment-editor-new-v9.13.jpg"></p>
<ol start="3">
<li>用  帶入變數</li>
</ol>
<p><img src="https://assets.postman.com/postman-docs/reference-var-v9.jpg"></p>
]]></content>
      <categories>
        <category>Postman</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(9) express-generator</title>
    <url>/2022/07/14/2022-7-14-1-express-generator/</url>
    <content><![CDATA[<h2 id="安裝產生器"><a href="#安裝產生器" class="headerlink" title="安裝產生器"></a>安裝產生器</h2><p>我們可以用express 產生器快速建立一個nodeJs專案。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install express-generator -g  // 安裝套件</span><br></pre></td></tr></table></figure>

<p>使用 -h 選項來顯示指令選項：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ express -h</span><br><span class="line">  Usage: express [options][dir]</span><br><span class="line">  Options:</span><br><span class="line"></span><br><span class="line">    -h, --help          output usage information</span><br><span class="line">        --version       output the version number</span><br><span class="line">    -e, --ejs           add ejs engine support</span><br><span class="line">        --hbs           add handlebars engine support</span><br><span class="line">        --pug           add pug engine support</span><br><span class="line">    -H, --hogan         add hogan.js engine support</span><br><span class="line">        --no-view       generate without view engine</span><br><span class="line">    -v, --view &lt;engine&gt; add view &lt;engine&gt; support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)</span><br><span class="line">    -c, --css &lt;engine&gt;  add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)</span><br><span class="line">        --git           add .gitignore</span><br><span class="line">    -f, --force         force on non-empty directory</span><br></pre></td></tr></table></figure>

<p>舉例來說，以下是在現行工作目錄中建立一個名為 myapp 的 Express 應用程式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ express --view=pug myapp</span><br><span class="line"></span><br><span class="line">   create : myapp</span><br><span class="line">   create : myapp/package.json</span><br><span class="line">   create : myapp/app.js</span><br><span class="line">   create : myapp/public</span><br><span class="line">   create : myapp/public/javascripts</span><br><span class="line">   create : myapp/public/images</span><br><span class="line">   create : myapp/routes</span><br><span class="line">   create : myapp/routes/index.js</span><br><span class="line">   create : myapp/routes/users.js</span><br><span class="line">   create : myapp/public/stylesheets</span><br><span class="line">   create : myapp/public/stylesheets/style.css</span><br><span class="line">   create : myapp/views</span><br><span class="line">   create : myapp/views/index.pug</span><br><span class="line">   create : myapp/views/layout.pug</span><br><span class="line">   create : myapp/views/error.pug</span><br><span class="line">   create : myapp/bin</span><br><span class="line">   create : myapp/bin/www</span><br></pre></td></tr></table></figure>

<p>然後安裝相依項目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd myapp</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>執行專案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(7) EJS Layout</title>
    <url>/2022/07/13/2022-7-13-2-ejs-layout/</url>
    <content><![CDATA[<h2 id="設定樣板"><a href="#設定樣板" class="headerlink" title="設定樣板"></a>設定樣板</h2><p>我們可以新增一個 layout.ejs 作為樣板頁面使用，layout裡加入 <code>&lt;%- body %&gt;</code> 語法，會將其他ejs檔內容匯入。</p>
<p><img src="https://miro.medium.com/max/1400/1*HCMrT2xXSlDbGgThg-E0FA.png"></p>
<p>在其他ejs上，只須加上一行 <code>&lt;% layout(&#39;樣板檔案名稱&#39;) %&gt;</code>，就可將樣板帶入。</p>
<p><img src="https://miro.medium.com/max/930/1*uI6xlmXBCNH-7o0Ro_NxFg.png"></p>
<h2 id="路由導入參數"><a href="#路由導入參數" class="headerlink" title="路由導入參數"></a>路由導入參數</h2><p><img src="https://miro.medium.com/max/1320/1*n9MNv2VOt634BqoBPeFmTw.png"></p>
<p>在res.render裡面第一個參數是指定ejs樣板，第二個參數則可帶入一個物件，裡頭是要選染的變數資料。</p>
<p><img src="https://miro.medium.com/max/1400/1*MEchuM--HhsuN16kiVua_g.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%= 變數名稱 %&gt;  // 將參數當作純字串渲染</span><br><span class="line">&lt;%- 變數名稱 %&gt;  // 將參數當作html渲染</span><br></pre></td></tr></table></figure>

<h2 id="流程判斷"><a href="#流程判斷" class="headerlink" title="流程判斷"></a>流程判斷</h2><p>在ejs裡，也可加入if else的判斷，假設我有一個show的變數</p>
<p><img src="https://miro.medium.com/max/1090/1*g2OO40_Q_po6b1qZW3PEGw.png"></p>
<p>在ejs裡一樣可以用 &lt;% %&gt;在裏頭寫邏輯判斷</p>
<p><img src="https://miro.medium.com/max/908/1*SJVRG_Rem5uq7Aihpgb_Mw.png"></p>
<p>假設show是true則渲染內容，false則不渲染。</p>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>ejs也可以渲染陣列，假設有一個course陣列如下:</p>
<p><img src="https://miro.medium.com/max/1108/1*eqFjWH00H2lzsN12qE2sTw.png"></p>
<p>在ejs裡一樣可以用 for 語法去渲染陣列出來</p>
<p><img src="https://miro.medium.com/max/1152/1*TWV9_MNkwNTjiJcBaz2Q4Q.png"></p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(8) body-parser</title>
    <url>/2022/07/13/2022-7-13-4-body-parser/</url>
    <content><![CDATA[<h2 id="body-parser-是什麼？"><a href="#body-parser-是什麼？" class="headerlink" title="body-parser 是什麼？"></a>body-parser 是什麼？</h2><p>body-parser 是 Express 經常使用的中介軟體，用於解析請求的資料(body)，比如說：POST 一筆 JSON 格式的資料到我們的 Express App，這時可以透過 body-parser 快速解析這筆資料，以方便取用。下方的圖為 Express 的運作模型，可以看到 body-parser 會先進行資料的解析，才會把解析後的資料傳給其他相關的 middleware 使用。</p>
<p><img src="https://miro.medium.com/max/1400/0*8sAI6T1cahPoR-e6.png"></p>
<h2 id="使用-body-parser"><a href="#使用-body-parser" class="headerlink" title="使用 body-parser"></a>使用 body-parser</h2><p>在express4的版本已經內建body-parser的功能，所以直接使用即可:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());  <span class="comment">// 解析json格式</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)); <span class="comment">// 解析表單資料</span></span><br></pre></td></tr></table></figure>

<h2 id="表單設計"><a href="#表單設計" class="headerlink" title="表單設計"></a>表單設計</h2><p><img src="https://miro.medium.com/max/1196/1*XUZu72p4jof3Tk6jZl6xOg.png"></p>
<p>在Form標籤上，action的路徑代標資料會傳到哪，method則選用post代表將資料送出到後端。</p>
<p><img src="https://miro.medium.com/max/1156/1*xn-Ao4WJiGUQEVJh2uRRDw.png"></p>
<p>在app.js中，可以設計app.post去接收前端表單的資料，第一個參數’&#x2F;searchList’ 也就是前端表單的action路徑。</p>
<p>接收到的req.body會是一個 json格式，key值就是前端input所指定的name。</p>
<h2 id="Redirect-跳轉頁面設定"><a href="#Redirect-跳轉頁面設定" class="headerlink" title="Redirect 跳轉頁面設定"></a>Redirect 跳轉頁面設定</h2><p><img src="https://miro.medium.com/max/1240/1*Ky3EZaP8KjIveIpTp7b7eA.png"></p>
<p>當我們收到前端傳來的表單資料後，並將資料處理完後，就可以用</p>
<p>res.redirect(‘路由’)將網頁導回 指定頁面。</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM 使用教學</title>
    <url>/2022/07/14/2022-7-14-2-npm/</url>
    <content><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/1320/0*Mjnr9OEpIH64xV8m.png"></p>
<h2 id="什麼是npm"><a href="#什麼是npm" class="headerlink" title="什麼是npm?"></a>什麼是npm?</h2><p>npm 是Node Package Manager的縮寫，是一個線上套件庫，讓我們透過指令的方式去安裝需要的檔案到專案裡使用。</p>
<h2 id="安裝npm"><a href="#安裝npm" class="headerlink" title="安裝npm"></a>安裝npm</h2><p>既然npm是node.js的套件管理工具，首先我們就需要到node.js官網下載node.js(選擇 LTS穩定版)。當你安裝nodeJS的同時，NPM也會同時被安裝。詳細安裝方法<a href="https://tim8076.github.io/2022/07/10/2022-07-10-1-nodeJs-install/">參考這裡</a></p>
<h2 id="建立package-json檔案"><a href="#建立package-json檔案" class="headerlink" title="建立package.json檔案"></a>建立package.json檔案</h2><p>我們首先要建立的package.json的檔案在專案裡，目的是為了管理專案內的套件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init  //建立 package.json</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn-images-1.medium.com/max/1320/1*D0qqruBiUbjA5pnzkbL0hQ.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*ioKKlwAHawuNQX0fv1Yrzg.png"></p>
<p>之後當有其他人下載你的專案，想要使用這些套件時，只要輸入 npm install就會將套件全部下載回來。</p>
<h2 id="使用npm安裝套件"><a href="#使用npm安裝套件" class="headerlink" title="使用npm安裝套件"></a>使用npm安裝套件</h2><h3 id="全域安裝"><a href="#全域安裝" class="headerlink" title="全域安裝"></a>全域安裝</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g 套件名稱</span><br></pre></td></tr></table></figure>
<p>套件會被安裝在電腦裡，每個專案資料夾都可使用該套件。通常會安裝到全域的套件是必須在commend line執行的，像是gulp-cli。</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*b_n3XJStqP3dsnAAYawVKw.png"></p>
<h3 id="專案安裝"><a href="#專案安裝" class="headerlink" title="專案安裝"></a>專案安裝</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install 套件名稱</span><br></pre></td></tr></table></figure>
<p>套件只會在該專案資料夾裡被安裝，每個專案資料夾都有不同的套件。</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*fuj2s-0Ryq9p4fzdjSdwSQ.png"></p>
<h3 id="指令參數"><a href="#指令參數" class="headerlink" title="指令參數"></a>指令參數</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install 套件名稱 --save </span><br></pre></td></tr></table></figure>
<p><code>--save</code> 參數是安裝套件時，也同步更新 package.json 裡的資訊，正式產品會用到的套件請用–save。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install 套件名稱 - save-dev</span><br></pre></td></tr></table></figure>

<p>在指令最後加入<code>--save-dev</code>，套件會被安裝到devDependencies，代表此套件是開發過程才會用到，正式產品不會。</p>
<h3 id="mac指令"><a href="#mac指令" class="headerlink" title="mac指令"></a>mac指令</h3><p>如果是mac電腦， 請加上 sudo npm install 來安裝套件，因為mac需要更高的管理者權限來安裝。</p>
<h2 id="node-modules-資料夾"><a href="#node-modules-資料夾" class="headerlink" title="node-modules 資料夾"></a>node-modules 資料夾</h2><p>當你使用 npm 下載套件後，會發現有一個叫做 node-modules的資料夾產生了。這個資料夾的用途是儲存所有你用npm 下載下來的套件。<br>此時你可能會懷疑，為什麼我明明只下載了一個套件，但卻多出一堆我沒看過的套件。</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*urQrPkezqbJUFXLz-Nzr9w.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*6RpLQLKnxZkO9XrE8CAtGA.png"></p>
<p>這是因為我們下載的套件，本身也有一個package.json，它也有依賴其他的套件，所以會一併將依賴的套件載入。所以每個套件都有其他相依套件，npm會將他們全部載回。</p>
<h2 id="npm-套件版本"><a href="#npm-套件版本" class="headerlink" title="npm 套件版本"></a>npm 套件版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm view 套件名稱 versions  // 查看套件版本</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*7MHtEBy6zJJQN25pe8bZeA.png"></p>
<p>套件採用 semantic versioning的版本管理方式，所以我們會看到 1.0.2 類似這種三個數字的版本號顯示，其實每個數字有代表不同的意思。</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*JlYHyz5Pp1oJ_0b4RPDpNw.png"></p>
<ol>
<li>major (主版號) : 當套件做了重大更新，會不相容之前版本，可能讓你的舊版本的程式碼無法，要讓程式碼運作，要將舊版的code修改為新版寫法。</li>
<li>Minor version (次版號) : 做了一些可以向下兼容的功能性新增</li>
<li>Patch version: 修正一些小錯誤。</li>
</ol>
<h2 id="套件更新"><a href="#套件更新" class="headerlink" title="套件更新"></a>套件更新</h2><p>當你用npm intall安裝套件時，npm會自動下載最新版的套件，在你的package.json，可以看到套件版本號。</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*YCOUexX0fPMAWVoWgvXGIw.png"></p>
<p>你可能注意到，每個版本號前多了一個 ^ 符號，這是npm用來避免你將套件更新到下一個主版號，造成你很多程式碼壞掉。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">^<span class="number">1.</span>x.<span class="property">x</span> <span class="comment">//僅更新次版號(Minor version)跟Patch version</span></span><br><span class="line">~<span class="number">1.12</span>.<span class="property">x</span> <span class="comment">// 僅更新Patch version</span></span><br><span class="line"><span class="number">1.12</span><span class="number">.3</span> <span class="comment">// 永遠都安裝 1.12.3 這個指定的版本</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install 套件名稱 @lastest  // 更新到下一個主要版本</span><br></pre></td></tr></table></figure>

<p>但如果你的套件確定要更新到下一個主要版本，如 4.9.0 &#x3D;&gt; 5.0.0， 可以輸入 npm install 套件名稱 @lastest。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install 套件名稱@版本號</span><br></pre></td></tr></table></figure>

<p>指定安裝套件的版本號</p>
<h2 id="package-lock-json檔案"><a href="#package-lock-json檔案" class="headerlink" title="package-lock.json檔案"></a>package-lock.json檔案</h2><p>你可能會注意到，除了package.json以外，還有一個package-lock.json檔案。這個檔案紀錄了你安裝到專案的套件的詳細版本號，目的是為了避免相容性問題。還記得^ 這個符號嗎，當你從github clone一個別人的專案下來，並執行npm install安裝套件時，如果套件本身有做更新，你可能會下載到不同次版號的套件，造成相容性問題，讓你專案出錯。<br>有了 package-lock.json檔案，當你用npm install 下載時，會下載和package-lock.json裡一模一樣的版本號。代表你和原作者會使用同樣版本的套件。</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*DHfU2h1MLDxRn_RPeb9iPA.png"></p>
]]></content>
      <tags>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB (一) 安裝MongoDB與基礎指令</title>
    <url>/2022/07/15/2022-7-15-1-mongodb-install/</url>
    <content><![CDATA[<h2 id="MongoDB是什麼"><a href="#MongoDB是什麼" class="headerlink" title="MongoDB是什麼?"></a>MongoDB是什麼?</h2><p>MongoDB 是一個開源的「NoSQL ( 非關聯性 ) 文件資料庫」，具有以下優點:</p>
<ul>
<li>不須先創立數據表格，且數據格式自由<br>MySQL 須創建表格讓 MySQL 抓取數據，而 MongoDB 不需事先創建表格，也能將數據直接寫入並彈性添加欄位，且欄位的格式較自由，例如:欄位使用數字或是字符串皆可。</li>
<li>可以處理json結構<br>MongoDB 將資料儲存為文件（類似 JSON 物件），以 field-value 為結構成對儲存，value 可以包含值、文件、陣列、文件陣列，讀取欄位內的數值。</li>
</ul>
<h2 id="安裝MongoDB"><a href="#安裝MongoDB" class="headerlink" title="安裝MongoDB"></a>安裝MongoDB</h2><p>到<a href="https://www.mongodb.com/docs/manual/administration/install-community/">此網站</a> 安裝mongoDB</p>
<p><img src="https://miro.medium.com/max/1400/1*FCigXxB4Kis3PZ85fq2xiw.png"></p>
<p>到<a href="https://www.mongodb.com/docs/mongodb-shell/install/">此網站</a> 安裝 mongosh(連線到mongoDB會用到的工具)</p>
<p><img src="https://miro.medium.com/max/1400/1*pLlEilk0USrVukdgBbCKug.png"></p>
<p>安裝好後，打開終端機輸入 mongosh，會顯示目前安裝的mongoDB版本。</p>
<p><img src="https://miro.medium.com/max/1400/1*_2EgvYu5TghFeA6_a7R2hw.png"></p>
<h2 id="基礎指令"><a href="#基礎指令" class="headerlink" title="基礎指令"></a>基礎指令</h2><p><code>show dbs </code>: 顯示目前有的資料庫</p>
<p><img src="https://miro.medium.com/max/604/1*ZY3KbCmUBn6qjpZSbP1UYw.png"></p>
<p><code>use 資料庫名稱</code>: 新增資料庫</p>
<p><img src="https://miro.medium.com/max/640/1*8sW3YtdIxNhjE7ItSA-mCQ.png"></p>
<p><code>show collections</code> : 顯示資料庫裡的collections</p>
<p><code>db.dropDatabase()</code> : 刪除目前資料庫</p>
<p><img src="https://miro.medium.com/max/840/1*bwoP97w5Dk7fMWbJBF8PUA.png"></p>
<p><code>cls</code> : 清除終端機指令</p>
<p><code>exit</code> : 離開mongosh，回到終端機</p>
]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB (二) 新增與尋找</title>
    <url>/2022/07/16/2022-7-15-2-mongodb-find/</url>
    <content><![CDATA[<h2 id="新增單筆資料"><a href="#新增單筆資料" class="headerlink" title="新增單筆資料"></a>新增單筆資料</h2><p><img src="https://miro.medium.com/max/1400/1*gVW--Mwzkr8MGyRqEAiJqQ.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">insertOne</span>() <span class="comment">// 新增單筆資料</span></span><br></pre></td></tr></table></figure>

<p>使用insertOne()語法，在users這個collection裡面新增一筆資料(document)，資料以物件形式加入。</p>
<h2 id="新增多筆資料"><a href="#新增多筆資料" class="headerlink" title="新增多筆資料"></a>新增多筆資料</h2><p><img src="https://miro.medium.com/max/1400/1*iifEjaw0vesRmNJuc55dJA.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">insertMany</span>([])  <span class="comment">// 加入多筆資料，每筆資料為物件格式。</span></span><br></pre></td></tr></table></figure>

<h2 id="尋找資料"><a href="#尋找資料" class="headerlink" title="尋找資料"></a>尋找資料</h2><ol>
<li>尋找所有資料<br><img src="https://miro.medium.com/max/1400/1*u24PrSDc2Y_O9za1Sd5cVg.png"></li>
</ol>
<p>使用 find()，將collection 裡的所有資料(document)列出，可以看到在mongoDB裡，每一筆資料的格式可以不同，也能在物件裡再放物件格式。</p>
<ol start="2">
<li>.find({ 搜尋條件 })， 尋找指定資料</li>
</ol>
<p><img src="https://miro.medium.com/max/1400/1*1y28loJEsDtZ7HFlUP8VDw.png"></p>
<ol start="3">
<li>find({ 搜尋條件 }, { 需要欄位}): 尋找指定資料，並只回傳需要的欄位，1 代表要回傳的欄位, 0代表不要回傳的欄位</li>
</ol>
<p><img src="https://miro.medium.com/max/1400/1*rd21DIRvfdpCTdqRS-l0Dw.png" alt="只回傳 name 跟 age的欄位"></p>
<p><img src="https://miro.medium.com/max/1400/1*__9L7fjSlJVkfnh569nIdw.png" alt="回傳age以外的欄位"></p>
<h2 id="篩選資料"><a href="#篩選資料" class="headerlink" title="篩選資料"></a>篩選資料</h2><ol>
<li>限制搜尋筆數: .limit(筆數)</li>
</ol>
<p><img src="https://miro.medium.com/max/1400/1*fslx_qLREPu8Do0OA-iOSw.png"></p>
<ol start="2">
<li>資料排序: sort( {}):</li>
</ol>
<p>物件key值為要排序的屬性， value為 1(降冪) 或 -1 (升冪)</p>
<p><img src="https://miro.medium.com/max/1400/1*GDXlcgddlVyMXtV_YSXm3A.png"></p>
<ol start="3">
<li>多條件排序</li>
</ol>
<p><img src="https://miro.medium.com/max/1400/1*6l6JUe1cSsM3b1DxQi1mGQ.png"></p>
<p>sort()裡可放多屬性，會依照屬性順序做排序，如上圖會先將age做排序，若age一樣再用name做排序。</p>
<ol start="4">
<li>跳過項目 .skip(跳過數量)</li>
</ol>
<p><img src="https://miro.medium.com/max/1400/1*0G0NEDl6BejHTCqxO5DK7Q.png" alt="掠過第一筆資料"></p>
]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB (三) 進階搜尋</title>
    <url>/2022/07/16/2022-7-17-2-mongodb-filter/</url>
    <content><![CDATA[<h2 id="進階搜尋"><a href="#進階搜尋" class="headerlink" title="進階搜尋"></a>進階搜尋</h2><p>使用進階搜尋，在find({ })裡的物件的值要再使用物件指定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$eq: 搜尋相等的值</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/762/1*z5MdNdvkq8vgc0e2YSaP1g.png" alt="搜尋name等於arod的資料"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$in: 搜尋多筆資料</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/963/1*kBWhGNWTVIlDcXn3sms-Uw.png" alt="搜尋name為 Tom跟Lisa的資料"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$nin: 搜尋多筆不等於的資料</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/963/1*6V7wGbsl4V5OqWhKdQ-K9Q.png" alt="回傳name不等於 Tom跟Lisa的資料"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ne: 搜尋不等於值的所有結果</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/855/1*AHLxw1weSOF3PnMcaqI7uw.png" alt="回傳name不等於john的結果"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$gt: 回傳大於的值</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/766/1*Ew8Ue57MPOcuQxSGD3rRbg.png" alt="回傳age&gt; 13的值"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$gte: 回傳大於等於的值</span><br></pre></td></tr></table></figure>
<p><img src="https://miro.medium.com/max/756/1*Ivi-dmvotfSyyWd7EveN3g.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$lt: 回傳小於的值</span><br></pre></td></tr></table></figure>
<p><img src="https://miro.medium.com/max/769/1*mnWWPxKd6nSCiOiRbieExw.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$lte: 回傳小於等於的值</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/824/1*0HjXji2L2aFrS4IBvwmeKw.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$exits: 回傳欄位存在的值，true是存在，false是不存在</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/875/1*KAN637IjOrmlSVPrBlEMsg.png" alt="回傳有age欄位的值"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$not: 回傳不符合條件的資料</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/963/1*2k8b8OlsJcrAZrHudnosBg.png" alt="回傳 age不是小於等於40的資料"></p>
<h2 id="多重尋找"><a href="#多重尋找" class="headerlink" title="多重尋找"></a>多重尋找</h2><p><img src="https://miro.medium.com/max/963/1*VvL-74sVwh2oo8hz4JZZtA.png" alt="尋找 age &gt;=15且 &lt;=40 且 name為sara的資料"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$and: 尋找條件都符合的資料</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/963/1*rteWbRZYyhxGxvg8NZb5UA.png" alt="尋找 age =19且 name為sara的資料"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$or: 尋找條件之一符合的資料</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/963/1*AozlkrEyLbEUhTafgXYNGw.png" alt="回傳age≤40 或 name為john的資料"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$expr : 後方可放入表達式，欄位名稱要加上 $</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/963/1*-nFA_bUG5XsbTkx7GOXYTA.png" alt="回傳 $debt &gt; $balance的資料"></p>
<h2 id="深層尋找"><a href="#深層尋找" class="headerlink" title="深層尋找"></a>深層尋找</h2><p>如果資料裡還有物件，屬於巢狀結構的話，使用.的方式尋找</p>
<p><img src="https://miro.medium.com/max/963/1*bZSPltOMgAxaj5xEnnSqKw.png" alt="回傳 address裡street的值為 978 st的值"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$findOne: 回傳找到的第一筆資料</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/803/1*v1g2nEa4VAjP4GQQVKqd2w.png" alt="回傳age&gt;10的第一筆資料"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$countDocument: 計算資料筆數</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/963/1*52BUktA6BLIWuFDebslMkw.png" alt="回傳age≤40的筆數"></p>
]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB (四) 更新與刪除</title>
    <url>/2022/07/17/2022-7-17-3-mongodb-update/</url>
    <content><![CDATA[<h2 id="資料更新"><a href="#資料更新" class="headerlink" title="資料更新"></a>資料更新</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updateOne(&#123;被更新的資料&#125;, &#123;更新的值&#125;)  // 更新一筆資料</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1400/1*ug2VR90bERK_zuhJmFfx8g.png" alt="使用$set設定新的值"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inc: 加上指定的值</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1400/1*W51QCzgqqGCkg1kerrN5zQ.png" alt="inc: 加上指定的值"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename: 更改資料的key值</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1400/1*HY-saJY9Gpey46CwgZ5oUg.png" alt="將name欄位改為lora欄位"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unset: 移除指定欄位，欄位值設為&quot; &quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1400/1*-Mua6NP_A-PuJvpEEL3OaA.png" alt="移除age欄位"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push: 新增值到陣列裡</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1400/1*cmlaV3bI4wBQIEHXQLfygw.png" alt="新增swimming到hobbies陣列裡"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pull: 移除陣列裡的值</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1400/1*soqRd9QGuXDnt0fV-OWsMQ.png" alt="移除陣列裡Running的值"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updateMan: 更新多筆資料</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1400/1*sRe0B1aVt_Pv46R0II2ifA.png" alt="將所有有address的欄位取消address欄位"></p>
<h2 id="取代資料"><a href="#取代資料" class="headerlink" title="取代資料"></a>取代資料</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">replaceOne: 將原本物件刪除後，取代成新的物件</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1400/1*yjbgM_WfQTt2c7DGmbVPCQ.png" alt="將原本name為lin的物件刪除後，更新成name為linda的物件"></p>
<h2 id="刪除資料"><a href="#刪除資料" class="headerlink" title="刪除資料"></a>刪除資料</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deleteOne: 將指定物件刪除</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/1180/1*BcicLblVY6EVtI7JwnPe9g.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deleteMany: 刪除多筆資料</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB Atlas(二) cluster</title>
    <url>/2022/07/17/2022-7-17-5-mongodb-atlas-2/</url>
    <content><![CDATA[<p>建立好新的資料庫後，先設定 Database Access ，也就是誰能讀取這個資料庫。</p>
<p><img src="https://miro.medium.com/max/963/1*F2bjbKiANh6uFsQp1tpkSA.png"></p>
<p>點選 Add New Database User， 並設定user的帳號密碼</p>
<p><img src="https://miro.medium.com/max/963/1*m_dIUQS6di3FJapbiGozvg.png"></p>
<p>再來點擊左側 Network Access ，設定能讀取資料庫的ip位置</p>
<p><img src="https://miro.medium.com/max/963/1*mtkdr8aabVXwwI6IsatThw.png"></p>
<p>點選 allow access from anywhere，</p>
<p><img src="https://miro.medium.com/max/963/1*Uqnh7SBIp_tYBAUm1pYG6g.png"></p>
<p>再來點擊左側 database，再點選connect，來連接資料庫</p>
<p><img src="https://miro.medium.com/max/963/1*121AdSPsVRfepmRDFuk6uA.png"></p>
<p>點選第二個 connect your application</p>
<p><img src="https://miro.medium.com/max/963/1*ao4jvrYVDTBkrjJbSIJFCQ.png"></p>
<p>選擇 node版本 3.6以後</p>
<p><img src="https://miro.medium.com/max/963/1*_SUU-2aT2xZg0Es9UyvL8w.png"></p>
<p>複製程式碼到我們的node js專案</p>
<p><img src="https://miro.medium.com/max/963/1*57tPw1zIMwFn-utOPvOcQg.png"></p>
<p>在專案裡新增 db資料夾，並新增 connect.js</p>
<p><img src="https://miro.medium.com/max/572/1*NqGtYaYQtlb0WRYAo-FZfw.png"></p>
<p>將剛才mongodb複製的程式碼貼到js檔裡，存成字串。</p>
<p><img src="https://miro.medium.com/max/963/1*kJYiQqrSShd0_KFCJ7ydmw.png"></p>
<h2 id="建立collection"><a href="#建立collection" class="headerlink" title="建立collection"></a>建立collection</h2><p>再來建立collection，點選 browser collection</p>
<p><img src="https://miro.medium.com/max/963/1*b7CtG2I0gJMQyiMJF6HQog.png"></p>
<p>點新增資料</p>
<p><img src="https://miro.medium.com/max/963/1*jpcAAKfrTjYuQF-E53gd_Q.png"></p>
<p>輸入資料庫名稱</p>
<p><img src="https://miro.medium.com/max/648/1*qBIe4FrsTM63sUQMKusSzQ.png"></p>
<p>在database中，可以創建不同的collections ，裡面是不同的資料集。如下圖我創建了 products跟 users兩個collection</p>
<p><img src="https://miro.medium.com/max/1400/1*KaQPsHVvi9EDSRBM_l0dyQ.png"></p>
<p>點選右邊 建立 document，可以建立collection 裡的資料</p>
<p><img src="https://miro.medium.com/max/794/1*blQsTCUmepOwQsf3qOSAcw.png"></p>
<p><img src="https://miro.medium.com/max/1400/1*_KsCSl0FYeKEMLiZkaAHTA.png"></p>
]]></content>
      <tags>
        <tag>MongoDB Atlas</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB Atlas(一) 申請帳號</title>
    <url>/2022/07/17/2022-7-17-4-mongodb-altas-1/</url>
    <content><![CDATA[<p>MongoDB Atlas是MongoDB公司的雲端資料庫服務，使用流程如下:</p>
<h2 id="申請MongoDB-Atlas帳號"><a href="#申請MongoDB-Atlas帳號" class="headerlink" title="申請MongoDB Atlas帳號:"></a>申請MongoDB Atlas帳號:</h2><p>首先來到<a href="https://www.mongodb.com/docs/atlas/getting-started/">教學文件</a>，選擇 part 1 建立 Atlas 帳號</p>
<p><img src="https://miro.medium.com/max/963/1*Hjhk1iYTMWb_GCy_K4NBXw.png"></p>
<p>點選 Navigate to MongoDB Atlas <a href="https://account.mongodb.com/account/login">login page</a>，建立帳號，可選擇以 google帳號登入</p>
<p><img src="https://miro.medium.com/max/963/1*Sgx4vYxwmNQKpvPLWpgncw.png"></p>
<h2 id="登入後，選擇-免費方案"><a href="#登入後，選擇-免費方案" class="headerlink" title="登入後，選擇 免費方案"></a>登入後，選擇 免費方案</h2><p><img src="https://miro.medium.com/max/963/1*zlpW3hRL4mjLRzqOmpwDZg.png"></p>
<h2 id="建立新的-cluster，可以使用預設選項"><a href="#建立新的-cluster，可以使用預設選項" class="headerlink" title="建立新的 cluster，可以使用預設選項"></a>建立新的 cluster，可以使用預設選項</h2><p><img src="https://miro.medium.com/max/963/1*BdPWvYS1aBgAffyGUDi4hQ.png"></p>
]]></content>
      <tags>
        <tag>MongoDB Atlas</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(11) dotenv 套件</title>
    <url>/2022/07/17/2022-7-17-7-dotenv/</url>
    <content><![CDATA[<h2 id="什麼是dotenv"><a href="#什麼是dotenv" class="headerlink" title="什麼是dotenv"></a>什麼是dotenv</h2><p>一般來說不會把資料庫連線帳號、密碼等相關訊息寫在程式碼裡面，通常寫在一個檔案裡面。而在 node.js 的專案裡，我們可以將機密資訊儲存在 .env 檔中來管理。這支.env 檔案不會加入版本控制，也就是 git 裡面。</p>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install dotenv --save  // 安裝套件</span><br></pre></td></tr></table></figure>

<h2 id="載入套件"><a href="#載入套件" class="headerlink" title="載入套件"></a>載入套件</h2><p>在express的專案中載入套件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>();</span><br></pre></td></tr></table></figure>

<h2 id="新增-env-檔"><a href="#新增-env-檔" class="headerlink" title="新增 .env 檔"></a>新增 .env 檔</h2><p>在專案根目錄新增 .env 檔</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071702.png?alt=media&token=7a875b5c-01fa-4eb2-9b41-795559f47e02"></p>
<h2 id="新增資料"><a href="#新增資料" class="headerlink" title="新增資料"></a>新增資料</h2><p>在 .env檔裡可以儲存資訊，用<code>變數=值</code>的方式儲存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MYDATA=123456</span><br></pre></td></tr></table></figure>

<h2 id="讀取資料"><a href="#讀取資料" class="headerlink" title="讀取資料"></a>讀取資料</h2><p>.env檔的資料建好後，可以來讀取讀，語法是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">process.env.變數名稱</span><br></pre></td></tr></table></figure>

<h2 id="heroku-環境變數設定"><a href="#heroku-環境變數設定" class="headerlink" title="heroku 環境變數設定"></a>heroku 環境變數設定</h2><p>當後端程式要放到 Heroku 等雲端主機時，.env 裡的資訊可以寫在:</p>
<ol>
<li>到 heroku 專案的 setting，點 reveal config vars</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*MONogEC0PBaChNORvjGmpQ.png"></p>
<ol start="2">
<li>輸入 .env 檔案裡資料的 key 跟 value</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*pIvETgX6mHwtCAz4AmGIKg.png"></p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongoose (1) 安裝並整合到專案</title>
    <url>/2022/07/17/2022-7-17-6-mongoose-1/</url>
    <content><![CDATA[<h2 id="Mongoose-是什麼"><a href="#Mongoose-是什麼" class="headerlink" title="Mongoose 是什麼?"></a>Mongoose 是什麼?</h2><p>Mongoose 是 MongoDB 的 ODM（Object Data Modeling） 套件，可以讓我們更方便處理 CRUD。透過 mongoose 的使用，我們可以更像在操作 relational database。</p>
<h2 id="安裝-mongoose"><a href="#安裝-mongoose" class="headerlink" title="安裝 mongoose"></a>安裝 mongoose</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save mongoose</span><br></pre></td></tr></table></figure>

<p>安裝好後到Express專案內新增 db 資料夾，資料夾裡新增 connect.js，這隻js裡會放連線到資料庫用的程式。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022071701.png?alt=media&token=8e3d4509-43ec-400a-9683-075f4e06ada7"></p>
<p>在 connect.js 裡載入mongoose，將 mongoose方法包在 connectDB函式裡並匯出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">connectDB</span> = (<span class="params">url</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> mongoose.<span class="title function_">connect</span>(url, &#123;</span><br><span class="line">    <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">useCreateIndex</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">useFindAndModify</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = connectDB</span><br></pre></td></tr></table></figure>

<p>在app.js裡 載入 connectDB方法，為了讓 我們的專案在資料庫連接成功後再啟動，使用 await語法等待 connectDB()成功後，再去做app.listen()。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>();</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connectDB = <span class="built_in">require</span>(<span class="string">&#x27;./db/connect&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">start</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">connectDB</span>(process.<span class="property">env</span>.<span class="property">MONGO_URL</span>);</span><br><span class="line">    app.<span class="title function_">listen</span>(port, <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server is listening port <span class="subst">$&#123;port&#125;</span>`</span>));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">start</span>();</span><br></pre></td></tr></table></figure>

<p>上面連線的port我們會存在 .env 檔裡，再用 <code>process.env.變數</code>的方式載入，這麼做是為了將機密資訊都放在 .env檔裡管理， .env檔並不會上傳到github上，因此相對而言是安全的。</p>
]]></content>
      <tags>
        <tag>Mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongoose (2) 建立model與schema</title>
    <url>/2022/07/17/2022-7-17-8-mongoose-model/</url>
    <content><![CDATA[<h2 id="Mongoose-觀念與名詞"><a href="#Mongoose-觀念與名詞" class="headerlink" title="Mongoose 觀念與名詞"></a>Mongoose 觀念與名詞</h2><p>Mongoose 提供了 schema-based 的解決方案讓我們直接操作資料，在透過 Mongoose 操作資料庫時，有幾個名詞要先有概念:</p>
<ul>
<li>Schema: 存資料庫模型的檔案</li>
<li>Model: 由 Schema 當參數產生的 instance 可以用來操作資料庫</li>
<li>collection: 在 MongoDB 中的表</li>
</ul>
<h2 id="Mongoose-Schema-設計"><a href="#Mongoose-Schema-設計" class="headerlink" title="Mongoose Schema 設計"></a>Mongoose Schema 設計</h2><p>要使用 Mongoose 操作的第一步就是要從定義 Schema 開始，定義完成後 Schema 會自動對應到 MongoDB 中的一個 collection，另外因為不像傳統資料庫那樣有 join 的概念，所以拿資料的時候可以依照我們的使用情境去設計，像是以撈取為主的話就可以透過雙向參照的設計去加速，詳細可以參考MongoDB Schema 設計指南。</p>
<h2 id="建立-Schema"><a href="#建立-Schema" class="headerlink" title="建立 Schema"></a>建立 Schema</h2><p><img src="https://miro.medium.com/max/842/1*kzEelgX6y-K3JF6dTMFElA.png"></p>
<p><img src="https://miro.medium.com/max/1400/1*DkN-K-S-ONv16m1V4wFJAQ.png"></p>
<p>在model資料夾裡，建立js檔，並利用 monggose.Schema({})，來建立所有document的結構。只有在 Schema 裡建立的屬性如 name，才會傳入mogodb資料庫。</p>
<p>建立好 Schema 結構， 在將schema建立成一個model實體 可以用來操作資料庫(crud)。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Product&#x27;</span>, productSchema);</span><br></pre></td></tr></table></figure>

<h2 id="schema-拆分"><a href="#schema-拆分" class="headerlink" title="schema 拆分"></a>schema 拆分</h2><p><img src="https://miro.medium.com/max/1376/1*MTktN8cHSR_vVoz5N_yWhA.png"></p>
<p>當要定義的物件過於複雜時，可以另外拆分一個schema來定義，如上圖address的值是定義在 addressSchema裡。</p>
<h2 id="schema-驗證"><a href="#schema-驗證" class="headerlink" title="schema 驗證"></a>schema 驗證</h2><p><img src="https://miro.medium.com/max/1400/1*Tzl9Vg6A_Z4nPDE3KumAHw.png"></p>
<p>schema 裡資料格式的也可做驗證，可用方法:</p>
<ul>
<li>type: String | Number | Boolean | Date  &#x2F;&#x2F; 指定屬性的型別 </li>
<li>required: true | false  &#x2F;&#x2F;是否必填</li>
<li>trim: true | false  &#x2F;&#x2F;是否去頭尾空白</li>
<li>maxlength: 最多字數。</li>
<li>min: 最小值。</li>
<li>max: 最大值。</li>
<li>default: 預設值。</li>
<li>lowercase: true | false  &#x2F;&#x2F;是否要小寫</li>
<li>uppercase: true | false  &#x2F;&#x2F;是否要大寫</li>
<li>immutable:  true | false  &#x2F;&#x2F;是否可修改</li>
</ul>
<p>補充日期預設方法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">createAt</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Date</span>,</span><br><span class="line">  <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="title class_">Date</span>.<span class="title function_">now</span>(), <span class="comment">// 每次建立物件時，會給新的日期。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>validate: 自訂驗證函式(validator)，並可回傳message</p>
<p><img src="https://miro.medium.com/max/1400/1*A_uOjCJwU-B83LJsIYYnpw.png"></p>
<h2 id="schema-加上方法"><a href="#schema-加上方法" class="headerlink" title="schema 加上方法"></a>schema 加上方法</h2><p>我們可以在 schema加上方法，讓每個new出來的document使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">person.<span class="property">methods</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi My name is <span class="subst">$&#123;Kyle&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法建立在schema可以在每個實體使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="keyword">await</span> person.<span class="title function_">find</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Kyle&#x27;</span> &#125;); </span><br><span class="line">person.<span class="title function_">sayHi</span>(); <span class="comment">// Hi My name is Kyle</span></span><br></pre></td></tr></table></figure>
<h2 id="model操作資料"><a href="#model操作資料" class="headerlink" title="model操作資料"></a>model操作資料</h2><p><img src="https://miro.medium.com/max/1362/1*we3LBZ7EKHPeN3mNiXkhXA.png"></p>
<p>在我們controllers裡的js檔裡，可以將剛才export的model引入。</p>
<p><img src="https://miro.medium.com/max/1164/1*RwDqw3zkTCV5XXHAdgOzLw.png"></p>
<p>上面是post方法對應的函式，可以使用 Task.create()方法，將使用者傳來的資料，建立成一筆 document。詳細的Model操作方法下一章節介紹。</p>
]]></content>
      <tags>
        <tag>Mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongoose (4) middleware介紹</title>
    <url>/2022/07/20/2022-7-20-1-mongoose-middleware/</url>
    <content><![CDATA[<h2 id="使用-middleware"><a href="#使用-middleware" class="headerlink" title="使用 middleware"></a>使用 middleware</h2><p>在mongoose裡，我們也可以使用middleware函式，middlware作用在schema層級，分為  pre and post 兩種，以下介紹使用方法。</p>
<h2 id="使用-pre-函示"><a href="#使用-pre-函示" class="headerlink" title="使用 pre 函示"></a>使用 pre 函示</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">UserSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="title class_">String</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">UserSchema</span>.<span class="title function_">pre</span>(<span class="string">&#x27;save&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> salt = <span class="keyword">await</span> bcrypt.<span class="title function_">genSalt</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">password</span> = <span class="keyword">await</span> bcrypt.<span class="title function_">hash</span>(<span class="variable language_">this</span>.<span class="property">password</span>, salt);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>document middleware可以被綁定不同的函式如下:</p>
<ul>
<li>validate</li>
<li>save</li>
<li>remove</li>
<li>updateOne</li>
<li>deleteOne</li>
</ul>
<p>如上例 ， 當UserSchema被儲存 <code>.save()</code> 時，會先觸發middleware將password加密。</p>
<h2 id="範例-連帶移除資料"><a href="#範例-連帶移除資料" class="headerlink" title="範例 連帶移除資料"></a>範例 連帶移除資料</h2><p>假設我們在資料庫想刪除一筆 product 資料，並連帶刪除所有該 product 的review資料，可以先用 .remove() 刪除該product</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">deleteProduct</span> = <span class="keyword">async</span> (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> productId = req.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">  <span class="keyword">const</span> product = <span class="keyword">await</span> <span class="title class_">Product</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">_id</span>: productId &#125;);</span><br><span class="line">  <span class="keyword">await</span> product.<span class="title function_">remove</span>();</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="title class_">StatusCodes</span>.<span class="property">OK</span>).<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;success product removed&#x27;</span> &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在 product的 schema 上用pre hook來刪除連帶的 reviews資料</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ProductSchema</span>.<span class="title function_">pre</span>(<span class="string">&#x27;remove&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">next</span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">model</span>(<span class="string">&#x27;Review&#x27;</span>).<span class="title function_">deleteMany</span>(&#123; <span class="attr">product</span>: <span class="variable language_">this</span>.<span class="property">_id</span> &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>await product.remove() 會觸發 schema上的 pre hook，先用 this.model(‘Review’)連到 reivew model，在將所有 包含product id的review刪除。</p>
]]></content>
      <tags>
        <tag>Express</tag>
        <tag>Mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongoose (3) model方法介紹</title>
    <url>/2022/07/17/2022-7-17-9-mongoose-model-2/</url>
    <content><![CDATA[<h2 id="搜尋資料"><a href="#搜尋資料" class="headerlink" title="搜尋資料"></a>搜尋資料</h2><h3 id="搜尋全部資料"><a href="#搜尋全部資料" class="headerlink" title="搜尋全部資料"></a>搜尋全部資料</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models/person&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">await</span> <span class="title class_">Person</span>.<span class="title function_">find</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>使用 find 方法傳入空物件，會回傳所有資料。因為find會回傳 .then() ，所以可以用 await 來接收結果。</p>
<h3 id="搜尋特定資料"><a href="#搜尋特定資料" class="headerlink" title="搜尋特定資料"></a>搜尋特定資料</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.</span><br><span class="line">  <span class="title function_">find</span>(&#123;</span><br><span class="line">    <span class="attr">occupation</span>: <span class="regexp">/host/</span>,</span><br><span class="line">    <span class="string">&#x27;name.last&#x27;</span>: <span class="string">&#x27;Ghost&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: &#123; <span class="attr">$gt</span>: <span class="number">17</span>, <span class="attr">$lt</span>: <span class="number">66</span> &#125;,  <span class="comment">// 年齡 &gt;17 &amp;&amp; &lt;66</span></span><br><span class="line">    <span class="attr">likes</span>: &#123; <span class="attr">$in</span>: [<span class="string">&#x27;vaporizing&#x27;</span>, <span class="string">&#x27;talking&#x27;</span>] &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>如果要對值進行篩選，可以在後方加入篩選語法，語法和 <a href="https://tim8076.github.io/2022/07/16/2022-7-17-2-mongodb-filter/">mongodb</a> 是一樣的。</p>
<h3 id="限制資料比數"><a href="#限制資料比數" class="headerlink" title="限制資料比數"></a>限制資料比數</h3><p>想限制資料筆數，可以加上 .limit</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="title function_">find</span>(&#123;&#125;).<span class="title function_">limit</span>(<span class="number">10</span>) <span class="comment">// 回傳前10筆資料</span></span><br></pre></td></tr></table></figure>

<h3 id="資料排序"><a href="#資料排序" class="headerlink" title="資料排序"></a>資料排序</h3><p>要對特定值做排序，用 sort方法，。加上 - 代表降冪排序，反之則正向排序。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="title function_">find</span>(&#123;&#125;).<span class="title function_">sort</span>(<span class="string">&#x27;name -occupation&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="回傳特定的key值"><a href="#回傳特定的key值" class="headerlink" title="回傳特定的key值"></a>回傳特定的key值</h3><p>如果只想回傳特定的key值，用 select()。 加上 - 代表降冪排序，反之則正向排序。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="title function_">find</span>(&#123;&#125;).<span class="title function_">select</span>(<span class="string">&#x27;name -gender&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="新增資料"><a href="#新增資料" class="headerlink" title="新增資料"></a>新增資料</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models/person&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Kyle&#x27;</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;);</span><br><span class="line"><span class="keyword">await</span> person.<span class="title function_">save</span>();</span><br></pre></td></tr></table></figure>
<p>用mongoose新增一筆資料很簡單，假設有一個 Person 的model，只要用 new Person({})帶入新增的值即可建立資料，再用.save()將資料存進資料庫，因為.save()是 async function ，所以記得加上 await。</p>
<h2 id="修改資料"><a href="#修改資料" class="headerlink" title="修改資料"></a>修改資料</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models/person&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Kyle&#x27;</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;);</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Sally&#x27;</span>;</span><br><span class="line"><span class="keyword">await</span> person.<span class="title function_">save</span>();</span><br></pre></td></tr></table></figure>

<p>修改資料可以直接將物件的值賦予新的值，再用 .save() 存入資料庫即可。如上我們將 Kyle 改為 Sally。</p>
<h2 id="刪除資料"><a href="#刪除資料" class="headerlink" title="刪除資料"></a>刪除資料</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models/person&#x27;</span>);</span><br><span class="line"><span class="keyword">await</span> <span class="title class_">Person</span>.<span class="title function_">deleteOne</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Kyle&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>deleteOne 會刪除符合條件的第一筆資料。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models/person&#x27;</span>);</span><br><span class="line"><span class="keyword">await</span> <span class="title class_">Person</span>.<span class="title function_">deleteMany</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Kyle&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>deleteMany 刪除所有符合條件的資料。</p>
]]></content>
      <tags>
        <tag>Mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(10) async-errors 套件</title>
    <url>/2022/07/16/2022-7-17-async-error/</url>
    <content><![CDATA[<h2 id="async-errors-套件"><a href="#async-errors-套件" class="headerlink" title="async-errors 套件"></a>async-errors 套件</h2><p>以往在使用async await 語法時，時常會用try catch處理非同步事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在express專案裡可以載入 async-errors 套件來取代try catch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install express-async-errors --save</span><br></pre></td></tr></table></figure>

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>首先在 app.js 裡載入套件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;express-async-errors&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>然後當有錯誤發生時，在router函式裡可以直接丟出Error錯誤</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getAllProductsStatic</span> = <span class="keyword">async</span> (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;testing async errors&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;Product testing route&#x27;</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在app.js的最後則可用一個處理錯誤的middleware來承接錯誤</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (err, req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;Something went wrong, please try again&#x27;</span> &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT 介紹</title>
    <url>/2022/07/18/2022-7-18-1-jwt/</url>
    <content><![CDATA[<h2 id="JWT-運作原理"><a href="#JWT-運作原理" class="headerlink" title="JWT 運作原理"></a>JWT 運作原理</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*_B02lJ2aSxKt4bCh7Q1-ZA.png"></p>
<p>當使用者傳送post request 到伺服器時，伺服器會產生Json Web Token用來加密使用者傳來的資料，並使用 secrest key來加密。<br>加密完後就會將JWT回傳給瀏覽器，瀏覽器可以選擇各種儲存token的方式例如cookie。<br>當使用者再次發出request請求時，會在header附帶上JWT token，伺服器收到token後會使用 同樣secrest key來進行解密，確認token的資料是否一樣。確認token沒問題後，就可從token中取得user的資料，例如帳密，再回傳給前端。</p>
<h2 id="和session的差異"><a href="#和session的差異" class="headerlink" title="和session的差異"></a>和session的差異</h2><p>session運作的原理和jwt類似，但主要差別是，session會儲存user資料在伺服器，伺服器利用session id來尋找user資料。<br>jwt則將使用者資料存在token裡，token則會被保存在前端，伺服器不用儲存任何資料。也就是說，可以使用同樣的token在不同的伺服器上，不像session可能遇到不同伺服器有不同session而無法登入的情況。</p>
<h2 id="JWT-加密過程"><a href="#JWT-加密過程" class="headerlink" title="JWT 加密過程"></a>JWT 加密過程</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*HptXxES6PVfkrYYNNAGERw.png"></p>
<p>左欄是加密後的JWT TOKEN，右欄則是解密後的token，解密後的token分為三部分:</p>
<ul>
<li>HEADER:  包含用來加密、解密的演算法。</li>
<li>PAYLOAD: 儲存在token裡的資料。</li>
<li>VERIFY SIGNATURE: 用來驗證token是否被使用者更改。</li>
</ul>
<p>使用base64URL來加密或解密HEADER跟PAYLOAD，並使用secret Key來加解密，也就是左欄紅色跟紫色的密碼。<br>實際流程: 當伺服器收到jwt token後，會將左欄紅色跟紫色的密碼，用指定的演算法(上圖是HS256)來hash，並確認hash後的值是否等於最後一段藍色的密碼。</p>
<h2 id="實戰加密流程"><a href="#實戰加密流程" class="headerlink" title="實戰加密流程"></a>實戰加密流程</h2><h3 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h3><p>在node.js專案中，先下載套件 jsonwebtoken</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save jsonwebtoken </span><br></pre></td></tr></table></figure>

<p>在 controller 裡引入jwt</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="後端加密"><a href="#後端加密" class="headerlink" title="後端加密"></a>後端加密</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDate</span>();</span><br><span class="line">  <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(&#123; id, username &#125;, process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>, &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;30d&#x27;</span> &#125;)</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;user created&#x27;</span>,</span><br><span class="line">    token,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>jwt.sign()</code> 來加密，加密完後將token回傳給前端。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jwt.sign(&#123; payload &#125;, 金鑰, &#123; expiresIn : 過期時間&#125; )</span><br></pre></td></tr></table></figure>

<ul>
<li>第一個參數為 payload: 使用者和相關的資訊都可以放置其中(ex: id、name)。</li>
<li>第二個是金鑰字串，通常會是複雜的字串存在.env檔裡</li>
<li>第三個可傳入 token 過期時間</li>
</ul>
<p>不要將隱私資訊存放在 Payload 當中， Payload 和 Header 被轉換成 Base64 編碼後，能夠被輕易的轉換回來<br>因此不應該把如用戶密碼等重要資料存取在 Payload 當中</p>
<h3 id="前端接收token"><a href="#前端接收token" class="headerlink" title="前端接收token"></a>前端接收token</h3><p>前端發出網路請求後成功後(例如登入成功)，會收到後端回傳的token，前端可以先存入 localStorage</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/v1/login&#x27;</span>, &#123; username, password &#125;)</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, data.<span class="property">token</span>)</span><br></pre></td></tr></table></figure>

<p>當再次發出的請求是需要驗證時，需要傳token給後端驗證。在HEADER中使用Authorization並帶入存取的Token</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/v1/dashboard&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="title class_">Authorization</span>: <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="後端接收token"><a href="#後端接收token" class="headerlink" title="後端接收token"></a>後端接收token</h3><p>當後端收到前端帶有token的請求後，可以從 <code>req.headers.authorization</code> 裡收到token的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  authorization: &#x27;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTgsInVzZXJuYW1lIjoicGV0ZXIiLCJpYXQiOjE2NTgxMjk2OTQsImV4cCI6MTY2MDcyMTY5NH0.4RNbP5jIx9GU1-makuVaxhU3g-cSbXhRJWynitjhu3Y&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用split方法取得 Bearer 後面的token字串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> authHeader = req.<span class="property">headers</span>.<span class="property">authorization</span>;</span><br><span class="line"><span class="keyword">if</span> (!authHeader || !authHeader.<span class="title function_">startsWith</span>(<span class="string">&#x27;Bearer &#x27;</span>)) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomAPIError</span>(<span class="string">&#x27;No token provided&#x27;</span>, <span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> token = authHeader.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p>取得 token字串後，可以用 <code>jwt.verify(token, 金鑰)</code> 來解析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> decoded = jwt.<span class="title function_">verify</span>(token, process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>);</span><br></pre></td></tr></table></figure>

<p>當token解析符合金鑰字串時，就會將當初加密的物件(payload)解析出來:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;tim&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













]]></content>
      <tags>
        <tag>Node.js</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(13) 安全處理套件</title>
    <url>/2022/07/22/2022-7-22-1-express-safe-plugins/</url>
    <content><![CDATA[<p>這篇介紹幾個常用的 安全性套件如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install helmet --save   // helmet藉由設定多個http-header來保護app</span><br><span class="line">npm install cors --save     // cors允許跨域的網路請求</span><br><span class="line">npm install xss-clean --save  // 防止xss攻擊</span><br><span class="line">npm install express-rate-limit  // 防止太頻繁的請求</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn-images-1.medium.com/max/1320/1*iiglV8mBgWLo9fmYK2f2kQ.png" alt="載入套件"></p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*PXV7BHiBXv1zxakGrrVfSg.png" alt="使用套件"></p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>Express實戰系列(1) 製作註冊登入功能</title>
    <url>/2022/07/20/2022-7-20-3-express-login/</url>
    <content><![CDATA[<h2 id="環境簡介"><a href="#環境簡介" class="headerlink" title="環境簡介"></a>環境簡介</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- controllers  </span><br><span class="line">  - auth.js</span><br><span class="line">- model</span><br><span class="line">  - User.js</span><br><span class="line">- route    </span><br><span class="line">  - auth.js</span><br><span class="line">- middleware</span><br><span class="line">  - authentication</span><br></pre></td></tr></table></figure>

<p>這次要製作註冊登入功能，route 和 controllers 資料夾理會有 auth的 路由(route) 和 函式(controller)，另外有建立User的model。本次使用 express搭配 mongoDB製作。</p>
<h2 id="建立User的schema"><a href="#建立User的schema" class="headerlink" title="建立User的schema"></a>建立User的schema</h2><p>首先在 model裡的 User.js建立user的 schema，也就是每筆使用者的資料格式，包括用戶姓名、email、password等等。會用到mongoose提供的驗證方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">UserSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: [<span class="literal">true</span>, <span class="string">&#x27;Please provide name&#x27;</span>],</span><br><span class="line">    <span class="attr">maxlength</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="attr">minlength</span>: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">email</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: [<span class="literal">true</span>, <span class="string">&#x27;Please provide email&#x27;</span>],</span><br><span class="line">    <span class="attr">match</span>: [</span><br><span class="line">      <span class="regexp">/^(([^&lt;&gt;()[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/</span>,</span><br><span class="line">      <span class="string">&#x27;Please provide a valid email&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">unique</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">password</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: [<span class="literal">true</span>, <span class="string">&#x27;Please provide password&#x27;</span>],</span><br><span class="line">    <span class="attr">minlength</span>: <span class="number">6</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在user的schema裡可以新增加密的方法，使用 bcrypt套件來對password加密，因為希望password加密後再存入資料庫。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserSchema</span>.<span class="title function_">pre</span>(<span class="string">&#x27;save&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> salt = <span class="keyword">await</span> bcrypt.<span class="title function_">genSalt</span>(<span class="number">10</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">password</span> = <span class="keyword">await</span> bcrypt.<span class="title function_">hash</span>(<span class="variable language_">this</span>.<span class="property">password</span>, salt)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="註冊路由"><a href="#註冊路由" class="headerlink" title="註冊路由"></a>註冊路由</h2><p>註冊使用者的 controller 函式如下: </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models/User&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">StatusCodes</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-status-codes&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">BadRequestError</span>, <span class="title class_">UnauthenticatedError</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../errors&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用者註冊</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">register</span> = <span class="keyword">async</span> (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>(&#123; ...req.<span class="property">body</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> token = user.<span class="title function_">createJWT</span>()</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="title class_">StatusCodes</span>.<span class="property">CREATED</span>).<span class="title function_">json</span>(&#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: user.<span class="property">name</span> &#125;, token &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>製作註冊功能時，使用者在前端會傳入 name 跟 password 的資料，資料會以物件方式存在 req.body裡</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;王曉明&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當路由收到資料後，用 <code>.create()</code>建立新的使用者，此時如果使用少傳了name或password，會觸發 mongoose 的驗證機制，直接拋出錯誤。</p>
<p>建立使用者後，用寫在<a href="https://tim8076.github.io/2022/07/17/2022-7-17-8-mongoose-model/?highlight=schema#schema-%E5%8A%A0%E4%B8%8A%E6%96%B9%E6%B3%95">User的schema上的方法</a>來產生 jwt的 token，最後這個token會回傳給前端做下次登入驗證用，詳細<a href="https://tim8076.github.io/2022/07/18/2022-7-18-1-jwt/?highlight=jwt#%E5%AF%A6%E6%88%B0%E5%8A%A0%E5%AF%86%E6%B5%81%E7%A8%8B">jwt用法看這裡</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserSchema</span>.<span class="property">methods</span>.<span class="property">createJWT</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> jwt.<span class="title function_">sign</span>(</span><br><span class="line">    &#123; <span class="attr">userId</span>: <span class="variable language_">this</span>.<span class="property">_id</span>, <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span> &#125;,</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">expiresIn</span>: process.<span class="property">env</span>.<span class="property">JWT_LIFETIME</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="登入路由"><a href="#登入路由" class="headerlink" title="登入路由"></a>登入路由</h2><p>當使用者成功註冊後，可以進行登入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; email, password &#125; = req.<span class="property">body</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!email || !password) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestError</span>(<span class="string">&#x27;Please provide email and password&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123; email &#125;)</span><br><span class="line">  <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnauthenticatedError</span>(<span class="string">&#x27;Invalid Credentials&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> isPasswordCorrect = <span class="keyword">await</span> user.<span class="title function_">comparePassword</span>(password)</span><br><span class="line">  <span class="keyword">if</span> (!isPasswordCorrect) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnauthenticatedError</span>(<span class="string">&#x27;Invalid Credentials&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// compare password</span></span><br><span class="line">  <span class="keyword">const</span> token = user.<span class="title function_">createJWT</span>()</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="title class_">StatusCodes</span>.<span class="property">OK</span>).<span class="title function_">json</span>(&#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: user.<span class="property">name</span> &#125;, token &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先從req.body裡可以取得前端傳來的 email和password資料</p>
<ol>
<li><p>先檢查 email 和 password 是否存在，不存在的話直接丟出錯誤。</p>
</li>
<li><p>確認有帳密資料後，用 email資料取得資料庫裡對應的user資料，如果找不到user則回傳錯誤。</p>
</li>
<li><p>再來比對使用者輸入的密碼是否一樣，使用 bcrypt套件裡的compare功能，比對的函式一樣放在UserSchema的methods裡。</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserSchema</span>.<span class="property">methods</span>.<span class="property">comparePassword</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">canditatePassword</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isMatch = <span class="keyword">await</span> bcrypt.<span class="title function_">compare</span>(canditatePassword, <span class="variable language_">this</span>.<span class="property">password</span>)</span><br><span class="line">  <span class="keyword">return</span> isMatch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>確認密碼一樣後，就可以新增 jwt token 並回傳端，登入成功。</p>
<h2 id="新增驗證的middleware"><a href="#新增驗證的middleware" class="headerlink" title="新增驗證的middleware"></a>新增驗證的middleware</h2><p>使用者註冊和登入後，前端會獲得token，作為之後驗證使用。可以在middleware資料夾內新增 autentication的js檔。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">auth</span> = <span class="keyword">async</span> (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> authHeader = req.<span class="property">headers</span>.<span class="property">authorization</span>;</span><br><span class="line">  <span class="keyword">if</span> (!authHeader || !authHeader.<span class="title function_">startsWith</span>(<span class="string">&#x27;Bearer&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnauthenticatedError</span>(<span class="string">&#x27;Authentication invalid&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> token = authHeader.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> payload = jwt.<span class="title function_">verify</span>(token, process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>);</span><br><span class="line">    req.<span class="property">user</span> = &#123; <span class="attr">userId</span>: payload.<span class="property">userId</span>, <span class="attr">name</span>: payload.<span class="property">name</span> &#125;;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnauthenticatedError</span>(<span class="string">&#x27;Authentication invalid&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在驗證邏輯中，前端會將token放在headers.authorization裡，所以先判斷 req 裡有沒有 authorization 的資料，沒有則回報錯誤。<br>若有則將token字串取出，之後用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jwt.verify(token, token金鑰)</span><br></pre></td></tr></table></figure>

<p>將token資料解析回當初加密前的物件格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="attr">userId</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>取得物件後，就將資訊存在 req.user裡，方便之後再路由裡取得user資訊。</p>
]]></content>
      <tags>
        <tag>Express實戰系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(12) 錯誤處理範例</title>
    <url>/2022/07/20/2022-7-20-2-error-handle/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在node.js裡遇到錯誤時我們可能會直接丟出錯誤</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;testing async errors&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>在這章節會介紹如何統整不同錯誤的api在一個資料夾，方便管理。</p>
<h2 id="新增errors資料夾"><a href="#新增errors資料夾" class="headerlink" title="新增errors資料夾"></a>新增errors資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- errrors</span><br><span class="line">  - index.js</span><br><span class="line">  - custom-api.js</span><br><span class="line">  - bad-request.js</span><br><span class="line">  - not-found.js</span><br><span class="line">- middleware</span><br><span class="line">  - error-handler</span><br></pre></td></tr></table></figure>

<p>首先在根目錄建立errors資料夾，底下會有處裡不同錯誤的js檔，以下分別說明</p>
<h2 id="custom-api"><a href="#custom-api" class="headerlink" title="custom-api"></a>custom-api</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomAPIError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">CustomAPIError</span></span><br></pre></td></tr></table></figure>

<p>建立 custom-api.js 檔，裡面我們會 extend 一個 CustomAPIError 的 class ，再將 CustomAPIError 匯出。</p>
<h2 id="建立不同錯誤的js"><a href="#建立不同錯誤的js" class="headerlink" title="建立不同錯誤的js"></a>建立不同錯誤的js</h2><p>當我們建立好 CustomAPIError 後，可以新增不同錯誤的js檔，以下以 Badrequest 錯誤為例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">StatusCodes</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-status-codes&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CustomAPIError</span> = <span class="built_in">require</span>(<span class="string">&#x27;./custom-api&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BadRequestError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CustomAPIError</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(message);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">statusCode</span> = <span class="title class_">StatusCodes</span>.<span class="property">BAD_REQUEST</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">BadRequestError</span>;</span><br></pre></td></tr></table></figure>

<p>Badrequest 一樣會extend CustomAPIError ，statusCode的部分則會用’http-status-codes’這個套件帶入錯誤代碼。</p>
<h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><p>當不同錯誤的js檔建立好了，可以再新增 index.js統一匯出，這樣之後要使用不同錯誤方法時，可以統一由index這邊匯入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CustomAPIError</span> = <span class="built_in">require</span>(<span class="string">&#x27;./custom-api&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UnauthenticatedError</span> = <span class="built_in">require</span>(<span class="string">&#x27;./unauthenticated&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NotFoundError</span> = <span class="built_in">require</span>(<span class="string">&#x27;./not-found&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BadRequestError</span> = <span class="built_in">require</span>(<span class="string">&#x27;./bad-request&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="title class_">CustomAPIError</span>,</span><br><span class="line">  <span class="title class_">UnauthenticatedError</span>,</span><br><span class="line">  <span class="title class_">NotFoundError</span>,</span><br><span class="line">  <span class="title class_">BadRequestError</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>要使用錯誤方法時，可以先將要用的方法從index.js匯入使用，再將錯誤拋出。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">BadRequestError</span>, <span class="title class_">UnauthenticatedError</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../errors&#x27;</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestError</span>(<span class="string">&#x27;Please provide email and password&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="error-middleware"><a href="#error-middleware" class="headerlink" title="error middleware"></a>error middleware</h2><p>當錯誤拋出後，會進到 error-handler 的 middleware 處理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CustomAPIError</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../errors&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">StatusCodes</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-status-codes&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">errorHandlerMiddleware</span> = (<span class="params">err, req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> customError = &#123;</span><br><span class="line">    <span class="attr">statusCode</span>: err.<span class="property">statusCode</span> || <span class="title class_">StatusCodes</span>.<span class="property">INTERNAL_SERVER_ERROR</span>,<span class="string">`</span></span><br><span class="line"><span class="string">    message: err.message || &#x27;Something went wrong try again later&#x27;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  return res.status(customError.statusCode).json(&#123; msg: customError.message &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">module.exports = errorHandlerMiddleware</span></span><br></pre></td></tr></table></figure>

<p>errorHandlerMiddleware 函式接收的 err 參數如果是我們自行丟出的會有 statusCode 和 message，我們就回傳customError的資訊。若不是則回傳預設的  StatusCodes.INTERNAL_SERVER_ERROR 。</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie 介紹(一) 概念篇</title>
    <url>/2022/07/24/2022-7-24-1-cookie-1/</url>
    <content><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/1100/0*xElr-lBELjhvCKM1.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*7JB8X8Z3wYWCcc5ox_GhEQ.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*ZF-rXeZmto6Qfq7kubbw2g.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*t53-Lx0pAOoZrRPBRXGXKQ.png"></p>
]]></content>
      <tags>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode 常用套件</title>
    <url>/2022/07/22/2022-7-22-2-vscodes-plugins/</url>
    <content><![CDATA[<ol>
<li>Monokai Dark Soda</li>
</ol>
<p>將樣式改為 sublime 配色</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*NO_R722LcJMiVFOtN7u2bQ.png"></p>
<ol start="2">
<li>Live Server</li>
</ol>
<p>幫助我們建立本地端serve，來開啟html檔案。</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*UutF0FyzyEhBea3QEy_nKg.png"></p>
<ol start="3">
<li>AutoFileName</li>
</ol>
<p>自動補齊文件路徑</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*RWm3j8aBqGyN5N_M8xldiQ.png"></p>
<ol start="4">
<li>Copy filename</li>
</ol>
<p>右鍵點選檔案，可以直接複製檔名</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*1puNqb7bDaubwhfzxzaQhQ.png"></p>
<ol start="5">
<li>git graph</li>
</ol>
<p>快速瀏覽 git commit 與 分支</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/35f08c9edb0403027a52b8941abf732b.png"></p>
<ol start="6">
<li>Material Icon Theme</li>
</ol>
<p>提供好看的檔案 icon 圖示</p>
<p><img src="https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/main/logo.png"></p>
]]></content>
      <categories>
        <category>VScode</category>
      </categories>
      <tags>
        <tag>VScode</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie 介紹(二) Client 端設計</title>
    <url>/2022/07/24/2022-7-24-2-cookie-2/</url>
    <content><![CDATA[<h2 id="在瀏覽器讀取與寫入cookie"><a href="#在瀏覽器讀取與寫入cookie" class="headerlink" title="在瀏覽器讀取與寫入cookie"></a>在瀏覽器讀取與寫入cookie</h2><h3 id="讀取所有cookie"><a href="#讀取所有cookie" class="headerlink" title="讀取所有cookie"></a>讀取所有cookie</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span>    <span class="comment">// 讀取所有cookie</span></span><br></pre></td></tr></table></figure>

<p>document.cookie會讀取瀏覽器裡所有cookie並組成同個字串如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;test1=Hello; SameSite=None;  //讀取結果</span><br></pre></td></tr></table></figure>

<h3 id="讀取單一cookie"><a href="#讀取單一cookie" class="headerlink" title="讀取單一cookie"></a>讀取單一cookie</h3><p>如果要取出特定cookie的值，我們可以套用function，只要帶入cookie的name，就會返回cookie的值。以下提供一個範例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="string">`; <span class="subst">$&#123;<span class="variable language_">document</span>.cookie&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> parts = value.<span class="title function_">split</span>(<span class="string">`; <span class="subst">$&#123;name&#125;</span>=`</span>);</span><br><span class="line">  <span class="keyword">if</span> (parts.<span class="property">length</span> === <span class="number">2</span>) <span class="keyword">return</span> parts.<span class="title function_">pop</span>().<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>).<span class="title function_">shift</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="寫入cookie"><a href="#寫入cookie" class="headerlink" title="寫入cookie"></a>寫入cookie</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&#x27;myName=bob&#x27;</span>   <span class="comment">// 寫入cookie</span></span><br></pre></td></tr></table></figure>

<h2 id="設定cookie-失效時間"><a href="#設定cookie-失效時間" class="headerlink" title="設定cookie 失效時間"></a>設定cookie 失效時間</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*ih5ywCh6YHGSf4ndllwkuA.png"></p>
]]></content>
      <tags>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie 介紹(三) Node.js Server 設計</title>
    <url>/2022/07/24/2022-7-24-3-cookie-3/</url>
    <content><![CDATA[<h2 id="載入cookieParser"><a href="#載入cookieParser" class="headerlink" title="載入cookieParser"></a>載入cookieParser</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save cookie-parser</span><br></pre></td></tr></table></figure>

<p>先下載cookie-parser這個套件，才能讀取cookie。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(cookieParser);</span><br></pre></td></tr></table></figure>

<h2 id="讀取cookie"><a href="#讀取cookie" class="headerlink" title="讀取cookie"></a>讀取cookie</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">req.cookie  //讀取cookie</span><br></pre></td></tr></table></figure>

<p>在後端的路由裡，可以用 req.cookies 讀取整包cookie物件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">cookie</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn-images-1.medium.com/max/1100/1*MGJQh6eKcOY12UDRUylx5A.png" alt="讀取結果"></p>
<h2 id="傳送-cookie-到前端"><a href="#傳送-cookie-到前端" class="headerlink" title="傳送 cookie 到前端"></a>傳送 cookie 到前端</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res.cookie(name, value [, options])</span><br></pre></td></tr></table></figure>

<p>name: 設定cookie的名字<br>value: 設定其值，可能是字串或是轉成JSON格式的物件。<br>options: 選項參數是一個物件，所以，其屬性放在{}裡，以逗號分隔。</p>
<p>可用options:</p>
<ul>
<li>expires (日期) cookie的到期日，超過此日期，即失效。</li>
<li>httpOnly: (布林) 標記此cookie只能從web server　訪問，以避免不正確的進入來取得竄改。</li>
<li>maxAge (數字) 設定此cookie的生存時間(毫秒為單位)，比方60000(10分鐘後到期，必須重新訪問)</li>
<li>path (字串) 適用此cookie的路徑，預設： “&#x2F;”.</li>
<li>secure (布林) 設定此cookie是否只在https使用。</li>
<li>signed (布林) 此cookie是否要設簽章。(如果是true，必須使用cookie-parser設定簽章 )</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;marry&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">httpOnly</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">10000</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(14) bcrypt 套件</title>
    <url>/2022/07/26/2022-7-26-1-express-bcrypt/</url>
    <content><![CDATA[<h2 id="什麼是-bcrypt"><a href="#什麼是-bcrypt" class="headerlink" title="什麼是 bcrypt"></a>什麼是 bcrypt</h2><p>在儲存密碼到後端資料庫時，要避免直接將密碼以字串方式存入，以防資料庫被害時密碼洩漏。所以應該再存入密碼前將密碼加密，也就是本文會介紹的 bcrypt套件 來加密。</p>
<p>bcrypt 能夠將一個字串做雜湊加密，其中有個參數叫 saltRounds 是在密碼學中的加鹽(salt)，加鹽的意思是在要加密的字串中加特定的字符，打亂原始的字符串，使其生成的散列結果產生變化，其參數越高加鹽次數多越安全相對的加密時間就越長。</p>
<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install bcrypt --save</span><br></pre></td></tr></table></figure>

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul>
<li>saltRounds: 整數型態，數值越高越安全。</li>
<li>myPassword: 要加密的字串。</li>
<li>testPassword: 測試驗證密碼的變數。</li>
<li>myHash: myPassword加密後結果(給驗證用)</li>
</ul>
<p>以下為promises 非同步的加密與解密方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加密</span></span><br><span class="line">bcrypt.<span class="title function_">hash</span>(myPassword, saltRounds).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">hash</span>) &#123;</span><br><span class="line">  <span class="comment">// Store hash in your password DB.</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(hash);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 驗證密碼</span></span><br><span class="line">bcrypt.<span class="title function_">compare</span>(myPassword, myHash).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// true</span></span><br><span class="line">&#125;);</span><br><span class="line">bcrypt.<span class="title function_">compare</span>(testPassword, myHash).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>也支援 async&#x2F;await 的寫法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">checkUser</span>(<span class="params">username, password</span>) &#123;</span><br><span class="line">    <span class="comment">//... fetch user from a db etc.</span></span><br><span class="line">    <span class="keyword">const</span> match = <span class="keyword">await</span> bcrypt.<span class="title function_">compare</span>(password, user.<span class="property">passwordHash</span>);</span><br><span class="line">    <span class="keyword">if</span>(match) &#123;</span><br><span class="line">        <span class="comment">//login</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>Express實戰系列(2) 使用cookie傳送JWT token</title>
    <url>/2022/07/24/2022-7-24-4-express-cookie-example/</url>
    <content><![CDATA[<h2 id="註冊功能"><a href="#註冊功能" class="headerlink" title="註冊功能"></a>註冊功能</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">attatchCookieToResponse</span> = (<span class="params">&#123; res, user &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="title function_">createJWT</span>(&#123; <span class="attr">payload</span>: user &#125;);</span><br><span class="line">  <span class="keyword">const</span> oneDay = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>; <span class="comment">//one day in miliseconds</span></span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&#x27;token&#x27;</span>, token, &#123;</span><br><span class="line">    <span class="attr">httpOnly</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">expires</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() + oneDay),</span><br><span class="line">    <span class="attr">secure</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    <span class="attr">signed</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用res.cookie 回傳 jwt 產生的token，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">register</span> = <span class="keyword">async</span> (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; email, name, password &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(&#123; email, password, name, role &#125;);</span><br><span class="line">  <span class="keyword">await</span> user.<span class="title function_">save</span>();</span><br><span class="line">  <span class="keyword">const</span> tokenUser = &#123; </span><br><span class="line">    <span class="attr">name</span>: user.<span class="property">name</span>, </span><br><span class="line">    <span class="attr">userId</span>: user.<span class="property">_id</span>, </span><br><span class="line">    <span class="attr">role</span>: user.<span class="property">role</span> </span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">attatchCookieToResponse</span>(&#123; res, <span class="attr">user</span>: tokenUser &#125;);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="title class_">StatusCodes</span>.<span class="property">CREATED</span>).<span class="title function_">json</span>(&#123; <span class="attr">user</span>: tokenUser &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Express實戰系列</tag>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise 的使用</title>
    <url>/2022/07/28/2022-7-28-1-promise/</url>
    <content><![CDATA[<h2 id="過去處理非同步方法"><a href="#過去處理非同步方法" class="headerlink" title="過去處理非同步方法"></a>過去處理非同步方法</h2><p>在以前，我們會用 callback function 去控制非同步事件發生的順序，如下圖，利用將 logB 帶入logA函式中，確保 logA 執行完後才執行 logB;</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*u2dx3XZLuYAXJ23Fybz73Q.png"></p>
<h2 id="使用promise"><a href="#使用promise" class="headerlink" title="使用promise"></a>使用promise</h2><p><img src="https://cdn-images-1.medium.com/max/1320/1*dUI30vm_J711TulAMNkIbQ.png"></p>
<p>而現在，我們有promise可以用，promise 主要用來解決非同步的問題，因為非同步事件我們無法確定什麼時候完成，所以會有一個 pending 未確認的狀態。</p>
<p>等待未確認狀態完成後，才會進入 settled 已確認狀態，settled 已確認狀態，可分為兩部分:</p>
<ol>
<li>fulfilled : 已實現狀態，代表非同步事件完成。</li>
</ol>
<p>在完成狀態裡，promise會透過 resolve參數回傳一個結果，並透過then來 做接收。</p>
<ol start="2">
<li>rejected : 已拒絕狀態，代表非同步事件失敗。</li>
</ol>
<p>在失敗狀態裡，promise會透過 reject參數回傳一個結果，並透過catch來做接收。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promiseFn</span>(<span class="params">num</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num)&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;失敗&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">promiseFn</span>(<span class="number">0</span>)</span><br><span class="line">  .<span class="title function_">then</span>( <span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;程式碼結束&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在上面範例中，利用一個 function 內new出 promise的實體，並用 resolve 和 reject 參數 分別帶出成功和失敗的結果。<br>在運行promiseFn 藉由 帶入的參數是真值，如 1  或假值 如 0，來決定 是用 then接收成功結果，或是用 catch 接收失敗結果。</p>
<h2 id="Promise-鏈接"><a href="#Promise-鏈接" class="headerlink" title="Promise 鏈接"></a>Promise 鏈接</h2><p><img src="https://cdn-images-1.medium.com/max/1320/1*yvKI941jMsOCyIjW1R0pug.png"></p>
<p>在上圖中，在第一個 then 接收成功資訊，並再 return 一個promisefn。此時因為帶入的是假值 0 ，直接跳到 .catch 進行失敗資訊接收。在catch裡，也可以再 做一次promiseFn(4) 此時帶入的是真值，故由底下的then來接收成功結果。</p>
<h2 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all"></a>promise.all</h2><p><img src="https://cdn-images-1.medium.com/max/1320/1*t3Q8bc1-xu3sl2B0NLd2Jw.png"></p>
<p>在使用 promise .all 時，可以在陣列裡一次帶入多個promise請求，並用.then  一次回傳成功的結果，要注意回傳的格式也是陣列，所以可以用res[0]的方式去取值。<br>另外只要有一個promise請求失敗，就會直接跳入.catch 接收失敗訊息，並不會執行其餘成功的結果。</p>
<h2 id="promise-race"><a href="#promise-race" class="headerlink" title="promise.race"></a>promise.race</h2><p>promise .race 和 promise.all 一樣，可以同時用陣列的方式傳入多個promise請求，但 promise .race 只會回傳第一個完成的結果，若成功則進入.then，若是失敗則進入 .catch。<br>下圖範例中， promiseFn(0,300)會先執行完，然後因為是 0 是假值，直接進入.catch接收失敗結果。</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*86cuLYtVeu-Aez8QI54cZg.png"></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongoose (5) populate介紹</title>
    <url>/2022/07/28/2022-7-28-2-mongoose-populate/</url>
    <content><![CDATA[<h2 id="model-關聯屬性建立"><a href="#model-關聯屬性建立" class="headerlink" title="model 關聯屬性建立"></a>model 關聯屬性建立</h2><p>在 mongoose 的 modle 屬性裡，我們可以互相連結不同 model 的資料</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ProductSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: mongoose.<span class="property">Types</span>.<span class="property">ObjectId</span>,</span><br><span class="line">      <span class="attr">ref</span>: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>例如上面的 product 的 schema 我連結了 user 的資料。</p>
<h2 id="使用-populate-擴展資料"><a href="#使用-populate-擴展資料" class="headerlink" title="使用 populate 擴展資料"></a>使用 populate 擴展資料</h2><p>在沒有 populate前，當我們get product資料時，只會得到 user的 id。</p>
<p>但我們可以使用 populate 來擴展 user 的完整資料</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getAllProducts</span> = <span class="keyword">async</span> (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> products = <span class="keyword">await</span> <span class="title class_">Review</span>.<span class="title function_">find</span>(&#123;&#125;)</span><br><span class="line">  .<span class="title function_">populate</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">select</span>: <span class="string">&#x27;name age gender&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="title class_">StatusCodes</span>.<span class="property">OK</span>).<span class="title function_">json</span>(&#123; products &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>populate可用屬性</p>
<ul>
<li>path: 要擴展的屬性名稱</li>
<li>select: 需要擴展的key</li>
</ul>
]]></content>
      <tags>
        <tag>Express</tag>
        <tag>Mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>Async Await</title>
    <url>/2022/07/29/2022-7-29-1-async-await/</url>
    <content><![CDATA[<h2 id="promise的作法"><a href="#promise的作法" class="headerlink" title="promise的作法"></a>promise的作法</h2><p><img src="https://miro.medium.com/max/1292/1*kbLtHl6rlpk9mQZMh6vjyg.png"></p>
<p><img src="https://miro.medium.com/max/1192/1*_qmqlT1cYHhKxdPw2oHpVA.png"></p>
<p>傳統的promise寫法，我們會用 .then()去接收成功的結果，.catch()接收失敗的結果。但不斷用.then去接收結果，程式上的可讀性較差，所以可以改用async await的寫法來改寫。</p>
<h2 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h2><p><img src="https://miro.medium.com/max/1392/1*7xEFqbxd6W5rOHC5wmnXjQ.png"></p>
<p>async 的使用方法很簡單，只要在定義 function 時，前面加個 async 就可以了。而 await 會接收promise執行完的結果，等 Promise 執行完再執行下一行，後面的任務會等前面的任務完成後才繼續下去。</p>
<p>如果想接收錯誤的結果，可以用try catch寫法，將所有可能出錯的程式放在try裡，當有程式回傳錯誤時，會立即停止，並執行catch裡的程式</p>
<p><img src="https://miro.medium.com/max/1356/1*3P-AW4xqVs-gGroh5rU36g.png"></p>
<p>當 async function 的內容全都結束後，會返回一個 promise，這表示後方可以使用.then語法來做連接，基本的程式長相就像下面這樣：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">b</span>();</span><br><span class="line">  .....       <span class="comment">// 等 b() 完成後才會執行</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">c</span>();</span><br><span class="line">  .....       <span class="comment">// 等 c() 完成後才會執行</span></span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">    .....</span><br><span class="line">  &#125;);</span><br><span class="line">  .....       <span class="comment">// 上方的 promise 完成後才會執行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">a</span>();</span><br><span class="line"><span class="title function_">a</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  .....       <span class="comment">// 等 a() 完成後接著執行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/tim-chou/pen/ZEyBzpb?editors=1012">範例參考:</a></p>
<p>另一個串接範例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncFn = <span class="title function_">async</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">promiseFn</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;失敗&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// async function 本身就會回傳 promise 可以用 .then .catch 串接。</span></span><br><span class="line"><span class="title function_">asyncFn</span>(<span class="number">0</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;錯誤&#x27;</span>, err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="節省-try-catch-的作法"><a href="#節省-try-catch-的作法" class="headerlink" title="節省 try catch 的作法"></a>節省 try catch 的作法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">catchError</span> = (<span class="params">asFn</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">asFn</span>(n).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch&#x27;</span>, err);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">asyncFn</span> = (<span class="params">n</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">promiseFn</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> catchFn = <span class="title function_">catchError</span>(asyncFn);</span><br><span class="line"><span class="title function_">catchFn</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title function_">catchFn</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若不想寫那麼多也可以直接執行</span></span><br><span class="line"><span class="title function_">catchError</span>(asyncFn)(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>如果想要節省在 async function 裡處理錯誤的 try catch 語法，可以將 catch 的語法包裝在 catchError 裡。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>ES6 箭頭函式</title>
    <url>/2022/07/29/2022-7-29-2-arrow-function/</url>
    <content><![CDATA[<h2 id="箭頭函式"><a href="#箭頭函式" class="headerlink" title="箭頭函式"></a>箭頭函式</h2><p>箭頭函式(Arrow Functions)是ES6後提供的新的函式撰寫方法，箭頭函式省略 function ，並在小括號後 加上 &#x3D;&gt;<br>寫法如下: </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">([param] [, param]) =&gt; &#123;</span><br><span class="line">   statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="縮寫"><a href="#縮寫" class="headerlink" title="縮寫"></a>縮寫</h2><p><img src="https://miro.medium.com/max/1186/1*ESxQlngtFWX4n1s2aenzaA.png"></p>
<p>另外如果程式碼只有一行 ，可將{ }省略，並且不用寫 return，因為 箭頭函式 預設就有return；</p>
<p><img src="https://miro.medium.com/max/1170/1*9IF91hfHL3P8GkqFRKEEqg.png"></p>
<p>如果參數只有一個，小括號 ( )也可省略</p>
<p><img src="https://miro.medium.com/max/1084/1*kDJRvdiX4f8BFUVfA7F7hg.png"></p>
<p>若沒有參數，小括號 () 不可省略</p>
<h2 id="沒有-this"><a href="#沒有-this" class="headerlink" title="沒有 this"></a>沒有 this</h2><p>和傳統函式不同，箭頭函式沒有自己的this，所以它的this會沿用外層的this</p>
<p><img src="https://miro.medium.com/max/1106/1*JQNWRCFVt4ScYCqNoFSHlw.png"></p>
<h2 id="不要用-arrow-function-的情形"><a href="#不要用-arrow-function-的情形" class="headerlink" title="不要用 arrow function 的情形"></a>不要用 arrow function 的情形</h2><h3 id="物件裡的-function"><a href="#物件裡的-function" class="headerlink" title="物件裡的 function"></a>物件裡的 function</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> me = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tim&#x27;</span>,</span><br><span class="line">  <span class="attr">talk</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">// me 物件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">arrowTalk</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">// Window</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>箭頭函式因為沒有自己的this，所以在物件裡調用時，this 不會指向物件本身，而是指向 window。</p>
<h3 id="建構函式的-funciton"><a href="#建構函式的-funciton" class="headerlink" title="建構函式的 funciton"></a>建構函式的 funciton</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Person</span> = (<span class="params"></span>) =&gt; &#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> <span class="title class_">Person</span>(); <span class="comment">// 會跳錯誤</span></span><br></pre></td></tr></table></figure>
<p>建構函式無法使用 箭頭函式來撰寫。</p>
<h3 id="建構函式的-prototype-function"><a href="#建構函式的-prototype-function" class="headerlink" title="建構函式的 prototype function"></a>建構函式的 prototype function</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">talk</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;  <span class="comment">// 回傳 Person 物件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">arrowTalk</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">// 回傳 Window</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>箭頭函式因為沒有自己的this，所以在prototype裡調用時，this 不會指向物件本身，而是指向 window。</p>
<h3 id="addEventsLister-裡的-function"><a href="#addEventsLister-裡的-function" class="headerlink" title="addEventsLister 裡的 function"></a>addEventsLister 裡的 function</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventsLister</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">// body</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventsLister</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">// window</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>addEventsLister 裡使用 箭頭函式的話，this會指向 window 而不是被綁定的 dom</p>
<h2 id="常見問題"><a href="#常見問題" class="headerlink" title="常見問題"></a>常見問題</h2><h3 id="無法回傳-物件實字"><a href="#無法回傳-物件實字" class="headerlink" title="無法回傳 物件實字"></a>無法回傳 物件實字</h3><p>因為 物件的 { } 會被當作 箭頭函式結構的一部分，導致無法回傳物件。</p>
<p><img src="https://miro.medium.com/max/778/1*mynKPfZszhSThbM3JLrYoQ.png"></p>
<p>解決方法是在 物件外 加上 ( ) 包住</p>
<p><img src="https://miro.medium.com/max/862/1*jnDAY_EmMmMf9LFwbGRnrQ.png"></p>
<h3 id="搭配判斷式時，不能直接接箭頭函式"><a href="#搭配判斷式時，不能直接接箭頭函式" class="headerlink" title="搭配判斷式時，不能直接接箭頭函式"></a>搭配判斷式時，不能直接接箭頭函式</h3><p><img src="https://miro.medium.com/max/730/1*OR1_s2JDhdFL2y60Da27tw.png"></p>
<p>解決方法依樣在外面加上 ( )</p>
<p><img src="https://miro.medium.com/max/804/1*E_mYA5m_ncwWoXN--eIi8w.png"></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongoose (6) virtual</title>
    <url>/2022/07/29/2022-7-29-3-mongoose-virtual/</url>
    <content><![CDATA[<h2 id="virtual"><a href="#virtual" class="headerlink" title="virtual"></a>virtual</h2><p>我們知道可以用 populate 來擴展實際在model裡有聯結的屬性，如下我們在 product裡連結了 user</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ProductSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: mongoose.<span class="property">Types</span>.<span class="property">ObjectId</span>,</span><br><span class="line">      <span class="attr">ref</span>: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>但當 model裡沒有連結屬性有想擴展該屬性時，可以用 virtual。</p>
<h2 id="開啟virtual"><a href="#開啟virtual" class="headerlink" title="開啟virtual"></a>開啟virtual</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ProductSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;, </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">toJSON</span>: &#123; <span class="attr">virtuals</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="attr">toObject</span>: &#123; <span class="attr">virtuals</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>首先在 schema的第二個參數裡，將 toJSON 、toObject 的 virtuals 設為 true，讓schema能接收 vritual。</p>
<h2 id="設定-virtual"><a href="#設定-virtual" class="headerlink" title="設定 virtual"></a>設定 virtual</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ProductSchema</span>.<span class="title function_">virtual</span>(<span class="string">&#x27;reviews&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">ref</span>: <span class="string">&#x27;Review&#x27;</span>,</span><br><span class="line">  <span class="attr">localField</span>: <span class="string">&#x27;_id&#x27;</span>,</span><br><span class="line">  <span class="attr">foreignField</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">  <span class="attr">justOne</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">match</span>: &#123; <span class="attr">rating</span>: <span class="number">5</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在 productSchema 上先設定 virtual 連結到 reviews</p>
<ul>
<li>ref: 要連結的 model 名稱</li>
<li>localField: schema要連結的屬性</li>
<li>foreignField: 連結model裡的屬性</li>
<li>justone: 是否只取回一筆資料</li>
<li>match: 只取回符合條件的資料</li>
</ul>
<p>以上範例中，在productSchema上新增一個 virtual的屬性命名為 reviews，將ref設定為 ‘Review’ 來取得Review model的資料。<br>在 localField 中設定 ‘_id’ 代表 product 的id， foreignField 設為 product 則會將 Review model 裡所有有該 product id的reviews回傳。</p>
<h2 id="pupulate"><a href="#pupulate" class="headerlink" title="pupulate"></a>pupulate</h2><p>當以上都設定好後，在controller裡 populate 該 virtual 屬性即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSingleProduct</span> = <span class="keyword">async</span> (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> productId = req.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">  <span class="keyword">const</span> product = <span class="keyword">await</span> <span class="title class_">Product</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">_id</span>: productId &#125;).<span class="title function_">populate</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;reviews&#x27;</span> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Express</tag>
        <tag>Mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 Class</title>
    <url>/2022/07/30/2022-7-30-1-js-class/</url>
    <content><![CDATA[<h2 id="函式建構式"><a href="#函式建構式" class="headerlink" title="函式建構式"></a>函式建構式</h2><p>javascript沒有原生的class，是透過「原型」來繼承方法。透過函式建構式的方式，透過 new 關鍵字來產生新的物件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lucy = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;lucy&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>但由於這種寫法與其他物件導向的程式語言差異太大，所以從ES6開始導入了Class語法。</p>
<h2 id="Class語法糖"><a href="#Class語法糖" class="headerlink" title="Class語法糖"></a>Class語法糖</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello this is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> lucy = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;lucy&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(lucy.<span class="title function_">greeting</span>()) <span class="comment">// Hello this is lucy</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>首先在class關鍵字後是class的名稱，內部的 constructor函式與原本的 建構函式 function Person(name) {} 是一樣的，greeting方法則直接寫入class裡。</p>
<h2 id="Class與-constructor-function的差異"><a href="#Class與-constructor-function的差異" class="headerlink" title="Class與 constructor function的差異"></a>Class與 constructor function的差異</h2><ol>
<li>函式可以被提升，而class不會，會出現「TDZ」暫時性死區</li>
<li>直接呼叫class名稱，而不是透過 new關鍵字來呼叫，會出現錯誤。</li>
<li>class的區塊內所有程式碼，預設會進入嚴格模式。</li>
</ol>
<h2 id="getter-與-setter"><a href="#getter-與-setter" class="headerlink" title="getter 與 setter"></a>getter 與 setter</h2><p>在 Class 在取屬性值或設定屬性值時，可以直接這樣做:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">pizzaType</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = pizzaType;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myPizza = <span class="keyword">new</span> <span class="title class_">Pizza</span>(<span class="string">&#x27;tomato&#x27;</span>);</span><br><span class="line">myPizza.<span class="property">type</span> = <span class="string">&#x27;supreme&#x27;</span>; <span class="comment">// 直接設定新的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myPizza.<span class="property">type</span>);</span><br></pre></td></tr></table></figure>

<p>但如果有比較複雜的運用時，可以使用 Getter 和 Setter。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">pizzaType</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = pizzaType;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">pizzaType</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">type</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">pizzaType</span>(<span class="params">pizzaType</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = pizzaType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> myPizza = <span class="keyword">new</span> <span class="title class_">Pizza</span>(<span class="string">&#x27;tomato&#x27;</span>);</span><br><span class="line">  myPizza.<span class="property">pizzaType</span> = <span class="string">&#x27;sausage&#x27;</span>; <span class="comment">// 透過 setter 來設定值</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(myPizza.<span class="property">pizzaType</span>); <span class="comment">// 透過 getter 來取得值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>getter 與 setter 的寫法也可以簡化成一個函式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">pizzaType</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = pizzaType;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getPizzaType</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">type</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setPizzaType</span>(<span class="params">pizzaType</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = pizzaType;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myPizza = <span class="keyword">new</span> <span class="title class_">Pizza</span>(<span class="string">&#x27;tomato&#x27;</span>);</span><br><span class="line">myPizza.<span class="title function_">setPizzaType</span>(<span class="string">&#x27;sausage&#x27;</span>);</span><br><span class="line">myPizza.<span class="title function_">getPizzaType</span>();</span><br></pre></td></tr></table></figure>


<h2 id="class-的靜態方法"><a href="#class-的靜態方法" class="headerlink" title="class 的靜態方法"></a>class 的靜態方法</h2><p>class 裡面可以宣告靜態方法 (static method)，其效果等同於直接定義一個方法在class的屬性上，不用new出新物件就可調用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">compare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="property">date</span> &lt; b.<span class="property">date</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">articles.<span class="title function_">sort</span>(<span class="title class_">Article</span>.<span class="property">compare</span>);</span><br></pre></td></tr></table></figure>

<h2 id="extends-繼承類別"><a href="#extends-繼承類別" class="headerlink" title="extends 繼承類別"></a>extends 繼承類別</h2><p>class可以用extends語法繼承。例如，想要 Rabbit class繼承自 Animal class。非常簡單，只要使用 class Rabbit extends Animal 語法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Run...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> rabbit = <span class="keyword">new</span> <span class="title class_">Rabbit</span>();</span><br><span class="line">rabbit.<span class="title function_">run</span>(); <span class="comment">// From `Animal`</span></span><br></pre></td></tr></table></figure>

<h2 id="super-覆寫方法"><a href="#super-覆寫方法" class="headerlink" title="super 覆寫方法"></a>super 覆寫方法</h2><p>就像其他語言一樣，繼承的類別可以覆寫母類別的方法，但是通常我們不一定想要整個覆蓋掉母類別的方法，而是會根據既有的母類別的方法去延伸功能。想要延伸既有的方法，可以用 super 關鍵字，呼叫母類別的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Animal run!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">run</span>(); <span class="comment">// Animal run!</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Rabbit jump!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="super-覆寫-constructor"><a href="#super-覆寫-constructor" class="headerlink" title="super 覆寫 constructor"></a>super 覆寫 constructor</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, earLength</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">earLength</span> = earLength;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rabbit = <span class="keyword">new</span> <span class="title class_">Rabbit</span>(<span class="string">&#x27;John&#x27;</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p>利用 super 關鍵字，在constructor內，呼叫母類別的 constructor。因為母類別已經有 this.name &#x3D; name; 的邏輯了，不需要在子類別重寫一次 this.name &#x3D; name ，直接呼叫 super(name); 就可以了。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax解說系列(5) CORS</title>
    <url>/2022/07/05/2022-7-5-1-js-cors/</url>
    <content><![CDATA[<h2 id="Cross-Origin-Resource-Sharing"><a href="#Cross-Origin-Resource-Sharing" class="headerlink" title="Cross-Origin Resource Sharing"></a>Cross-Origin Resource Sharing</h2><p>當我們使用 XMLHttpRequest 或 fecth等方式向伺服器發送請求時，都必須遵守都遵守同源政策（same-origin policy），只能請求與應用程式相同網域的 HTTP 資源。</p>
<h3 id="同源定義"><a href="#同源定義" class="headerlink" title="同源定義"></a>同源定義</h3><p>所謂同源是指兩份網頁具備相同協定、埠號 (如果有指定) 以及主機位置，下表提供了一些例子展示那些來源和 <a href="http://store.company.com/dir/page.html">http://store.company.com/dir/page.html</a> 屬於同源:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">URL	Outcome	Reason</span><br><span class="line">http://store.company.com/dir2/other.html	同源	</span><br><span class="line">http://store.company.com/dir/inner/another.html	同源	</span><br><span class="line">https://store.company.com/secure.html	不同源	協定不同</span><br><span class="line">http://store.company.com:81/dir/etc.html	不同源	埠號不同</span><br><span class="line">http://news.company.com/dir/other.html	不同源	主機位置不同</span><br></pre></td></tr></table></figure>

<h3 id="跨來源引入"><a href="#跨來源引入" class="headerlink" title="跨來源引入"></a>跨來源引入</h3><p>在某些情況下跨來源是被允許的，不受同源策略限制</p>
<ol>
<li>跨來源嵌入通常被允許 (embed)</li>
</ol>
<script src=”…”></script>、<link rel=”stylesheet” href=”…”>、<iframe>、圖片 <img>、<video>、或是 @font-face <object> 、 <embed>.等等都是跨來源嵌入。這些標籤可以拿到的資源是有限制的。再者，這些取得回來的資源，沒辦法用程式去讀取它，所以開放嵌入。

<ol start="2">
<li>跨來源寫入通常被允許 (writes)</li>
</ol>
<p>可以在藉由<form>在domain-a.com 發 request 給 domain-b.com，當然透過連結 links 或直接 redirect 到別的網站也是被允許的。</p>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>跨來源資源共用（CORS），則是一種使用額外 HTTP 標頭令目前瀏覽網站的使用者代理取得存取其他來源（網域）伺服器特定資源權限的機制。</p>
<p>當對方開啟 CORS，就能存取跨網域的資源。</p>
<p>使用 api 前可以到，<a href="https://test-cors.org/">test-cors.org</a> 網站測試 api</p>
<p>結果 200 代表可串接<br>結果 0 代表不能跨網域串接</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>cors</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 解構賦值</title>
    <url>/2022/07/05/2022-7-5-2-js-Destructuring/</url>
    <content><![CDATA[<h2 id="傳統陣列賦值方式"><a href="#傳統陣列賦值方式" class="headerlink" title="傳統陣列賦值方式"></a>傳統陣列賦值方式</h2><p><img src="https://miro.medium.com/max/1348/1*WRcYmXNDmWXhrmOBVYS34Q.png" alt="傳統傳統賦值"></p>
<p>以往作法我們會將 family 裡的值一一取出，在分別賦予到新的變數上。</p>
<h2 id="陣列解構賦值"><a href="#陣列解構賦值" class="headerlink" title="陣列解構賦值"></a>陣列解構賦值</h2><p><img src="https://miro.medium.com/max/1330/1*KVVs3jLuIIJLivh1ni2xnA.png" alt="陣列解構"></p>
<p>將右方 family 的陣列資料，鏡射到左方的陣列中，如此左方陣列裡的變數就可以被賦予family陣列裡的值。</p>
<p>若鏡射時左右數量不同，則剩下的值不會做解構賦值，如下圖，老媽、老爸就不會作賦值。</p>
<p><img src="https://miro.medium.com/max/1318/1*DWgYoQQAPpEH_tUejL1ujg.png" alt="陣列解構"></p>
<p>若左方陣列有空白，則空白會被跳過，不會被賦值。</p>
<p><img src="https://miro.medium.com/max/1314/1*rTlQeB9E5esDJJQKr5vJBg.png" alt="空白跳過"></p>
<h2 id="字串解構"><a href="#字串解構" class="headerlink" title="字串解構"></a>字串解構</h2><p>字串也可以用類似陣列的手法，進行解構賦值。</p>
<p><img src="https://miro.medium.com/max/1100/1*YIo9Qm5uJ2rHAFPOd3o3dw.png" alt="字串解構"></p>
<h2 id="物件解構"><a href="#物件解構" class="headerlink" title="物件解構"></a>物件解構</h2><p><img src="https://miro.medium.com/max/932/1*W0aj9nt9dyVof6E0vQiQeg.png" alt="物件解構"></p>
<p>我們可以 利用一個 { } ，取出右方GinyuTeam物件裡Ginyu屬性的值，</p>
<p>賦予到 Ginyu這個變數上。</p>
<p><img src="https://miro.medium.com/max/952/1*jzBRrM81reRf7TMxA6rfQw.png" alt="物件解構"></p>
<p>也可以賦予 Ginyu 一個新的變數名稱 kobe，此時 kobe就被賦予Ginyu的值。</p>
<h2 id="預設值"><a href="#預設值" class="headerlink" title="預設值"></a>預設值</h2><p><img src="https://miro.medium.com/max/1184/1*xJW3YCVIfO6gx1zapA8sOg.png" alt="預設值"></p>
<p>我們也可以使用預設值的方式，當左方變數沒有被右方賦值時，就使用預設值</p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p><img src="https://miro.medium.com/max/982/1*ryzueSCVtqdlplZdq8u-pg.png" alt="物件解構"></p>
<p>將 GinyuTeam 用…拆出裡面的值，再放到新的 { }中，然後再將這個物件，賦予到 newTeam，此時 newTeam和GinyuTeam是兩個不同物件。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>(3) JS實作系列 貪吃蛇</title>
    <url>/2022/07/05/2022-7-5-3-js-snake/</url>
    <content><![CDATA[<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022070501.png?alt=media&token=6741a203-d871-44fe-bb24-89915fb088d7" alt="snake-game"></p>
<p><a href="https://tim8076.github.io/JS-underground-snake-game/">Demo 連結</a><br><a href="https://github.com/tim8076/JS-underground-snake-game">程式碼</a></p>
<p>這次要來實作貪吃蛇小遊戲，因為程式較多，會將JS檔案拆分再用export 、import來匯入和匯出，方便做程式碼管理。</p>
<h2 id="繪製網格"><a href="#繪製網格" class="headerlink" title="繪製網格"></a>繪製網格</h2><p>在遊戲畫面中的格子，我們可以用 <a href="https://tim8076.github.io/2022/06/28/2022-6-28-1-css-grid/?highlight=grid">grid</a> 來繪製。用 grid 製作的好處是方便我們在js中取得每個格子的座標將蛇繪製到網格上，網格數量則使用css變數來帶入。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.game-board</span> &#123;</span><br><span class="line">  <span class="attr">--col-num</span>: <span class="number">28</span>;</span><br><span class="line">  <span class="attr">--row-num</span>: <span class="number">16</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">640px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--color-primary);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--color-primary);</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="built_in">var</span>(--col-num), <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="built_in">var</span>(--row-num), <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="建立動畫-loop-函式"><a href="#建立動畫-loop-函式" class="headerlink" title="建立動畫 loop 函式"></a>建立動畫 loop 函式</h2><p>要讓貪吃蛇不停地在畫面上移動，我們需要一個可以每秒更新的函式，以往可以用 setInterval來達成。但 setInterval 可能會有時間誤差的問題，所以我們改用 <a href="https://tim8076.github.io/2022/06/27/2022-6-24-1-js-requestAnimation/">requestAnimationFrame</a> 來製作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lastRenderTime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> speed = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">currentTime</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> currentPage = <span class="title function_">getCurrentPage</span>();</span><br><span class="line">  <span class="keyword">const</span> requestId = <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(animate);</span><br><span class="line">  <span class="keyword">const</span> secondSinceLastRender = (currentTime - lastRenderTime) / <span class="number">1000</span>; <span class="comment">// 將milisecond 轉成 second</span></span><br><span class="line">  <span class="keyword">if</span> (secondSinceLastRender &lt; <span class="number">1</span> / speed) <span class="keyword">return</span>;</span><br><span class="line">  lastRenderTime = currentTime;</span><br><span class="line">  <span class="title function_">update</span>();</span><br><span class="line">  <span class="title function_">draw</span>();</span><br><span class="line">  <span class="keyword">if</span> (currentPage !== <span class="string">&#x27;game-page&#x27;</span>) <span class="title function_">cancelAnimationFrame</span>(requestId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(animate);</span><br></pre></td></tr></table></figure>
<p>requestAnimationFrame 會在我們設定的時間到後自動執行函式，讓貪吃蛇能持續移動。</p>
<h2 id="繪製貪吃蛇"><a href="#繪製貪吃蛇" class="headerlink" title="繪製貪吃蛇"></a>繪製貪吃蛇</h2><p>貪吃蛇的身體是由不同格子組成，我們可以用物件帶入x 跟y的值，代表該節身體的位置。之後我們在操作蛇的移動和增加身體時，都是在操作這個陣列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> snakeBody = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">14</span>, <span class="attr">y</span>: <span class="number">6</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">14</span>, <span class="attr">y</span>: <span class="number">7</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">14</span>, <span class="attr">y</span>: <span class="number">8</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>移動身體的部分，概念是將每節身體的位置，設定成上一節身體的位置，這樣每次繪製影格時，蛇就會移動。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = snakeBody.<span class="property">length</span> - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">     snakeBody[i + <span class="number">1</span>] = &#123; ...snakeBody[i] &#125;;  <span class="comment">// 設定最後一個的元素變成倒數第二的元素</span></span><br><span class="line">   &#125;</span><br><span class="line">   snakeBody[<span class="number">0</span>].<span class="property">x</span> += direction.<span class="property">x</span>;</span><br><span class="line">   snakeBody[<span class="number">0</span>].<span class="property">y</span> += direction.<span class="property">y</span>;</span><br></pre></td></tr></table></figure>

<p>那有了蛇的 x y 座標後，剩下的就是在html中將對應的座標選起來，並加上對應的class。<br>如蛇的頭部 index 是 0，就加上head的class。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">drawSnake</span>(<span class="params">gameBoard, boardSet</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> gridItems = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.grid-item&#x27;</span>);</span><br><span class="line">  gridItems.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">className</span> = <span class="string">&#x27;grid-item&#x27;</span>);</span><br><span class="line">  snakeBody.<span class="title function_">forEach</span>(<span class="function">(<span class="params">body, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> gridItem = <span class="title function_">getGridItemByXY</span>(&#123; gameBoard, boardSet, <span class="attr">postion</span>: body &#125;);</span><br><span class="line">    gridItem.<span class="property">className</span> = <span class="string">&#x27;grid-item&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) gridItem.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;head&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">1</span>) gridItem.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;gray-100&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">2</span>) gridItem.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;gray-200&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">3</span>) gridItem.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;gray-300&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">4</span>) gridItem.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;gray-400&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">4</span>) gridItem.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是製作的貪吃蛇遊戲的方法囉。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>JS實作系列</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Debounce &amp; Throttle</title>
    <url>/2022/08/01/2022-8-1-js-debounce/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當出現頻繁發出 api 請求的情況時，我們可以用 debounce 或 throttle來控制發出請求的頻率，來提升使用者體驗。</p>
<h2 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022080101.png?alt=media&token=60283d21-62fb-48cd-aed8-48b0fd2bc642"></p>
<p>假設今天我們在搜尋欄位輸入文字，底下會自動跳出相關結果，這代表每次使用者打字時都會發出一次api請求，去取得搜尋結果。若要降低請求的頻率，我們可以使用 debounce 讓請求經過指定的等待時間後再發出。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> updateDebounceText = <span class="title function_">debounce</span>(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">  debounceText.<span class="property">textContent</span> = text;</span><br><span class="line">&#125;, <span class="number">250</span>)</span><br><span class="line"></span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  defaultText.<span class="property">innerHTML</span> = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">  <span class="title function_">updateDebounceText</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">cb, delay = <span class="number">1000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">cb</span>(...args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 input 搜尋欄位偵聽 input 事件，也就是使用者每次打字時 會去觸發 debounce 函式。在 debounce 函式中我們會傳入一個 callback function 並回傳一個新的函式。 在這個新的函式中，會設定 setTimeout 來指定等待的時間，等時間到後再去執行 cb 函式。</p>
<p>要注意的是，每次執行函式時會先 clearTimeout，清除 setTimeout的計時器，再重新設定新的計時器。也就是說當使用者不斷打字觸發函式時，會不斷清除計時器，讓計時器重新計時，此時 cb 函式 都不會被執行，直到使用者停止打字並且計時器到時時，才會去執行函式。</p>
<p>以上就能做到等使用者打完字，在一次發出請求的目的了。</p>
<h2 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h2><p>Throttle 是另一種減緩事件觸發方法，它與Debounce的差異是，為使用者觸發相同事件時提供間隔，控制特定時間內事件觸發的次數。適合用在像 卷軸事件 和 滑鼠事件 這些會頻繁觸發的事件中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">updateThrottleText</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">cb, delay = <span class="number">1000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> shouldWait = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> watingArgs;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">timeoutFunc</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (watingArgs == <span class="literal">null</span>) &#123;</span><br><span class="line">      shouldWait = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">cb</span>(...watingArgs);</span><br><span class="line">      watingArgs = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">setTimeout</span>(timeoutFunc , delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldWait) &#123;</span><br><span class="line">      watingArgs = args;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">cb</span>(...args);</span><br><span class="line">    shouldWait = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(timeoutFunc , delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和 debounce 一樣會傳入 cb 函式到 throttle 中，並設定 shouldWait 預設為 false，讓事件第一次會被執行，並在被執行後將shouldWait 設為true，讓事件在等待的時間間隔內不會被執行，直到 setTimeout 的時間到後，會再將 shouldWait 設為 false讓事件執行。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>debounce</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 縮寫</title>
    <url>/2022/08/11/2022-8-11-2-js-abbreviation/</url>
    <content><![CDATA[<h2 id="傳統寫法"><a href="#傳統寫法" class="headerlink" title="傳統寫法"></a>傳統寫法</h2><p>以前當我們要將其他變數帶入新的物件裡時，如下圖寫法</p>
<p><img src="https://miro.medium.com/max/826/1*2idWvSPLkqMoj4eYeQhBXA.png"></p>
<h2 id="縮寫"><a href="#縮寫" class="headerlink" title="縮寫"></a>縮寫</h2><p>當變數與新的物件裡的屬性名稱相同時，只寫變數即可</p>
<p><img src="https://miro.medium.com/max/636/1*yuOuzvYfwCqzUJuHXVPPlA.png"></p>
<h2 id="物件內函式的縮寫"><a href="#物件內函式的縮寫" class="headerlink" title="物件內函式的縮寫"></a>物件內函式的縮寫</h2><p><img src="https://miro.medium.com/max/980/1*7zd6do1Vw8P0Z58FF0iB7g.png" alt="一般寫法"></p>
<p><img src="https://miro.medium.com/max/948/1*GjyX0SWBf_La9YQdka8acg.png" alt="縮寫寫法"></p>
]]></content>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ES-module 模組化</title>
    <url>/2022/08/10/2022-8-10-1-js-module/</url>
    <content><![CDATA[<h2 id="module-模組化"><a href="#module-模組化" class="headerlink" title="module 模組化"></a>module 模組化</h2><p>ES-module 就是js的模組化，可以將檔案進行拆分，進行匯出與匯入。原本這中模組化都要靠工具來進行，不過近幾年瀏覽器也開始支援原生的模組化功能。</p>
<p>進行 module 拆分前，要先將標籤定義 <code>&lt;script type=”module”&gt;</code>，有以上定義才能進行模組匯入匯出。</p>
<p><img src="https://miro.medium.com/max/1296/1*AQKVEXAedLM5vVq0bO5hxA.png" alt="module 流程圖"></p>
<h2 id="預設匯出"><a href="#預設匯出" class="headerlink" title="預設匯出"></a>預設匯出</h2><p>每個js檔案只能有一個預設匯出，使用export default，通常用於匯出物件，在 Vue 開發中可用來匯出元件。</p>
<p><img src="https://miro.medium.com/max/1184/1*_efyAPp16hBz7m2RiNiRNg.png"></p>
<h2 id="預設匯入"><a href="#預設匯入" class="headerlink" title="預設匯入"></a>預設匯入</h2><p>因為預設匯出沒有名字，所以可以為它命名。匯入後就可以使用 init()，這個匯入元件的方法。</p>
<p><img src="https://miro.medium.com/max/1110/1*zdFUpt99uN8OSjXVGTz_SQ.png"></p>
<h2 id="具名匯出"><a href="#具名匯出" class="headerlink" title="具名匯出"></a>具名匯出</h2><p>一個js檔案可以有多個具名匯出，匯出時要為函式或變數命名。通常用來匯出函式。第三方的框架、函式、套件很常使用具名定義 “方法”。</p>
<p><img src="https://miro.medium.com/max/1008/1*N9YDqtocFYFgYUxRMc8vUA.png"></p>
<h2 id="具名匯入-單一匯入"><a href="#具名匯入-單一匯入" class="headerlink" title="具名匯入(單一匯入)"></a>具名匯入(單一匯入)</h2><p>使用{ }，物件裡放具名匯出的變數或函示名稱。</p>
<p><img src="https://miro.medium.com/max/1214/1*ye59ehCBuMP9-Bvht6HriQ.png"></p>
<h2 id="具名匯入-全部匯入"><a href="#具名匯入-全部匯入" class="headerlink" title="具名匯入(全部匯入)"></a>具名匯入(全部匯入)</h2><p><img src="https://miro.medium.com/max/1054/1*A9xErPA2Zxl5aLuCAAzQrA.png"></p>
<p>使用 * 代表全部模組，全部模組如果全部匯出可能會造成名稱的衝突，所以會將* 賦予到一個 物件上。匯入後就可以用這個物件來調用匯入的變數或方法。</p>
<h2 id="module-的作用域"><a href="#module-的作用域" class="headerlink" title="module 的作用域"></a>module 的作用域</h2><p>每個 module 間的作用域都是獨立的，如下 a 是 undedined。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="匯入-esm-套件"><a href="#匯入-esm-套件" class="headerlink" title="匯入 esm 套件"></a>匯入 esm 套件</h2><p>網路上有些套件有是出 ES module 的版本可以載入，方法如下: </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;https://cdnjs.cloudflare.com/ajax/libs/vue/3.1.4/vue.esm-browser.min.js&#x27;</span>;</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>ES-module</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas (1) 繪製基本圖案</title>
    <url>/2022/08/13/2022-8-13-1-canvas-basic/</url>
    <content><![CDATA[<h2 id="基礎設定"><a href="#基礎設定" class="headerlink" title="基礎設定"></a>基礎設定</h2><p>canvas是原生的 html 標籤，可以用js來操控，繪製各種動畫或圖案。以下介紹基礎設定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 選取canvas元素</span></span><br><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#canvas&#x27;</span>);</span><br><span class="line"><span class="comment">// 設定 context 是 2d or 3d</span></span><br><span class="line"><span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 預設畫布大小是螢幕大小</span></span><br><span class="line">canvas.<span class="property">height</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">canvas.<span class="property">width</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br></pre></td></tr></table></figure>

<h2 id="繪製線條"><a href="#繪製線條" class="headerlink" title="繪製線條"></a>繪製線條</h2><p>基礎設定好後，可以嘗試來繪製線條。</p>
<ul>
<li>moveTo(x, y): 設定起始點的座標</li>
<li>lineTo(x, y): 下一個點的座標</li>
<li>stroke(): 依據座標繪製線條</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 開始繪製</span></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line"><span class="comment">//我們用moveTo(x,y)來指定線的起點座標</span></span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"><span class="comment">//之後使用lineTo(x,y)來指定與前一個座標相連的點</span></span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure>

<p>繪製後會出現水平的線條</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022081301.png?alt=media&token=52fcd54d-c0cf-4f9e-a37a-e72bb56efbae"></p>
<h2 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h2><p>三角形一樣用lineTo指定點的座標，連回原點即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure>

<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022081302.png?alt=media&token=ff4ed4e8-ddcc-445d-819c-662750f8947a"></p>
<p>或者在最後用 closePath()可以自動連回原點。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure>

<h2 id="設定顏色與線條寬度"><a href="#設定顏色與線條寬度" class="headerlink" title="設定顏色與線條寬度"></a>設定顏色與線條寬度</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設定線條寬度</span></span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 設定線條顏色</span></span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;#000&#x27;</span>;</span><br><span class="line"><span class="comment">// 設定填滿顏色</span></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"><span class="comment">// 填滿顏色</span></span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br></pre></td></tr></table></figure>

<p>經過設定顏色後的三角形</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022081303.png?alt=media&token=14978bab-5f29-449e-8703-abb9fa462ff6"></p>
<h2 id="正方形"><a href="#正方形" class="headerlink" title="正方形"></a>正方形</h2><p>正方形一樣可用lineTo指定座標的方式繪製，但canvas有內建繪製正方形的函式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctx.rect(x,y, w, h) // x,y一樣是座標，w和h是四邊形的寬和高*/</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">5</span>;</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;#000&#x27;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">rect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br></pre></td></tr></table></figure>

<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022081304.png?alt=media&token=f59d83c6-8374-4fcc-99ba-85636a4596b3"></p>
<h2 id="圓形"><a href="#圓形" class="headerlink" title="圓形"></a>圓形</h2><p>圓形的繪製使用 arc() 函式 來完成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">arc</span>(x, y, r, s, e)</span><br><span class="line"><span class="comment">// x: x座標</span></span><br><span class="line"><span class="comment">// y: y座標</span></span><br><span class="line"><span class="comment">// r: 圓的半徑</span></span><br><span class="line"><span class="comment">// s: 起點的角度</span></span><br><span class="line"><span class="comment">// e: 終點的角度</span></span><br></pre></td></tr></table></figure>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20180724/2010693504414fOrmj.jpg" alt="s和e角度說明"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">5</span>;</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;#000&#x27;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br></pre></td></tr></table></figure>

<p>因為 Math.PI 代表 180度，所以從 0度 到 Math.PI * 2 就可以畫出 360度的圓形了。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/project-fb4ac.appspot.com/o/2022081305.png?alt=media&token=056b1188-e696-4fa9-b3ff-ca9c93fb0997"></p>
<p>若要繪製半圓則改變起始的角度即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">5</span>;</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;#000&#x27;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">25</span>, <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">1.5</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br></pre></td></tr></table></figure>

















]]></content>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 展開與其餘參數</title>
    <url>/2022/08/11/2022-8-11-1-js-spread-operator/</url>
    <content><![CDATA[<h2 id="展開"><a href="#展開" class="headerlink" title="展開"></a>展開</h2><p>以往合併兩個陣列時，我們會用 concat 語法，如下圖:</p>
<p><img src="https://miro.medium.com/max/1020/1*AmR_SWLbqPwMJ6ilqnxCog.png"></p>
<p>在ES6 我們可以用 …groupA展開的語法，意思是將groupA陣列裡的值分別取出，再塞進新的陣列裡。</p>
<p><img src="https://miro.medium.com/max/948/1*fVRSfV9FF115WgstFpASxg.png"></p>
<h2 id="陣列淺複製"><a href="#陣列淺複製" class="headerlink" title="陣列淺複製"></a>陣列淺複製</h2><p><img src="https://miro.medium.com/max/1210/1*NjmJV3JkhsaK3OlYF5ZZDw.png"></p>
<p>因為陣列是傳參考的特性，所以上圖中，groupA跟groupB裡面都會有 ‘阿明’</p>
<p><img src="https://miro.medium.com/max/1176/1*feuXrhf1hU4vLv5zYE6TfA.png"></p>
<p>如果用…展開的方式，將groupA裡的值一個一個取出，再放進一個新的陣列裡，此時 groupA 跟 groupB 是兩個不同的陣列，groupA不會有 ‘阿明’</p>
<h2 id="類陣列轉為陣列"><a href="#類陣列轉為陣列" class="headerlink" title="類陣列轉為陣列"></a>類陣列轉為陣列</h2><p><img src="https://miro.medium.com/max/1130/1*nccwenEmifGe5qlT5aSaxQ.png"></p>
<p>由於類陣列 nodelist不是陣列，無法使用陣列方法，所以利用展開的方式，將類陣列 nodelist 裡的值取出後，放入新陣列中。如此newDoms就是一個新的陣列，可以使用陣列的方法。</p>
<h2 id="物件的合併"><a href="#物件的合併" class="headerlink" title="物件的合併"></a>物件的合併</h2><p><img src="https://miro.medium.com/max/1022/1*UZtmGDckziMEOj8HIjUWTw.png"></p>
<p><img src="https://miro.medium.com/max/436/1*Oyz0bvL-lb70I2xfb_AjsQ.png"></p>
<p>利用展開語法 ，將兩個物件放入一個新的物件合併，personTwo會複寫與personOne重複的屬性，多的則加入。</p>
<h2 id="其餘參數"><a href="#其餘參數" class="headerlink" title="其餘參數"></a>其餘參數</h2><p>我們可以用 其餘參數來取得不確定數量的參數。如果函式的最後一個命名參數以 … 開頭，它會被視為一個陣列，並將所有參數存入陣列中。</p>
<p><img src="https://miro.medium.com/max/1056/1*QrBRIz50E_WVBnaszhnX7Q.png"></p>
]]></content>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 建構函式</title>
    <url>/2022/08/17/2022-8-17-1-js-constructor/</url>
    <content><![CDATA[<p><img src="https://miro.medium.com/max/1330/1*plHyXH3Pw_nJME6HKoZCBw.png"></p>
<p>在 JS 中可以用一個函式建構式作為原型的藍圖，並利用this的方式，將函式的參數綁定在自己身上。以上圖為例，this.name 就是在 Dog() 裡面新增 name 屬性，而他的值就是 new Dog 傳進的 ‘比比’</p>
<p>若要將藍圖轉為實體，必須透過 new 這個運算子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="comment">// const this = &#123;&#125;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="comment">// return this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;mimi&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>當使用 new 運算子建立物件時，實際上會先建立一個 this 的空物件，綁定屬性到 this物件上後，再回傳this物件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(me.<span class="property">age</span>) <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span>  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>另外建構函式裡的 this 的值，只會綁定在 new 出來的物件實體中，並不在建構函式本身的property裡面。<br>所以我們會將每個物件不同的屬性用 this 來綁定，而每個物件共用的方法，則用 Prototype 的方式建立如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">propotype</span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">propotype</span>.<span class="property">talk</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在藍圖上新增方法"><a href="#在藍圖上新增方法" class="headerlink" title="在藍圖上新增方法"></a>在藍圖上新增方法</h2><p>在 Dog 這個函式物件中，我們可以找到特有的屬性 Prototype，透過Prototype所建立的屬性，就會變成原型上的方法。</p>
<p>以下我們在 Dog這個藍圖中，利用 Prototype 建立 bark()這個方法。</p>
<p><img src="https://miro.medium.com/max/904/1*JPXBzFA0j9XfE2fFVSXMHg.png"></p>
<p>因為透過藍圖產生的不同物件，其原型是同一個建構函式，所以當我們在原型中新增方法時，就可以同時套用至所有產生的物件。好處是能減少記憶體</p>
<h2 id="純值的包裹物件"><a href="#純值的包裹物件" class="headerlink" title="純值的包裹物件"></a>純值的包裹物件</h2><p>在 JS 中新增純值時，會帶有包裹物件，</p>
<p>包裹物件會有特定的方法可以取用，如下圖</p>
<p><img src="https://miro.medium.com/max/824/1*_ZWf6dKEo9HFxRP2b8n38w.png"></p>
<p><img src="https://miro.medium.com/max/546/1*G766dfSEg775Y4pmHy_jTg.png"></p>
<p>也可以在包裹物件中，新增自定義 prototype 方法</p>
<p><img src="https://miro.medium.com/max/1068/1*DWkNiANU1gO6prqXYOKQIA.png"></p>
<h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Sina&#x27;</span>);</span><br><span class="line"></span><br><span class="line">me.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// undefined</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// &#123; contructor: f &#125;</span></span><br></pre></td></tr></table></figure>
<p>用建構式製造的物件實體，並沒有 prototype，  prototype 屬性是在原本的建構函式上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">me.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// true;</span></span><br></pre></td></tr></table></figure>

<p>物件實體有的是 <strong>proto</strong> 屬性，和建構函式的 prototype 是一樣的。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>JS 執行緒 and 同步與非同步</title>
    <url>/2022/08/18/2022-8-18-1-sync-async/</url>
    <content><![CDATA[<h2 id="單執行緒"><a href="#單執行緒" class="headerlink" title="單執行緒"></a>單執行緒</h2><p>JS是一個單執行緒的語言，是作業系統的運行概念。<br>指的是程式面對多個任務時，只能一次處理一個，依序處理下去，不能同時處理多個任務。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*fsA5wPsJ6uV7huO-wDTtxg.png"></p>
<p>如上圖，小明只能先吃完早餐，再打給漂亮阿姨，最後在洗碗，無法三個一起進行。多執行緒指的則是，三個任務可以同時執行。</p>
<h2 id="同步-Synchronous"><a href="#同步-Synchronous" class="headerlink" title="同步(Synchronous)"></a>同步(Synchronous)</h2><p>指的是程式必須依照順序依序處理任務，不會直接跳到下個任務。<br>像這樣先完成 A 才能做 B、C、D …」的運作方式我們就會把它稱作「同步」。</p>
<h2 id="非同步-Asynchronous"><a href="#非同步-Asynchronous" class="headerlink" title="非同步(Asynchronous)"></a>非同步(Asynchronous)</h2><p>凡是需要取用外部資源或是某段程式碼會延遲執行都算是非同步事件，例如：點擊 click 事件、setTimeout、串接外部 API 等等…<br>這種非依序執行的，都是非同步行為。</p>
<p>JS在執行程式碼時，是依照同步的概念，也就是依序執行。<br>如果遇到非同步的任務，如 setTimeout() 等會延遲執行的程式。<br>會先將非同步任務放到事件儲列，等所有程式跑完後，再執行事件儲列裡的任務。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*-WBrRoNeTd_dXzeMJnWa1A.png"></p>
<p>如上圖， 依序執行 吃早餐 &gt; 打給漂亮阿姨 &gt; 洗餐盤 &gt; 漂亮阿姨回電<br>其中 漂亮阿姨回電 是非同步事件 setTimeout ，所以會先放在事件儲列中，<br>等所有程式跑完，最後在執行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面 for 迴圈的程式屬於同步程式，setTimeout 屬於非同步。所以 for 迴圈先執行三次後，才會執行事件儲列裡的 setTimeout，此時<br>i 已經是 3了。</p>
<h2 id="阻塞（blocking）"><a href="#阻塞（blocking）" class="headerlink" title="阻塞（blocking）"></a>阻塞（blocking）</h2><p>當執行程式碼片段需要等待很長一段時間，或好像「卡住」的這種現象，被稱作 阻塞（blocking），假設請求資料的 AJAX Request 變成同步（Synchronous）處理的話，那麼每 request 一次，因為必需等這個函式執行完畢從堆疊（stack）中跳離開後才能往下繼續走，進而導致阻塞的情形產生，以下面的 pseudo code 為例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pseudo code</span></span><br><span class="line"><span class="keyword">var</span> foo = $.<span class="title function_">getSync</span>(<span class="string">&#x27;//foo.com&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> bar = $.<span class="title function_">getSync</span>(<span class="string">&#x27;//bar.com&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> qux = $.<span class="title function_">getSync</span>(<span class="string">&#x27;//qux.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(qux);</span><br></pre></td></tr></table></figure>

<h2 id="Event-loop"><a href="#Event-loop" class="headerlink" title="Event loop"></a>Event loop</h2><p><img src="/../images/js/call-stack-3.png"></p>
<p>對瀏覽器執行 js 的引擎而言(如 chrome 的 v8引擎)，JS是一個單執行緒的語言，一次只能執行一個任務。但瀏覽器除了js的執行引擎外，也提供了 Web API 給我們使用，讓我們能同時執行不同任務。</p>
<p>以下面這段程式碼為例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我去上學&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打電話給老師&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下課了&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>執行結果會是 ‘我去上學’ &#x3D;&gt; ‘下課了’ &#x3D;&gt; ‘打電話給老師’;</p>
<p>流程如下: </p>
<ol>
<li><p>執行 console.log(‘我去上學’);</p>
</li>
<li><p>當執行到 setTimeout 時，因為 setTimeout 屬於 web api，會被移到 web api 去執行。</p>
</li>
<li><p>執行 console.log(‘下課了’);</p>
</li>
<li><p>當 setTimeout 的計時器到了後，將 callback function 移到 event queue 事件儲列做等待。</p>
</li>
<li><p>event loop 會一直觀察 callstack(執行環境) 是否為空，若為空則將 event queue 內等待的 callback function 移回 callstack 作執行。</p>
</li>
</ol>
<p><img src="/../images/js/call-stack-4.png" alt="setTimeout 被移到 web api 執行"></p>
<p><img src="/../images/js/call-stack-5.png" alt="callback function 移回 event queue 事件儲列做等待"></p>
<p><img src="/../images/js/call-stack-7.png" alt="callback function 移回 callstack 作執行"></p>
<!-- JavaScript 是單執行緒語言，這意味著它一次只能執行一個任務。然而，為了實現非同步行為，它依賴於事件循環。事件循環是一種機制，允許 JavaScript 在等待某些操作完成時（如 I/O 操作、計時器、網絡請求等）不阻塞主執行緒，從而可以繼續執行其他代碼。

事件循環的工作流程:

1. 執行棧（Call Stack）：JavaScript 執行同步代碼的地方。當函數被調用時，它會被添加到執行棧頂部，當函數執行完成後，會從棧中移除。

2. Web API：當 JavaScript 執行非同步代碼時（如 setTimeout、fetch 等），這些調用會被發送到瀏覽器的 Web API，Web API 在後台處理這些請求。

3. 事件儲列（Task Queue/Callback Queue）：當 Web API 完成非同步操作後，對應的回調函數會被放入事件隊列中，等待執行。

4. 事件循環（Event Loop）：事件循環不斷地檢查執行棧是否為空。如果執行棧為空，事件循環會將事件隊列中的第一個回調函數移入執行棧，然後執行它。

![教學網址](https://youtu.be/8aGhZQkoFbQ?t=1103) -->






]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>ES6 樣板字面值</title>
    <url>/2022/08/20/2022-8-20-1-template-strings/</url>
    <content><![CDATA[<h2 id="ES6-樣板字面值"><a href="#ES6-樣板字面值" class="headerlink" title="ES6 樣板字面值"></a>ES6 樣板字面值</h2><p><img src="https://miro.medium.com/max/1400/1*5YA_01lRWRrI6JmEpZ_nKw.png"></p>
<p>在以前，當我們需要在JS中加入字串和變數時，需要用 ‘ ‘ 來相加，有時不太方便。在ES6以後，我們有了新的組字串方法，樣板字面值。</p>
<p>在ES6以後，我們有了新的組字串方法，樣板字面值</p>
<ol>
<li>使用 <code> </code>將字串包住</li>
<li>樣板字面值包含由錢字元及花括號所構成（${expression}）的佔位符號。</li>
<li>${ }內 可以加入變數，或是表達式。</li>
</ol>
<p>所以上圖我們可以修改為:</p>
<p><img src="https://miro.medium.com/max/1266/1*a29DtXuoV377hfJWerohaQ.png"></p>
<p>${} 也可插入函式，如下圖插入了立即函示:</p>
<p><img src="https://miro.medium.com/max/1400/1*nNF7L_S13WZmghpY0M9_fA.png"></p>
<h2 id="巢狀結構"><a href="#巢狀結構" class="headerlink" title="巢狀結構"></a>巢狀結構</h2><p>樣板字面值內，還可以插入另一組樣板字面值。</p>
<p><img src="https://miro.medium.com/max/1400/1*XYoDm5T10uE29wpd_ZPNDg.png"></p>
<p>也可直接在${ }內做函式運算</p>
<p><img src="https://miro.medium.com/max/1400/1*RxYStv56lZ9Rs8OqQWWjUA.png"></p>
]]></content>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 陣列方法</title>
    <url>/2022/08/02/2022-8-2-1-js-array/</url>
    <content><![CDATA[<p><img src="https://miro.medium.com/max/1400/1*itebCZpmLKF37J-JvBZzlA.png"></p>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>針對原陣列跑迴圈，方法會將陣列內的每個元素，皆傳入並執行給定的函式一次。不會產生新的陣列。依照陣列的長度，決定執行的次數。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">array1.<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(element));</span><br><span class="line"></span><br><span class="line"><span class="comment">// expected output: &quot;a&quot;</span></span><br><span class="line"><span class="comment">// expected output: &quot;b&quot;</span></span><br><span class="line"><span class="comment">// expected output: &quot;c&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="filter-陣列篩選"><a href="#filter-陣列篩選" class="headerlink" title="filter 陣列篩選"></a>filter 陣列篩選</h2><p>針對初始陣列跑迴圈，filter() 會一一將陣列中的每個元素帶入函式測試，如果函式的回傳值為 true，則會將當前的元素回傳至新陣列中，若為 false 則不保留。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> words = [<span class="string">&#x27;spray&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;elite&#x27;</span>, <span class="string">&#x27;exuberant&#x27;</span>, <span class="string">&#x27;destruction&#x27;</span>, <span class="string">&#x27;present&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = words.<span class="title function_">filter</span>(<span class="function"><span class="params">word</span> =&gt;</span> word.<span class="property">length</span> &gt; <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="map-陣列轉換"><a href="#map-陣列轉換" class="headerlink" title="map 陣列轉換"></a>map 陣列轉換</h2><p>map() 方法會建立一個新的陣列，其內容為原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合。適合用來做陣列的轉換</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// pass a function to map</span></span><br><span class="line"><span class="keyword">const</span> map1 = array1.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map1);</span><br><span class="line"><span class="comment">// expected output: Array [2, 8, 18, 32]</span></span><br></pre></td></tr></table></figure>

<h2 id="sort-陣列排序"><a href="#sort-陣列排序" class="headerlink" title="sort 陣列排序"></a>sort 陣列排序</h2><p>sort() 方法用來重新排序陣列中的元素，預設會將元素轉型成「字串」做比較，比較的方式是從左到右逐一比對元素中的每個字元的 Unicode code point 大小。</p>
<h3 id="字串排序"><a href="#字串排序" class="headerlink" title="字串排序"></a>字串排序</h3><p><img src="https://cdn-images-1.medium.com/max/1320/1*z2ppQd5xApaAlJjqeEzsqw.png"></p>
<h3 id="數字排序"><a href="#數字排序" class="headerlink" title="數字排序"></a>數字排序</h3><p><img src="https://cdn-images-1.medium.com/max/1320/1*0h6KmjMf7vl4m0xcF8PCSA.png"></p>
<h3 id="自定排序"><a href="#自定排序" class="headerlink" title="自定排序"></a>自定排序</h3><p><img src="https://cdn-images-1.medium.com/max/1320/1*_tzsJRXfE-3qj6lBZeU-nw.png"></p>
<p>(a, b) 函數接受兩個參數，分別表示兩個元素值怎麼做比較，然後傳回一個數字，可能是正數、0 或負數：</p>
<ul>
<li>(a, b) 回傳值如果小於 0 (負數)，表示 a 排序在 b 前面</li>
<li>(a, b) 回傳值如果等於 0，表示 a 和 b 排序一樣位置不動</li>
<li>(a, b) 回傳值如果大於 0 (正數)，表示 b 排序在 a 前面</li>
</ul>
<h3 id="日期排序"><a href="#日期排序" class="headerlink" title="日期排序"></a>日期排序</h3><p><img src="https://cdn-images-1.medium.com/max/1320/1*9LaeppvPar4XHz7MrxopWA.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*ApSomNizClW_MK5vbfWLSA.png"></p>
<p>將日期傳入 new Date()函式中，會返回一個 時間戳(timestamp)，再將兩個時間戳相減，可以做到日期的排序。</p>
<h2 id="reduce-陣列加總"><a href="#reduce-陣列加總" class="headerlink" title="reduce 陣列加總"></a>reduce 陣列加總</h2><p><img src="https://cdn-images-1.medium.com/max/1320/1*WLYU9gJM4hK0Cn408IukwQ.png"></p>
<p>reduce 會有一個 total 參數作為加總結果，本範例預設從 0 開始加，每運算一次會經過一筆資料(inventor)，運算的內容為 發明家過世年-出生年 一路累加下去，運算流程如下:</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*WS5Ce5AmGuksv8FhAejKqg.png"></p>
<h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>some() 方法會透過給定函式、測試陣列裡的每個 item 是否符合條件，有一個符合條件，就回傳true 不然回傳false。</p>
<p><img src="https://cdn-images-1.medium.com/max/1320/1*F-tchb0UZv76sUS9yHb_Ew.png"></p>
<h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>檢查陣列裡的物件，全部都符合條件，就回傳true 不然回傳false</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*E8ILL1afqzt52uxLiKQN1A.png"></p>
<h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><p>當我們的陣列內容很簡單時，比如只有字串或數字，而我們想檢查陣列是否有特定值時，可以用includes()方法，有值則回傳true，否則false</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*4Le_kfZHTKWL0UmBrNTupg.png"></p>
<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>在陣列中尋找符合條件的資料，找到後回傳第一筆資料，否則回傳 undefined。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> found = array1.<span class="title function_">find</span>(<span class="function"><span class="params">element</span> =&gt;</span> element &gt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(found);</span><br><span class="line"><span class="comment">// expected output: 12</span></span><br></pre></td></tr></table></figure>

<h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h2><p>在陣列中尋找符合條件的物件，找到後回傳第一筆物件的排序。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*VcWqnARGsPZYBhLouFqRQA.png"></p>
<h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><p>splice() 方法可以藉由刪除既有元素並／或加入新元素來改變一個陣列的內容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">splice</span>(要插入或刪除的索引位置, 刪除筆數, 插入的元素)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> months = [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;June&#x27;</span>];</span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;Feb&#x27;</span>);</span><br><span class="line"><span class="comment">// inserts at index 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(months);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</span></span><br><span class="line"></span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&#x27;May&#x27;</span>);</span><br><span class="line"><span class="comment">// replaces 1 element at index 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(months);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>slice() 方法會回傳一個新陣列物件，為原陣列選擇之 begin 至 end（不含 end）部分的淺拷貝（shallow copy）。而原本的陣列將不會被修改。</p>
<p><img src="https://miro.medium.com/max/1400/1*CDZGHAJV-RjQ62NohMnyAQ.png"></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中元素的clientHeight、offsetHeight 與 scrollHeight</title>
    <url>/2022/08/25/2022-8-25-1-element-clientHeight/</url>
    <content><![CDATA[<h2 id="clientHeight-與-clientTop"><a href="#clientHeight-與-clientTop" class="headerlink" title="clientHeight 與 clientTop"></a>clientHeight 與 clientTop</h2><p><img src="https://cdn-images-1.medium.com/max/1200/1*4fwuwle44US_DYi5lJo9WA.png"></p>
<ul>
<li><p>clientHeight: 元素包含padding但不包括 margin 、border、 水平滾動條的高度。單位為px、唯讀元素。</p>
</li>
<li><p>clientWidth:  元素包含padding但不包括 margin 、border、 垂直滾動條的寬度。單位為px、唯讀元素。</p>
</li>
<li><p>clientTop: 元素頂部邊框寬度單位為 px，可以理解為 border-top。如没有设置 border-top的值，则 element.clientTop 的值为 0</p>
</li>
</ul>
<h2 id="offsetHeight-與-offsetTop"><a href="#offsetHeight-與-offsetTop" class="headerlink" title="offsetHeight 與 offsetTop"></a>offsetHeight 與 offsetTop</h2><p><img src="blob:https://medium.com/58fee995-a9c2-4324-9262-ddc7ce538e55"></p>
<ul>
<li><p>offsetHeight: 元素包含padding 、 border 、 水平滾動條的高度 但不包括 margin。</p>
</li>
<li><p>offsetWidth: 元素包含padding 、 border 、 垂直滾動條的寬度 但不包括 margin。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>JS 基礎篇 (8) 透過 DOM API 查找節點</title>
    <url>/2024/04/24/2022-8-9-1-js-dom-trace/</url>
    <content><![CDATA[<h2 id="Bom-與-Dom-是什麼"><a href="#Bom-與-Dom-是什麼" class="headerlink" title="Bom 與 Dom 是什麼"></a>Bom 與 Dom 是什麼</h2><p>前端開發者在網頁上的操作方法，都是由瀏覽器所提供的，Js本身並沒有提供網頁操作方法。<br>這些操作方法由 「BOM」與 「Dom」所擁有:</p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/0*A6XZonNYmKAnSJy3"></p>
<h3 id="BOM-Browser-Object-Model-瀏覽器物件模型"><a href="#BOM-Browser-Object-Model-瀏覽器物件模型" class="headerlink" title="BOM(Browser Object Model 瀏覽器物件模型):"></a>BOM(Browser Object Model 瀏覽器物件模型):</h3><p>BOM 的核心其實是 window 物件。而 window 物件提供的屬性主要為 document、location、navigator、screen、history 以及 frames。</p>
<p>在瀏覽器裡的 window 物件扮演著兩種角色：</p>
<ul>
<li>ECMAScript 標準裡的「全域物件」 (Global Object)</li>
<li>JavaScript 用來與瀏覽器溝通的窗口</li>
</ul>
<p>window 提供了許多屬性和方法，用於操作瀏覽器視窗和其中載入的文件。以下是 window 物件的一些常見屬性和方法：</p>
<ul>
<li>window.document: 表示目前視窗中載入的文件，可以通過它來訪問和操作文件的內容、結構和樣式。</li>
<li>window.location: 用於獲取或設置目前視窗的URL。</li>
<li>window.alert(): 顯示一個警告框，包含指定的訊息和一個“確定”按鈕。</li>
</ul>
<h3 id="DOM-Document-Object-Model-文本物件模型"><a href="#DOM-Document-Object-Model-文本物件模型" class="headerlink" title="DOM (Document Object Model 文本物件模型):"></a>DOM (Document Object Model 文本物件模型):</h3><p>dom 是將html以樹狀的結構來表示的模型，最根部是document，往下則是 html 標籤節點，再往下則是文本節點和屬性節點。<br>dom api 就是定義能操作 html 架構、樣式的方法。 </p>
<h2 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h2><p>選取特定id的元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bob&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bob = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;bob&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="getElementByClassName"><a href="#getElementByClassName" class="headerlink" title="getElementByClassName"></a>getElementByClassName</h2><p>選取所有包含指定class的元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bob = <span class="variable language_">document</span>. <span class="title function_">getElementByClassName</span>(<span class="string">&#x27;card&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h2><p>querySelector 使用 css 選擇器來選取一個元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bob = <span class="variable language_">document</span>. <span class="title function_">querySelector</span>(<span class="string">&#x27;.card&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h2><p>querySelectorAll 使用 css 選擇器來選取多個元素，會回傳一個collection(不是陣列)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bob = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.card&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Node-children"><a href="#Node-children" class="headerlink" title="Node.children"></a>Node.children</h2><p>Node.children 會回傳所有Node 節點的子節點，會回傳一個collection。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container &quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cards = container.<span class="property">children</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Node-parentElement"><a href="#Node-parentElement" class="headerlink" title="Node.parentElement"></a>Node.parentElement</h2><p>透過 Node.parentElement 可以用來取得父元素，回傳值只會是一個元素節點 (Element node)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> card = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.card&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> parent = card.<span class="property">parentElement</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Node-closest"><a href="#Node-closest" class="headerlink" title="Node.closest"></a>Node.closest</h2><p>Node.closest 會一路往上找，取得符合條件的父元素。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*-En99lg7L95i7glPXF-PYA.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*QkZmAc54hcar7Iy-yVlOTw.png"></p>
<h2 id="Node-previousSibling"><a href="#Node-previousSibling" class="headerlink" title="Node.previousSibling"></a>Node.previousSibling</h2><p>透過 Node.previousSibling 可以取得同層之間的「前一個」節點，如果 node 已經是第一個節點，則回傳 null。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cardOne = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.card&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cardTwo = <span class="variable language_">document</span>.<span class="property">previousSibling</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Node-nextSibling"><a href="#Node-nextSibling" class="headerlink" title="Node.nextSibling"></a>Node.nextSibling</h2><p>與 Node.previousSibling 類似，透過 Node.nextSibling 可以取得同層之間的「下一個」節點，如果 node 已經是最後一個節點，則回傳 null。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cardOne = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.card&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cardTwo = <span class="variable language_">document</span>.<span class="property">nextSibling</span>;</span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>JS 基礎篇</category>
      </categories>
      <tags>
        <tag>JS 基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 基礎篇 (9) DOM Node 的建立、刪除與修改</title>
    <url>/2022/08/07/2022-8-7-1-dom-manipulation/</url>
    <content><![CDATA[<h2 id="新增節點"><a href="#新增節點" class="headerlink" title="新增節點"></a>新增節點</h2><h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;element&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/max/922/1*YbdC8phChHpaXIwadplUhg.png"></p>
<p>透過 document.createElement() 可以建立一個新的元素，在建立新的 div 元素 newDiv 後，這時候我們在瀏覽器上還看不到它，直到透過 appendChild()、insertBefore() 或 replaceChild() 等方法將新元素加入至指定的位置之後才會顯示。</p>
<h3 id="createDocumentFragment"><a href="#createDocumentFragment" class="headerlink" title="createDocumentFragment"></a>createDocumentFragment</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br></pre></td></tr></table></figure>

<p>createDocumentFragment() 是一種沒有父層節點的「最小化文件物件」。 可以把它看作是一個輕量化的 Document，用如同標準文件一般的方式來保存「片段的文件結構」。</p>
<p><img src="https://miro.medium.com/max/1354/1*IhyIKgVykoa64qi5s2Q4wQ.png"></p>
<h2 id="插入節點"><a href="#插入節點" class="headerlink" title="插入節點"></a>插入節點</h2><p>接下來要介紹的幾個方法，說明要如何將剛剛建立好的 DOM 節點，置入到我們所指定的位置。</p>
<h3 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">NODE</span>.<span class="title function_">appendChild</span>(childNode)</span><br></pre></td></tr></table></figure>

<p>透過 appendChild 方法，可以將指定的 childNode 節點，加入到 Node 父容器節點的末端：</p>
<p><img src="https://miro.medium.com/max/1400/1*Duv1uiJyztP5av1hgMhwoA.png"></p>
<h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">NODE</span>.<span class="title function_">append</span>(childNode || <span class="title class_">String</span>)</span><br></pre></td></tr></table></figure>

<p>和appendChild 一樣將節點加入父層末段，但除了節點以外，也能加入字串。</p>
<h2 id="刪除節點"><a href="#刪除節點" class="headerlink" title="刪除節點"></a>刪除節點</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="title function_">remove</span>()  <span class="comment">// 刪除節點</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> child = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.child&#x27;</span>);</span><br><span class="line">div.<span class="title function_">removeChild</span>(child) <span class="comment">// 刪除子元素</span></span><br></pre></td></tr></table></figure>

<h2 id="操作元素的屬性"><a href="#操作元素的屬性" class="headerlink" title="操作元素的屬性"></a>操作元素的屬性</h2><h3 id="取得屬性內容"><a href="#取得屬性內容" class="headerlink" title="取得屬性內容"></a>取得屬性內容</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;hi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>) <span class="comment">//hi</span></span><br><span class="line">div.<span class="property">id</span> <span class="comment">// hi</span></span><br></pre></td></tr></table></figure>

<h3 id="設定屬性內容"><a href="#設定屬性內容" class="headerlink" title="設定屬性內容"></a>設定屬性內容</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>); <span class="comment">// 將id屬性設為 hi</span></span><br></pre></td></tr></table></figure>

<h3 id="移除屬性"><a href="#移除屬性" class="headerlink" title="移除屬性"></a>移除屬性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;aa&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bob&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;title&#x27;</span>); <span class="comment">// 將titile屬性移除</span></span><br></pre></td></tr></table></figure>

<h3 id="data屬性操作"><a href="#data屬性操作" class="headerlink" title="data屬性操作"></a>data屬性操作</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-test</span>=<span class="string">&quot;this is a test&quot;</span> <span class="attr">data-num</span>=<span class="string">&quot;123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.<span class="property">dataset</span>.<span class="property">test</span> <span class="comment">// this is a test</span></span><br><span class="line">div.<span class="property">dataset</span>.<span class="property">num</span> <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<h2 id="操作元素的class"><a href="#操作元素的class" class="headerlink" title="操作元素的class"></a>操作元素的class</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;new-class&#x27;</span>); <span class="comment">// 新增class</span></span><br><span class="line">div.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;new-class&#x27;</span>); <span class="comment">// 移除class</span></span><br><span class="line">div.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;new-class&#x27;</span>); <span class="comment">// 有class則移除class，沒有則加入該class</span></span><br></pre></td></tr></table></figure>

<h2 id="直接操作元素的css"><a href="#直接操作元素的css" class="headerlink" title="直接操作元素的css"></a>直接操作元素的css</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;black&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="節點-node-與元素-element-的區分"><a href="#節點-node-與元素-element-的區分" class="headerlink" title="節點(node)與元素(element)的區分"></a>節點(node)與元素(element)的區分</h2><p>基本上 html 裡的節點包含所有的html標籤、換行、文字，而元素只包含的html標籤。<br>當我們在js裡用不同的選取dom方法時，依照方法不同會回傳 HTML Collection 或 Nodelist。</p>
<ul>
<li>HTML Collection: 當元素增減時，會自動更新。</li>
<li>Nodelist: 依照選取方法不同，有的會自動更新，有的不會。</li>
</ul>
<p>這邊推薦使用會回傳 Nodelist 的選取方法，如 querySelectorAll。因為元素如果會自動更新，出錯時很難維護。</p>
<p><a href="https://www.youtube.com/watch?v=rhvec8cXLlo&ab_channel=WebDevSimplified">影片教學</a></p>
<h2 id="新增文字"><a href="#新增文字" class="headerlink" title="新增文字"></a>新增文字</h2><p>新增文字有兩種方法 textContent 、 innerText</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.<span class="property">innerText</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">div.<span class="property">textContent</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>兩個方法都能加入文字，但innerText只顯示會出現螢幕上的文字，textContent則顯示全部文字。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>Tim<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">textContent</span>); <span class="comment">// Hello Tim</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">innerText</span>); <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure>


<h2 id="新增-html"><a href="#新增-html" class="headerlink" title="新增 html"></a>新增 html</h2><p>innerHTML 可以在元素內加入 html 結構，並清除元素原有內容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;span&gt;Hello&lt;span&gt;&#x27;</span></span><br></pre></td></tr></table></figure>










]]></content>
      <categories>
        <category>JS 基礎篇</category>
      </categories>
      <tags>
        <tag>JS 基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>leaflet (2) 使用 Layer Groups</title>
    <url>/2022/09/20/2022-9-20-1-leaflet-1/</url>
    <content><![CDATA[<h2 id="Layer-groups"><a href="#Layer-groups" class="headerlink" title="Layer groups"></a>Layer groups</h2><p>假設我們有一些資料想整理在一起，一次控制。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> littleton = L.<span class="title function_">marker</span>([<span class="number">39.61</span>, -<span class="number">105.02</span>]).<span class="title function_">bindPopup</span>(<span class="string">&#x27;This is Littleton, CO.&#x27;</span>),</span><br><span class="line">    denver    = L.<span class="title function_">marker</span>([<span class="number">39.74</span>, -<span class="number">104.99</span>]).<span class="title function_">bindPopup</span>(<span class="string">&#x27;This is Denver, CO.&#x27;</span>),</span><br><span class="line">    aurora    = L.<span class="title function_">marker</span>([<span class="number">39.73</span>, -<span class="number">104.8</span>]).<span class="title function_">bindPopup</span>(<span class="string">&#x27;This is Aurora, CO.&#x27;</span>),</span><br><span class="line">    golden    = L.<span class="title function_">marker</span>([<span class="number">39.77</span>, -<span class="number">105.23</span>]).<span class="title function_">bindPopup</span>(<span class="string">&#x27;This is Golden, CO.&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>可以使用 <a href="https://leafletjs.com/reference.html#layergroup">Layer Group Class</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cities = L.<span class="title function_">layerGroup</span>([littleton, denver, aurora, golden]);</span><br></pre></td></tr></table></figure>

<p>這樣我們就建立了一筆 cities 的 layer group囉。</p>
<h2 id="Layers-Control"><a href="#Layers-Control" class="headerlink" title="Layers Control"></a>Layers Control</h2><p>在 leaflet 裡有兩種圖層:</p>
<ul>
<li><p>base layers: 基本圖層，一次只能顯示一層，例如 tile layers。</p>
</li>
<li><p>overlays: 加在基本圖層上的其他圖層。</p>
</li>
</ul>
<p>現在可以先建立兩個基本圖層，並加入 map 裡。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> osm = L.<span class="title function_">tileLayer</span>(<span class="string">&#x27;https://tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">maxZoom</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="attr">attribution</span>: <span class="string">&#x27;© OpenStreetMap&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> streets = L.<span class="title function_">tileLayer</span>(mapboxUrl, &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;mapbox/streets-v11&#x27;</span>,</span><br><span class="line">  <span class="attr">tileSize</span>: <span class="number">512</span>, <span class="attr">zoomOffset</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">attribution</span>: mapboxAttribution</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> map = L.<span class="title function_">map</span>(<span class="string">&#x27;map&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">center</span>: [<span class="number">39.73</span>, -<span class="number">104.99</span>],</span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">layers</span>: [osm, cities]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>再來建立兩個物件，一個 base layers，一個 overlays。物件裡的key是顯示在control上的名稱，value 則是對應的圖層。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> baseMaps = &#123;</span><br><span class="line">    <span class="string">&quot;OpenStreetMap&quot;</span>: osm,</span><br><span class="line">    <span class="string">&quot;Mapbox Streets&quot;</span>: streets</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> overlayMaps = &#123;</span><br><span class="line">    <span class="string">&quot;Cities&quot;</span>: cities</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>也可以直接將樣式帶入 key，如下 Grayscale 會以灰色顯示。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> baseMaps = &#123;</span><br><span class="line">    <span class="string">&quot;&lt;span style=&#x27;color: gray&#x27;&gt;Grayscale&lt;/span&gt;&quot;</span>: grayscale,</span><br><span class="line">    <span class="string">&quot;Streets&quot;</span>: streets</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>最後可以來建立 layer control，第一個參數是 base layer物件，第二個參數是 overlayer 物件。兩個參數都是optional。可以只傳入baseLayer物件，省略第二個參數，或只傳入第二個參數，第一個參數設為null。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> layerControl = L.<span class="property">control</span>.<span class="title function_">layers</span>(baseMaps, overlayMaps).<span class="title function_">addTo</span>(map);</span><br></pre></td></tr></table></figure>

<p>來看看<a href="https://leafletjs.com/examples/layers-control/example.html">完成範例</a>吧</p>
<p>最後，圖層也可以動態增減</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> crownHill = L.<span class="title function_">marker</span>([<span class="number">39.75</span>, -<span class="number">105.09</span>]).<span class="title function_">bindPopup</span>(<span class="string">&#x27;This is Crown Hill Park.&#x27;</span>),</span><br><span class="line">    rubyHill = L.<span class="title function_">marker</span>([<span class="number">39.68</span>, -<span class="number">105.00</span>]).<span class="title function_">bindPopup</span>(<span class="string">&#x27;This is Ruby Hill Park.&#x27;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> parks = L.<span class="title function_">layerGroup</span>([crownHill, rubyHill]);</span><br><span class="line"><span class="keyword">var</span> satellite = L.<span class="title function_">tileLayer</span>(mapboxUrl, &#123;<span class="attr">id</span>: <span class="string">&#x27;MapID&#x27;</span>, <span class="attr">tileSize</span>: <span class="number">512</span>, <span class="attr">zoomOffset</span>: -<span class="number">1</span>, <span class="attr">attribution</span>: mapboxAttribution&#125;);</span><br><span class="line"></span><br><span class="line">layerControl.<span class="title function_">addBaseLayer</span>(satellite, <span class="string">&quot;Satellite&quot;</span>);</span><br><span class="line">layerControl.<span class="title function_">addOverlay</span>(parks, <span class="string">&quot;Parks&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>leaflet</tag>
      </tags>
  </entry>
  <entry>
    <title>leaflet (3) Map class 介紹</title>
    <url>/2022/09/20/2022-9-20-2-leaflet-2/</url>
    <content><![CDATA[<h2 id="建立-map"><a href="#建立-map" class="headerlink" title="建立 map"></a>建立 map</h2><p>和第一章介紹過的一樣，可以用 .map() 方法快速建立一個 map。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// initialize the map on the &quot;map&quot; div with a given center and zoom</span></span><br><span class="line"><span class="keyword">var</span> map = L.<span class="title function_">map</span>(<span class="string">&#x27;map&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">center</span>: [<span class="number">51.505</span>, -<span class="number">0.09</span>],</span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">13</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>在建立map的方法裡，第二個參數會傳入 options參數(物件)，來設定map相關數值。以下介紹不同種類的options。</p>
<h3 id="State-Options"><a href="#State-Options" class="headerlink" title="State Options"></a><a href="https://leafletjs.com/reference.html#map-center">State Options</a></h3><p>設定地圖相關數值的options，常用的如:</p>
<ul>
<li>zoom: 地圖預設縮放大小  </li>
<li>maxZoom: 最大縮放級距</li>
<li>minZoom: 最小縮放級距</li>
<li>center: 地圖中心位置(經緯度) 例: [121.02, 53]</li>
</ul>
<h3 id="Control-options"><a href="#Control-options" class="headerlink" title="Control options"></a><a href="https://leafletjs.com/reference.html#map-attributioncontrol">Control options</a></h3><ul>
<li>attributionControl: arttribution是否被加入, 預設為true</li>
<li>zoomControl: 地圖縮放面板是否被加入, 預設為true</li>
</ul>
<h3 id="Locate-options"><a href="#Locate-options" class="headerlink" title="Locate options"></a><a href="https://leafletjs.com/reference.html#locate-options-watch">Locate options</a></h3><p>使用者目前位置相關設定</p>
<ul>
<li>setView: 自動將地圖設定到使用者位置。 true | false</li>
<li>watch: 持續觀測使用者位置。 true | false</li>
</ul>
<p>其他還有很多options，大家可以到官網查詢</p>
<ul>
<li><a href="https://leafletjs.com/reference.html#map-zoomanimation">Animation Options</a>:設定地圖動畫數值</li>
<li><a href="https://leafletjs.com/reference.html#map-closepopuponclick">Interaction Options</a>: 地圖互動相關數值</li>
<li><a href="https://leafletjs.com/reference.html#map-scrollwheelzoom">Mouse wheel options</a>: 滑鼠相關設定</li>
</ul>
<h2 id="Events-事件"><a href="#Events-事件" class="headerlink" title="Events 事件"></a>Events 事件</h2><p>我們也可以在地圖上監聽事件，常用的事件如下</p>
<h3 id="state-change-events"><a href="#state-change-events" class="headerlink" title="state change events"></a><a href="https://leafletjs.com/reference.html#map-resize">state change events</a></h3><p>當地圖資料更改時觸發</p>
<ul>
<li>resize: 當地圖大小變更時觸發</li>
<li>moveend: 地圖移動完畢觸發</li>
<li>zoomend: 地圖縮放完畢時觸發</li>
</ul>
<h3 id="Interaction-events"><a href="#Interaction-events" class="headerlink" title="Interaction events"></a><a href="https://leafletjs.com/reference.html#map-click">Interaction events</a></h3><p>常用的如 click、mousemove、keyup等等，和原生js的事件差不多。</p>
<h2 id="Methods-方法"><a href="#Methods-方法" class="headerlink" title="Methods 方法"></a>Methods 方法</h2><p>map可以觸發的方法，常用如下: </p>
<h3 id="圖層相關方法"><a href="#圖層相關方法" class="headerlink" title="圖層相關方法"></a><a href="https://leafletjs.com/reference.html#map-addcontrol">圖層相關方法</a></h3><ul>
<li>addControl: 增加 control 到地圖</li>
<li>addLayer: 增加指定 layer 到地圖</li>
<li>eachLayer: 對每個圖層做loop，類似 js 的forEach</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">map.<span class="title function_">eachLayer</span>(<span class="keyword">function</span>(<span class="params">layer</span>)&#123;</span><br><span class="line">    layer.<span class="title function_">bindPopup</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="修改地圖資料的方法"><a href="#修改地圖資料的方法" class="headerlink" title="修改地圖資料的方法"></a><a href="https://leafletjs.com/reference.html#map-setview">修改地圖資料的方法</a></h3><ul>
<li>setView(center[latlng], zoom): 設定地圖中心點([123.5, 23])和 縮放大小。</li>
<li>setZoom(Number): 設定縮放大小</li>
<li>panTo([latlng]): 將地圖移動到指定座標</li>
<li>flyTo([latlng]): 以動畫的方式移動到指定座標</li>
</ul>
<h3 id="取得地圖資料方法"><a href="#取得地圖資料方法" class="headerlink" title="取得地圖資料方法"></a><a href="https://leafletjs.com/reference.html#map-getcenter">取得地圖資料方法</a></h3><ul>
<li>getCenter: 取得地圖中心點座標</li>
<li>getBounds: 取得地圖邊界座標</li>
<li>getZooms: 取得地圖目前縮放大小</li>
</ul>
]]></content>
      <tags>
        <tag>leaflet</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router (1) 安裝與簡介</title>
    <url>/2022/09/21/2022-9-21-1-vue-router-install/</url>
    <content><![CDATA[<h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p><img src="https://miro.medium.com/max/1100/1*FJPvYSYzevc9PXIdx_io6g.png"></p>
<p>Vue Router 是 Vue.js 官方提供的前端路由管理器，是由前端所模擬的路由器，像是我們切換不同頁面時，網址都停留在index.html，但藉由切換 &#x2F;#&#x2F;user 的不同路由，可以切換不同的元件來呈現。</p>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>如果是用 Vue CLI 建立專案，可選取 Router 選項來安裝。</p>
<p>如果是已經建立好的專案，但在專案建置時並未安裝過，可以用npm來安裝</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure>

<h2 id="使用-vue-router"><a href="#使用-vue-router" class="headerlink" title="使用 vue-router"></a>使用 vue-router</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- use the router-link component for navigation. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- specify the link by passing the `to` prop. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- `&lt;router-link&gt;` will render an `&lt;a&gt;` tag with the correct `href` attribute --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Go to Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>Go to About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- route outlet --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- component matched by the route will render here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 html 上使用 router-link，作為換頁的連結，router-link 在經過編譯後會變成 <code>&lt;a&gt; 標籤</code>。</p>
<p>符合當前路由的元件 則由 router-view 來顯示。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 定義路由的元件，可以從其他檔案匯入。如果是SPA的話，則會是一個.VUE檔</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;Home&lt;/div&gt;&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">About</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;About&lt;/div&gt;&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定義路由表，每個路由會對應一個元件。</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 建立路由實體，並將路由表加入。</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title class_">VueRouter</span>.<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 網址路徑模式: 使用網址hash的形式</span></span><br><span class="line">  <span class="attr">history</span>: <span class="title class_">VueRouter</span>.<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  routes, <span class="comment">// short for `routes: routes`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 將路由實體掛載到 vue 實體上。</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"><span class="comment">// Make sure to _use_ the router instance to make the</span></span><br><span class="line"><span class="comment">// whole app router-aware.</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now the app has started!</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router (2) 動態路由</title>
    <url>/2022/09/21/2022-9-21-2-vue-router-setting/</url>
    <content><![CDATA[<h2 id="動態路由"><a href="#動態路由" class="headerlink" title="動態路由"></a>動態路由</h2><p>vue-router也提供動態路由功能，透過 URL 的動態路徑來讓不同的 URL 路徑都能指向同一個 Vue 元件實體。</p>
<p>假設有一個 User 的元件，必須依照 userId 不同，來渲染不同內容，可以這樣做:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;User&lt;/div&gt;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// these are passed to `createRouter`</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// dynamic segments start with a colon</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>現在，&#x2F;users&#x2F;johnny 和 &#x2F;users&#x2F;jolyne 都會指向同一個元件。 </p>
<p>路由上的參數會以 <code>:</code> 的方式呈現。在每個 user 元件內，則可使用 <code>this.$route.params</code> 來取得參數的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若有路由有多個參數，則分別在 $route.params 以不同的key來讀取。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/users/:username/posts/:postId   路由</span><br><span class="line"></span><br><span class="line">&#123; username: &#x27;eduardo&#x27;, postId: &#x27;123&#x27; &#125;  $route.params</span><br></pre></td></tr></table></figure>

<h2 id="動態路由搭配-props"><a href="#動態路由搭配-props" class="headerlink" title="動態路由搭配 props"></a>動態路由搭配 props</h2><p>除了直接在網址取得路由的參數以外，也可以透過props傳遞參數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由表</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;dynamicRouterProp/:id&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/DynimicCompoProp.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">props</span>: <span class="function">(<span class="params">route</span>) =&gt;</span> (&#123; <span class="attr">id</span>: route.<span class="property">params</span>.<span class="property">id</span> &#125;),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>在路由表透過 props 取得 route 裡的參數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> seed = <span class="variable language_">this</span>.<span class="property">id</span>;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">`https://randomuser.me/api/?seed=<span class="subst">$&#123;seed&#125;</span>`</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在元件內透過 porps 取得參數。</p>
<h2 id="參數改變時的回應"><a href="#參數改變時的回應" class="headerlink" title="參數改變時的回應"></a>參數改變時的回應</h2><p>當使用者從 &#x2F;users&#x2F;johnny 轉到 &#x2F;users&#x2F;jolyne 頁面時， User 元件會被重複使用，因為兩個路由指向的是同一個元件。但這也代表 User 的生命週期並不會被重複觸發。</p>
<p>要在參數改變時做出回應時，可以用 watch 來監聽 <code>$route.params</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$watch(</span><br><span class="line">      <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>,</span><br><span class="line">      <span class="function">(<span class="params">toParams, previousParams</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// react to route changes...</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或使用 <code>beforeRouteUpdate()</code> 路由守衛的函式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">    <span class="comment">// react to route changes...</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userData</span> = <span class="keyword">await</span> <span class="title function_">fetchUser</span>(to.<span class="property">params</span>.<span class="property">id</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router (3) 路由比對</title>
    <url>/2022/09/21/2022-9-21-3-vue-router-matching/</url>
    <content><![CDATA[<p>除了使用靜態路由 <code>/about</code> 或動態路由 <code>/users/:userId</code> 以外，vue-router 也提供了其他路由比對方式。</p>
<h2 id="正規表達式"><a href="#正規表達式" class="headerlink" title="正規表達式"></a>正規表達式</h2><p>透過正規表達式來比對路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// /:orderId -&gt; matches only numbers</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/:orderId(\\d+)&#x27;</span> &#125;,</span><br><span class="line">  <span class="comment">// /:productName -&gt; matches anything else</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/:productName&#x27;</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>這樣只有 &#x2F;25 會符合 &#x2F;:orderId ， 非數字的路由則符合 <code>/:productName</code>。</p>
<h2 id="重複的路由"><a href="#重複的路由" class="headerlink" title="重複的路由"></a>重複的路由</h2><p>當路由表裡有多個區段，都要對應同個元件時。例如 &#x2F; 、 &#x2F;user 、 &#x2F;user&#x2F;id。</p>
<p>可用 * (允許 0 個區段或多個) ， 或 + (允許一個以上的區段)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// /:chapters -&gt; matches /one, /one/two, /one/two/three, etc</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/:chapters+&#x27;</span> &#125;,</span><br><span class="line">  <span class="comment">// /:chapters -&gt; matches /, /one, /one/two, /one/two/three, etc</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/:chapters*&#x27;</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="選擇性參數"><a href="#選擇性參數" class="headerlink" title="選擇性參數"></a>選擇性參數</h2><p>當想要一個路由不管有沒有參數，都對應到同個元件時，可以用 ? 符號。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// will match /users and /users/posva</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:userId?&#x27;</span> &#125;,</span><br><span class="line">  <span class="comment">// will match /users and /users/42</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:userId(\\d+)?&#x27;</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router (4) 巢狀路由</title>
    <url>/2022/09/22/2022-9-22-1-vue-nested-route/</url>
    <content><![CDATA[<h2 id="巢狀路由"><a href="#巢狀路由" class="headerlink" title="巢狀路由"></a>巢狀路由</h2><p>有些時候元件可能有多層的巢狀結構</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/user/johnny/profile                  /user/johnny/posts</span><br><span class="line">+------------------+                  +-----------------+</span><br><span class="line">| User             |                  | User            |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">| | Profile      | |  +------------&gt;  | | Posts       | |</span><br><span class="line">| |              | |                  | |             | |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">+------------------+                  +-----------------+</span><br></pre></td></tr></table></figure>

<p>此時可以在路由表以巢狀路由的方式設定，以上一章節的結構為例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我們在 User 元件內也可以設定 router-view，來顯示巢狀的元件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// UserProfile will be rendered inside User&#x27;s &lt;router-view&gt;</span></span><br><span class="line">        <span class="comment">// when /user/:id/profile is matched</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">UserProfile</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// UserPosts will be rendered inside User&#x27;s &lt;router-view&gt;</span></span><br><span class="line">        <span class="comment">// when /user/:id/posts is matched</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;posts&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">UserPosts</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>我們以一個 children 的陣列來設定子層的路由，而子層路由的每個物件寫法就和外層是一樣的。</p>
<p>此時 ‘&#x2F;user&#x2F;1234’ 並不會在 User的 router-view 內顯示任何子元件，因為沒有符合路由。如果想顯示元件，可以設定空字串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">// UserHome will be rendered inside User&#x27;s &lt;router-view&gt;</span></span><br><span class="line">      <span class="comment">// when /user/:id is matched</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserHome</span> &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ...other sub routes</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router (6) 命名視圖</title>
    <url>/2022/09/22/2022-9-22-2-vue-router-named-view/</url>
    <content><![CDATA[<h2 id="命名視圖"><a href="#命名視圖" class="headerlink" title="命名視圖"></a>命名視圖</h2><p>當今天在一個元件內想呈現多個 <code>&lt;router-view&gt;</code> 時，比如說同時有 <code>sidebar view</code> 和 <code>main view</code>，可以使用命名視圖的方式。</p>
<p>每一個不同的 router-view 會有一個 name 的值，沒有 name 的值則預設為 default。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-view <span class="keyword">class</span>=<span class="string">&quot;view left-sidebar&quot;</span> name=<span class="string">&quot;LeftSidebar&quot;</span>&gt;&lt;/router-view&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view main-content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view right-sidebar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;RightSidebar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>在路由表裡以 components 來將多個視圖對應元件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="title class_">Home</span>,</span><br><span class="line">        <span class="comment">// short for LeftSidebar: LeftSidebar</span></span><br><span class="line">        <span class="title class_">LeftSidebar</span>,</span><br><span class="line">        <span class="comment">// they match the `name` attribute on `&lt;router-view&gt;`</span></span><br><span class="line">        <span class="title class_">RightSidebar</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="巢狀命名視圖"><a href="#巢狀命名視圖" class="headerlink" title="巢狀命名視圖"></a>巢狀命名視圖</h2><p>我們也可以結合 巢狀路由與命名視圖來一起設計。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/settings/emails                                       /settings/profile</span><br><span class="line">+-----------------------------------+                  +------------------------------+</span><br><span class="line">| UserSettings                      |                  | UserSettings                 |</span><br><span class="line">| +-----+-------------------------+ |                  | +-----+--------------------+ |</span><br><span class="line">| | Nav | UserEmailsSubscriptions | |  +------------&gt;  | | Nav | UserProfile        | |</span><br><span class="line">| |     +-------------------------+ |                  | |     +--------------------+ |</span><br><span class="line">| |     |                         | |                  | |     | UserProfilePreview | |</span><br><span class="line">| +-----+-------------------------+ |                  | +-----+--------------------+ |</span><br><span class="line">+-----------------------------------+                  +------------------------------+</span><br></pre></td></tr></table></figure>

<ul>
<li>Nav 是一個普通的元件</li>
<li>UserSettings 是父層的 view component</li>
<li>UserEmailsSubscriptions, UserProfile, UserProfilePreview 是巢狀的元件</li>
</ul>
<p>實際的 html 如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- UserSettings.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User Settings<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">NavBar</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;helper&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最後可以在路由表裡來設計</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/settings&#x27;</span>,</span><br><span class="line">  <span class="comment">// You could also have named views at the top</span></span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">UserSettings</span>,</span><br><span class="line">  <span class="attr">children</span>: [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;emails&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserEmailsSubscriptions</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">      <span class="attr">default</span>: <span class="title class_">UserProfile</span>,</span><br><span class="line">      <span class="attr">helper</span>: <span class="title class_">UserProfilePreview</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router (5) 路由轉址</title>
    <url>/2022/09/22/2022-9-22-2-vue-router-navigation/</url>
    <content><![CDATA[<h2 id="路由轉址"><a href="#路由轉址" class="headerlink" title="路由轉址"></a>路由轉址</h2><p>在程式裡，可以使用 router.push(…) 來進行轉址。在 vue 的實體裡，可以透過 <code>this.$router.push()</code> 來執行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// literal string path</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;/users/eduardo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// object with path</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/users/eduardo&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// named route with params to let the router build the url</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;eduardo&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// with query, resulting in /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// with hash, resulting in /about#team</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">hash</span>: <span class="string">&#x27;#team&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>要注意，如果有 path，則 params 會被忽略。所以可以用 name + params 來搭配。</p>
<h2 id="Replace-用法"><a href="#Replace-用法" class="headerlink" title="Replace 用法"></a>Replace 用法</h2><p>router.replace(…) 用法和 push 一樣，差別在 replace 不會新增新的路由歷史紀錄，相反的他是取代目前路由。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">replace</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="comment">// equivalent to</span></span><br><span class="line">router.<span class="title function_">replace</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="前往上一頁或下一頁"><a href="#前往上一頁或下一頁" class="headerlink" title="前往上一頁或下一頁"></a>前往上一頁或下一頁</h2><p>使用 router.go()，來前往上 &#x2F; 下一頁</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// go forward by one record, the same as router.forward()</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// go back by one record, the same as router.back()</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// go forward by 3 records</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// fails silently if there aren&#x27;t that many records</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">100</span>)</span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router (7) 重新導向與404頁面</title>
    <url>/2022/09/22/2022-9-22-3-vue-router-redirect/</url>
    <content><![CDATA[<h2 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h2><p>當想從 ‘&#x2F;home’ ，導向到 ‘&#x2F;‘ 時:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/&#x27;</span> &#125;]</span><br></pre></td></tr></table></figure>

<p>也可以使用命名路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">redirect</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;homepage&#x27;</span> &#125; &#125;]</span><br></pre></td></tr></table></figure>

<p>或使用 function 來進行動態的導向</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// /search/screens -&gt; /search?q=screens</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/search/:searchText&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function"><span class="params">to</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// the function receives the target route as the argument</span></span><br><span class="line">      <span class="comment">// we return a redirect path/location here.</span></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">path</span>: <span class="string">&#x27;/search&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">q</span>: to.<span class="property">params</span>.<span class="property">searchText</span> &#125; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/search&#x27;</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="Alias-路由別名"><a href="#Alias-路由別名" class="headerlink" title="Alias 路由別名"></a>Alias 路由別名</h2><p>路由別名讓兩個不同路由，可以對應同一個元件。</p>
<p>‘&#x2F;‘ 和 ‘&#x2F;home’，都會顯示同個元件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Homepage</span>, <span class="attr">alias</span>: <span class="string">&#x27;/home&#x27;</span> &#125;]</span><br></pre></td></tr></table></figure>

<h2 id="404-頁面"><a href="#404-頁面" class="headerlink" title="404 頁面"></a>404 頁面</h2><p>當使用者輸入錯誤網址時，可以導向404頁面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/:pathMatch(.*)*&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/NotFound.vue&#x27;</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>如上將使用者導向 NotFound.vue 元件。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router (8) 滾動行為</title>
    <url>/2022/09/22/2022-9-22-4-scroll-behavior/</url>
    <content><![CDATA[<h2 id="滾動行為"><a href="#滾動行為" class="headerlink" title="滾動行為"></a>滾動行為</h2><p>我們可以在換頁時設定滾動行為，例如換頁時頁面置頂，或者回到上一頁原本滾動的位置。</p>
<p>建立 router 時，可以設定 <code>scrollBehavior</code> 的函式，函式有 to 、from 、savedPosition 三個參數。</p>
<p>以下為設定的範例:</p>
<ul>
<li>換頁時永遠置頂</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">    <span class="comment">// always scroll to top</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">top</span>: <span class="number">0</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>有上下頁位置紀錄時，回到那個位置，否則置頂。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (savedPosition) &#123;</span><br><span class="line">      <span class="keyword">return</span> savedPosition</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">top</span>: <span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>指定頁面滾動</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">fullPath</span>.<span class="title function_">match</span>(<span class="string">&#x27;newPage&#x27;</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">top</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>依照指定元素位置設定</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">    <span class="comment">// always scroll 10px above the element #main</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// could also be</span></span><br><span class="line">      <span class="comment">// el: document.getElementById(&#x27;main&#x27;),</span></span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#main&#x27;</span>,</span><br><span class="line">      <span class="attr">top</span>: -<span class="number">10</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>指定滾動到某個 錨點</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">hash</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">el</span>: to.<span class="property">hash</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>設定<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll">滾動行為</a></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">hash</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">el</span>: to.<span class="property">hash</span>,</span><br><span class="line">        <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router (9) 導航守衛</title>
    <url>/2022/09/24/2022-9-24-1-navigation-guard/</url>
    <content><![CDATA[<p>vue-router 提供了路由的導航守衛，讓我們可以在變更路由的前後 去自動調用它們。</p>
<p>分別提供了 「全域」、「路由」、「元件內」三種不同的導航守衛供使用。</p>
<h2 id="beforeEach-全域"><a href="#beforeEach-全域" class="headerlink" title="beforeEach (全域)"></a>beforeEach (全域)</h2><p>我們可以註冊全域的導航守衛 <code>router.beforeEach</code>，這樣當「每一個」路由要進入之前，都會先經過這裡：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// explicitly return false to cancel the navigation</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每個導航守衛的函式都接收三個參數:</p>
<ul>
<li>to: 即將進入的路由。</li>
<li>from: 從何處進入的路由。</li>
</ul>
<p>我們可以在這個 callback 函式裡面執行任何動作，例如身份驗證等等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (to, <span class="keyword">from</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// canUserAccess() returns `true` or `false`</span></span><br><span class="line">  <span class="keyword">const</span> canAccess = <span class="keyword">await</span> <span class="title function_">canUserAccess</span>(to)</span><br><span class="line">  <span class="keyword">if</span> (!canAccess) <span class="keyword">return</span> <span class="string">&#x27;/login&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="afterEach-全域"><a href="#afterEach-全域" class="headerlink" title="afterEach (全域)"></a>afterEach (全域)</h2><p>和 beforeEach 相反，afterEach會在路由跳轉後觸發，適合用來搭配網頁分析等功能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">sendToAnalytics</span>(to.<span class="property">fullPath</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="beforeEnter-路由"><a href="#beforeEnter-路由" class="headerlink" title="beforeEnter(路由)"></a>beforeEnter(路由)</h2><p>和 beforeEach 不同，beforeEnter是註冊在 route 路由表的物件內，可以依照每個路由的不同需求來決定是否註冊。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserDetails</span>,</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// reject the navigation</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="元件內的-hooks"><a href="#元件內的-hooks" class="headerlink" title="元件內的 hooks"></a>元件內的 hooks</h3><p>我們也可以在元件內部定義 導航守衛，共可分為三種</p>
<ul>
<li>beforeRouteEnter</li>
<li>beforeRouteUpdate</li>
<li>beforeRouteLeave</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">UserDetails</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`...`</span>,</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="beforeRouteEnter"><a href="#beforeRouteEnter" class="headerlink" title="beforeRouteEnter"></a>beforeRouteEnter</h3><p>在 beforeRouteEnter 中無法取得 this，因為元件的實體還沒被建立。但可以在 next中取得 this。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// access to component public instance via `vm`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="beforeRouteUpdate"><a href="#beforeRouteUpdate" class="headerlink" title="beforeRouteUpdate"></a>beforeRouteUpdate</h3><p>在 beforeRouteUpdate 和 beforeRouteLeave 裡可以直接取用 this。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">  <span class="comment">// just use `this`</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = to.<span class="property">params</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="beforeRouteLeave"><a href="#beforeRouteLeave" class="headerlink" title="beforeRouteLeave"></a>beforeRouteLeave</h3><p> beforeRouteLeave 常用來防止使用者在未儲存資料時就離開此頁面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> answer = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;Do you really want to leave? you have unsaved changes!&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!answer) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>Composition api (一) setup取代option</title>
    <url>/2022/09/03/2022-9-3-1-vue-composition-setup/</url>
    <content><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/1100/1*g_Xxrt6tkYtSxDIui2irAw.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*T-bYsCjFfbFxiY3isQs7Ig.png"></p>
<h2 id="使用setup取代option"><a href="#使用setup取代option" class="headerlink" title="使用setup取代option"></a>使用setup取代option</h2><p>和以往option api 程式邏輯被拆分到各處不同，在composition api 裡，我們將程式都寫在setup裡。</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*V7_oID5_6cWdv1TxxIRbiA.png"></p>
<ul>
<li><p>ref: 定義資料使用，要取出資料加上.value</p>
</li>
<li><p>function: 定義函式相當於以前的methods。</p>
</li>
<li><p>return: 資料、方法都要 return，才能在畫面上使用。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Composition api</tag>
      </tags>
  </entry>
  <entry>
    <title>Composition api (二) reactive 與 ref</title>
    <url>/2022/09/03/2022-9-3-2-composition-ref/</url>
    <content><![CDATA[<h2 id="reactive定義資料"><a href="#reactive定義資料" class="headerlink" title="reactive定義資料"></a>reactive定義資料</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*SdlSgQtLZc3-11s1o_pXxQ.png"></p>
<p>在vue3裡要定義雙向綁定的資料，可以用reactive方法，reactive基本上就是一個proxy物件，帶入的參數一定要是物件。</p>
<p>要修改物件的值，可以用 person.name 的方式來修改。</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*NOBpSjy6lqEqoayTvw4GTg.png"></p>
<p>使用reative時盡量使用const宣告，如果像上圖使用let宣告後，再去賦予person成一個新的物件時，就會失去雙向綁定的功能。</p>
<h2 id="ref-定義資料"><a href="#ref-定義資料" class="headerlink" title="ref 定義資料"></a>ref 定義資料</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*A_cirZ994ZMmm6N3jrtrhg.png"></p>
<p>我們也可以用ref來定義雙向綁定的資料，如上圖我們定義了num &#x3D; 1這個資料。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">num.<span class="property">value</span>  <span class="comment">// 用.value 來讀取或修改 ref 的值。</span></span><br></pre></td></tr></table></figure>

<p>除了定義純值以外，也可定義物件</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*fUnxj_qNyfwHIb8wSWfjHw.png"></p>
<p>上圖定義了person 為一個物件，要調整或讀取物件的值時</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">物件.<span class="property">value</span>.<span class="property">name</span>  <span class="comment">// 先用.value 讀取到物件，再用.name 讀取到物件的屬性</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn-images-1.medium.com/max/1100/1*MRGXPNfkIAtWOoL-ISIZZA.png"></p>
<p>和reactive不同，我們可以用.value &#x3D; 新物件 的方式，來將原本的物件替換掉，也依然保有雙向綁定的功能。</p>
<p>在template 可以直接使用 ref 的值，不需要加上 .value</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; count &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="reactive與-ref-如何選擇"><a href="#reactive與-ref-如何選擇" class="headerlink" title="reactive與 ref 如何選擇"></a>reactive與 ref 如何選擇</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*rb-oWwlZ-Q8IWAJgPniDCA.png"></p>
<p>用reactive建構的資料本身就是proxy物件，本身會有一個Handler來監控target也就是資料，當target有變動時，Handler就會介入來進行畫面的渲染</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*GDB2jgjjgJb1PvmuSxWZqg.png"></p>
<p>用ref定義的資料是一個 RefImpl物件，這個物件包含</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">rawValue</span>: 原始值</span><br><span class="line"><span class="attr">value</span>: 給外層存取的值</span><br></pre></td></tr></table></figure>

<p>物件裡一樣有一個handler函式，當value被修改或讀取時，handler會介入來渲染畫面，並寫一份新的值回rawValue裡，好處是value不一定是proxy物件，一樣可用純值來存取。</p>
<h2 id="實戰中的選擇"><a href="#實戰中的選擇" class="headerlink" title="實戰中的選擇"></a>實戰中的選擇</h2><p>實戰中ref是比較好用且不會出錯的方法，使用 ref 定義的資料用.value來存取資料，不會有被物件覆蓋而失去雙向綁定的問題。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Composition api</tag>
      </tags>
  </entry>
  <entry>
    <title>Composition Api(十) watchEffect</title>
    <url>/2022/09/03/2022-9-3-10-composition-watcheffect/</url>
    <content><![CDATA[<h2 id="使用-watchEffect"><a href="#使用-watchEffect" class="headerlink" title="使用 watchEffect"></a>使用 watchEffect</h2><p>watchEffect 一樣可以監聽變數，並當變數的值做更動時觸發特定行為。<br>要使用 watchEffect 首先一樣 先解構出來</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*VAQXVtjD4kKRlfLgdALswA.png"></p>
<p>在這個範例中有兩筆資料，一個是純值，一個是物件</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*agWzlPkJYOzzpwri7k5V0w.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*_WUhmapmM5hfvI-tnyvsMw.png"></p>
<p>並有一個變數 watchText來接收watchEffect監聽的值。</p>
<p>在 watchEffect 帶入一個 callback function，和watch不同的是，不需要指定監聽的變數是哪個，只要雙向綁定的資料有出現在 watchEffect函式裡就會被監聽。</p>
<p>所以在上面範例中，將監聽的值寫回 watchText裡。</p>
<h2 id="watchEffect-可以被停止"><a href="#watchEffect-可以被停止" class="headerlink" title="watchEffect 可以被停止"></a>watchEffect 可以被停止</h2><p>和watch不同，watchEffect是可以被停止的。</p>
<p>首先將watchEffect 函式賦予到一個變數裡，在watchEffect裡 要停止時就呼叫這個變數本身，如上圖呼叫 stopWatch來停止。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Composition api</tag>
      </tags>
  </entry>
  <entry>
    <title>Composition api (三) Methods</title>
    <url>/2022/09/03/2022-9-3-3-composition-methods/</url>
    <content><![CDATA[<h2 id="如何定義方法"><a href="#如何定義方法" class="headerlink" title="如何定義方法"></a>如何定義方法</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*DG0Xtfl9EOVnfo3atdVUqg.png"></p>
<p>在composition api裡，如果要定義方法，直接在setup裡用function或箭頭函式來定義即可，記得這些方法也要用return匯出。</p>
<h2 id="不須匯出的資料"><a href="#不須匯出的資料" class="headerlink" title="不須匯出的資料"></a>不須匯出的資料</h2><p>另外如果有資料不需要匯出到畫面，可以不用 ref 來定義，也不需要 return 出來。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> num = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> countAdd = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">n</span>) =&gt; &#123;</span><br><span class="line">      num.<span class="property">value</span> += n;</span><br><span class="line">      countAdd +=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getCount</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(countAdd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      num,</span><br><span class="line">      add,</span><br><span class="line">      getCount,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如上 countAdd 不須匯出到畫面，所以直接宣告變數即可。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Composition api</tag>
      </tags>
  </entry>
  <entry>
    <title>Composition api (四) 使用Options API 的方法</title>
    <url>/2022/09/03/2022-9-3-4-composition-hook/</url>
    <content><![CDATA[<h2 id="使用生命週期"><a href="#使用生命週期" class="headerlink" title="使用生命週期"></a>使用生命週期</h2><p>官方文件中有說明 Composition API 中的生命週期有哪些：</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*K0LpszKEUHPCxfdPGEEWuA.png"></p>
<p>基本上 beforeCreate跟created兩個hook已經被整合到setup裡，所以我們在setup裡定義的資料就等於在 created裡定義。</p>
<p>要使用生命週期函式，首先將生命週期的函式從vue裡解構出來。</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*UTEoiSULVLsBWDfKrfMJDg.png"></p>
<p>在生命週期hook裡帶入一個function來撰寫程式。</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*chxC3xO_Q8mETcQMgqFbvA.png"></p>
<h2 id="使用-computed"><a href="#使用-computed" class="headerlink" title="使用 computed"></a>使用 computed</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*tGf-ehBAk1y5xIvggUw_KQ.png"></p>
<p>首先從vue解構 computed 出來。</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*Cy_fKTUjUH-5tYtAqR0uBA.png"></p>
<p>使用方法和option api 類似，一樣需要將處理完的資料回傳出來，如上圖newValue 是 計算完的資料。</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*fmGf5y5yBMMr6vNk-6_hjw.png"></p>
<p>computed一樣可使用 get 和 set 的形式，這邊改為傳入一個物件，裡頭有get跟set 函式。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Composition api</tag>
      </tags>
  </entry>
  <entry>
    <title>Composition api (五) 使用props</title>
    <url>/2022/09/03/2022-9-3-5-composition-props/</url>
    <content><![CDATA[<h2 id="在setup裡使用props"><a href="#在setup裡使用props" class="headerlink" title="在setup裡使用props"></a>在setup裡使用props</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*41Q9b6dQDvcuaPINKG44EQ.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*yzRMFpYrCTmCX_NEffri2w.png"></p>
<p>今天有一個card元件如上，我們想在外層傳入person這個物件到card元件裡</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*MiGnt4S1V8WIaWdVs1THLg.png"></p>
<p>在card元件裡，可以用props來接收外層傳入的prop，在setup裡會將props當作參數傳入，這個參數是包含所有props的物件，要讀取個別prop可以用物件解構的方式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name &#125; = props <span class="comment">// 取出name的個別prop值</span></span><br></pre></td></tr></table></figure>

<p>但要注意解構出來的值只有第一層有雙向綁定</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*SqY8TLQGR4uaz0_zN1MIEw.png"></p>
<p>如果解構第二次的值是沒有雙向綁定的特性，如上圖的name。<br>要解決這個問題，可以用ref來取出第一次解構的值。</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*zhypvjFf0rrWnlQu808-Qg.png" alt="用ref定義item.name"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Composition api</tag>
      </tags>
  </entry>
  <entry>
    <title>Composition api (六) 使用 emits</title>
    <url>/2022/09/03/2022-9-3-6-emits/</url>
    <content><![CDATA[<h2 id="在setup中使用emit"><a href="#在setup中使用emit" class="headerlink" title="在setup中使用emit"></a>在setup中使用emit</h2><h3 id="內層"><a href="#內層" class="headerlink" title="內層"></a>內層</h3><p><img src="https://cdn-images-1.medium.com/max/1100/1*LMu1gwbcy2jxJKMfcml-9A.png"></p>
<p>今天有一個內層的card元件，在setup的第一個參數是props，第二個參數是context，這個context物件就包含emit方法。</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*MXw9O-qAiJ8mPH9HKtQyLA.png"></p>
<p>所以可以用解構的方式將emit方法取出</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*UQvA9zJYzcbQJG18uSyC9g.png"></p>
<p>在card元件內用emit將事件傳送到外層</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*TG0mMKincmcilSQOHh5VRg.png"></p>
<h2 id="外層"><a href="#外層" class="headerlink" title="外層"></a>外層</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*TCfGj5Sgqvo77mwLsjjECA.png"></p>
<p>在外層用一個function來執行emit打出來後的事件。</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*-314MB8wyAttQI2KpNcf3A.png"></p>
<p>在card則依照前內後外的原則來串接內外層的事件，如上圖，內層打出push-data事件後，外層的getData就會接收來執行。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Composition api</tag>
      </tags>
  </entry>
  <entry>
    <title>Composition api (七) 使用 refs</title>
    <url>/2022/09/03/2022-9-3-7-composition-ref/</url>
    <content><![CDATA[<h2 id="用ref取得dom元素"><a href="#用ref取得dom元素" class="headerlink" title="用ref取得dom元素"></a>用ref取得dom元素</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*PAyK_UJg0U6WrVlYG5YNFw.png"></p>
<p>如上圖 app裡有兩個元素，都綁上ref的值，一個是card、一個是button</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*j5Gm06npbpzaAoK07i3OTw.png"></p>
<p>在setup裡用 btn &#x3D; ref(null)的方式來取得dom元素，要記得變數名稱要和dom上綁的ref名稱一致。</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*ylqmdRjzY8z0Wj_Q1z3X3A.png"></p>
<p>在onMounted這個生命週期裡，就可以順利取得dom元素</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*pMN45Uvr0HyDoroahjRmNA.png"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Composition api</tag>
      </tags>
  </entry>
  <entry>
    <title>Composition Api (九) watch</title>
    <url>/2022/09/03/2022-9-3-9-composition-watch/</url>
    <content><![CDATA[<h2 id="使用watch"><a href="#使用watch" class="headerlink" title="使用watch"></a>使用watch</h2><p>要使用watch方法，一樣先從vue中解構出來</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*Dw-eJPBN1vBUrrLxLZF0cg.png"></p>
<h2 id="監聽純值"><a href="#監聽純值" class="headerlink" title="監聽純值"></a>監聽純值</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*ubEKCZ8Az-DwaBKxfdcCjw.png"></p>
<p>上圖中，使用watch方法監聽 productName這個值，並在productName這個值更動時，將值寫回 watchText裡。</p>
<p>要注意的是，當今天監聽的是物件，如上圖person物件裡的值，要在第一個參數前方補上箭頭函式。</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*9Y_o_Bf5qLPp6iboKar4Sg.png"></p>
<h2 id="深層監聽"><a href="#深層監聽" class="headerlink" title="深層監聽"></a>深層監聽</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(product, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span><br><span class="line">&#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>當監聽的是整包物件時，要加上  { deep: true } ，來進行深層監聽。</p>
<h2 id="多項目監聽"><a href="#多項目監聽" class="headerlink" title="多項目監聽"></a>多項目監聽</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>([productName, product], <span class="function">(<span class="params">[productNameVal, productVal], [productNamePre, productPre]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;純值&#x27;</span>, productNameVal, productNamePre);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;物件&#x27;</span>, productVal, productPre);</span><br><span class="line">&#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>當同時監聽多個項目時，用陣列帶入參數。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Composition api</tag>
      </tags>
  </entry>
  <entry>
    <title>Composition api (七) 使用 provide</title>
    <url>/2022/09/03/2022-9-3-8-composition-provide/</url>
    <content><![CDATA[<h2 id="provide跨層級傳遞資料"><a href="#provide跨層級傳遞資料" class="headerlink" title="provide跨層級傳遞資料"></a>provide跨層級傳遞資料</h2><p>要使用provide跟inject功能，可以先從vue解構出來</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*M-d8Q0BsFZoDwmORzDjHOQ.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*CrhDwdhLPvCVH4ZeSDt1Vw.png"></p>
<p>在外層元件使用provide函式來傳遞資料，上圖將person這個物件傳出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">provide</span>() <span class="comment">// 第一個參數為provide名稱、第二個是provide要傳遞的值</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn-images-1.medium.com/max/1100/1*D9mEqCpC_QNOZbPMZ7iPQg.png"></p>
<p>在內層元件使用 inject()來接收外層provide 傳來的資料，接受的名稱要和外層一致。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Composition api</tag>
      </tags>
  </entry>
  <entry>
    <title>leaflet + OpenStreetMap 地圖應用教學</title>
    <url>/2022/09/04/2022-9-4-leafletMap/</url>
    <content><![CDATA[<h2 id="地圖框架與圖資"><a href="#地圖框架與圖資" class="headerlink" title="地圖框架與圖資"></a>地圖框架與圖資</h2><h3 id="地圖框架"><a href="#地圖框架" class="headerlink" title="地圖框架"></a>地圖框架</h3><p>指的是地圖應用的js框架，可以載入地圖資源並標記標示點等功能。</p>
<p>常見的如 <a href="https://leafletjs.com/index.html">leaflet</a>。</p>
<h3 id="圖資"><a href="#圖資" class="headerlink" title="圖資"></a>圖資</h3><p>指的是地圖資源的提供者，常見的有</p>
<ul>
<li><p>Google Map (要收費)</p>
</li>
<li><p><a href="https://www.openstreetmap.org/#map=14/25.0066/121.4954">OpenStreetMap</a> (免費開源)</p>
</li>
</ul>
<p>本文會講解如何使用 leaflet + OpenStreetMap 來開發地圖應用程式。</p>
<h2 id="載入地圖"><a href="#載入地圖" class="headerlink" title="載入地圖"></a>載入地圖</h2><p>首先在專案裡用cdn的方式引入 leaflet 的 css 和 js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/leaflet@1.8.0/dist/leaflet.css&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">integrity</span>=<span class="string">&quot;sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ==&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">crossorigin</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Make sure you put this AFTER Leaflet&#x27;s CSS --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/leaflet@1.8.0/dist/leaflet.js&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">integrity</span>=<span class="string">&quot;sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ==&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">crossorigin</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>準備一個放置地圖的元素，並設置高度</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#map</span> &#123; <span class="attribute">height</span>: <span class="number">180px</span>; &#125;</span><br></pre></td></tr></table></figure>

<p>在 js 裡載入框架</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = L.<span class="title function_">map</span>(<span class="string">&#x27;map&#x27;</span>).<span class="title function_">setView</span>([<span class="number">51.505</span>, -<span class="number">0.09</span>], <span class="number">13</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>L: 框架的縮寫</p>
</li>
<li><p>map(‘map’): 指定放地圖的元素</p>
</li>
<li><p>setView: 第一個參數指定地圖顯示的經緯度，第二參數表示地圖縮放的級距。</p>
</li>
</ul>
<p>再來要載入圖資</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">L.<span class="title function_">tileLayer</span>(<span class="string">&#x27;https://tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">maxZoom</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="attr">attribution</span>: <span class="string">&#x27;© OpenStreetMap&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">addTo</span>(map);</span><br></pre></td></tr></table></figure>

<p>tileLayer的第一個參數指定使用圖資的來源，第二個參數是物件，maxZoom代表最大縮放級距，attribution則標示圖資所有權。</p>
<p>最後用 addTo(map)，將圖資載入map變數裡。</p>
<p>到這邊已經成功將地圖服務載入囉，<a href="https://codepen.io/liao/pen/gOpOgzg">範例程式碼</a>。</p>
<h2 id="地圖加入標示"><a href="#地圖加入標示" class="headerlink" title="地圖加入標示"></a>地圖加入標示</h2><p>圖資其實是一層一層的圖層疊起來呈現的</p>
<p><img src="https://fs.npstatic.com/userfiles/4774964/image/google-maps-layers-w810h462.jpg"></p>
<p>在最底層的地圖圖上，我們可以在加上標示的圖層。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> marker = L.<span class="title function_">marker</span>([<span class="number">51.5</span>, -<span class="number">0.09</span>]).<span class="title function_">addTo</span>(map);</span><br></pre></td></tr></table></figure>

<p>使用marker方法加入標示，第一個參數帶入標示的經緯度，在加入map變數裡。</p>
<p>要在marker再加入標示說明，可用popup語法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">marker.<span class="title function_">bindPopup</span>(<span class="string">&quot;&lt;b&gt;Hello world!&lt;/b&gt;&lt;br&gt;I am a popup.&quot;</span>).<span class="title function_">openPopup</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>bindPopup: 加入標示的說明文字的html。</li>
<li>openPopup: 讓標示預設是打開的。</li>
</ul>
<p>要一次加入多個 marker ，可以跑迴圈加入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">  &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;軟體園區&#x27;</span>,<span class="attr">lat</span>:<span class="number">22.604799</span>,<span class="attr">lng</span>:<span class="number">120.2976256</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;ikea&#x27;</span>,<span class="attr">lat</span>:<span class="number">22.6066728</span>,<span class="attr">lng</span>:<span class="number">120.3015429</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;data.<span class="property">length</span>&gt;i;i++)&#123;</span><br><span class="line">  L.<span class="title function_">marker</span>([data[i].<span class="property">lat</span>,data[i].<span class="property">lng</span>], &#123;<span class="attr">icon</span>: greenIcon&#125;).<span class="title function_">addTo</span>(map)</span><br><span class="line">    .<span class="title function_">bindPopup</span>(<span class="string">&#x27;&lt;h1&gt;&#x27;</span>+ data[i].<span class="property">name</span> +<span class="string">&#x27;&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要更改marker的icon的話，也有提供方法使用，主要將 iconUrl 替換成自己的icon圖片:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myIcon = L.<span class="title function_">icon</span>(&#123;</span><br><span class="line">    <span class="attr">iconUrl</span>: <span class="string">&#x27;my-icon.png&#x27;</span>,</span><br><span class="line">    <span class="attr">iconSize</span>: [<span class="number">38</span>, <span class="number">95</span>],</span><br><span class="line">    <span class="attr">iconAnchor</span>: [<span class="number">22</span>, <span class="number">94</span>],</span><br><span class="line">    <span class="attr">popupAnchor</span>: [-<span class="number">3</span>, -<span class="number">76</span>],</span><br><span class="line">    <span class="attr">shadowUrl</span>: <span class="string">&#x27;my-icon-shadow.png&#x27;</span>,</span><br><span class="line">    <span class="attr">shadowSize</span>: [<span class="number">68</span>, <span class="number">95</span>],</span><br><span class="line">    <span class="attr">shadowAnchor</span>: [<span class="number">22</span>, <span class="number">94</span>]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">L.<span class="title function_">marker</span>([<span class="number">50.505</span>, <span class="number">30.57</span>], &#123;<span class="attr">icon</span>: myIcon&#125;).<span class="title function_">addTo</span>(map);</span><br></pre></td></tr></table></figure>

<h2 id="效能處理"><a href="#效能處理" class="headerlink" title="效能處理"></a>效能處理</h2><p>當今天資料很多時，為了避免依次顯示太多標示在地圖上，我們可以使用插件 <a href="https://github.com/Leaflet/Leaflet.markercluster">Leaflet.markercluster</a>。</p>
<p>這個插件可以依據縮放的級距顯示相對數量標示，避免顯示太多效能變差。</p>
<p>使用方法也很簡單，在原有的tileLayer圖層上再加上一層MarkerCluster圖層。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> markers = <span class="keyword">new</span> L.<span class="title class_">MarkerClusterGroup</span>().<span class="title function_">addTo</span>(map);;</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/tim-chou/pen/mdLyObY">範例code</a></p>
]]></content>
  </entry>
  <entry>
    <title>JS 函式中的 this</title>
    <url>/2023/01/07/2023-01-01-1-js-this/</url>
    <content><![CDATA[<p>this 是 js 裡函式執行時時自動產生的物件，隨著 function 執行場合的不同，this 所指向的值，也會有所不同。在多數情況下，this會指向呼叫 function 的物件。以下介紹幾種this的指向。</p>
<h2 id="簡單呼叫-Simple-call"><a href="#簡單呼叫-Simple-call" class="headerlink" title="簡單呼叫(Simple call)"></a>簡單呼叫(Simple call)</h2><p>當我們直接呼叫函式時，function 裡的 this 指的會是 window。所以當 window 底下有全域變數 father時，this.father 就會取到 小名這個值。</p>
<p><img src="https://miro.medium.com/max/786/1*h2Km5Rhqry8i1burk6etZw.webp"></p>
<p>下面我們將 function 中包著 function，但只要是直接呼叫，this 都是屬於全域</p>
<p><img src="https://miro.medium.com/max/640/1*Yv7W__PfC7CEQtwZLjRc3g.webp"></p>
<p>callback function 被呼叫也是屬於 simple call，會取到 window 下的 myName;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">&#x27;小名&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  consol.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myName</span>, i);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小名&#x27; 1</span></span><br><span class="line"><span class="comment">// 小名&#x27; 2</span></span><br><span class="line"><span class="comment">// 小名&#x27; 3</span></span><br></pre></td></tr></table></figure>

<h2 id="Dom-事件中的-this"><a href="#Dom-事件中的-this" class="headerlink" title="Dom 事件中的 this"></a>Dom 事件中的 this</h2><p>DOM 搭配 addEventListener 時，此 this 所指向的則是該 DOM。</p>
<p><img src="https://miro.medium.com/max/750/1*PCxrl_RtJBAsb12ke8P4bQ.webp"></p>
<p>在上面監聽事件中，呼叫 function 的對象是 alex ，這邊 this 指的就是 alex。</p>
<h2 id="Object-中的-this"><a href="#Object-中的-this" class="headerlink" title="Object 中的 this"></a>Object 中的 this</h2><p>如果 function 是在物件下調用，那麼 this 則會指向此物件，無論 function 是在哪裡宣告。</p>
<p><img src="https://miro.medium.com/max/640/1*DDrEW2TbhefiB-8NSIj4cQ.webp"></p>
<p><img src="https://miro.medium.com/max/1100/1*FJx6YqVd894ZH6fnuqtoWw.webp"></p>
<p>但如果將物件內的函式賦予在一個純粹的變數上並調用它時，這個 this 將會指向全域。</p>
<p><img src="https://miro.medium.com/max/750/1*wNtijWCK_KPREHPKT-ULyw.webp"></p>
<h2 id="強制指定-this-的方式"><a href="#強制指定-this-的方式" class="headerlink" title="強制指定 this 的方式"></a>強制指定 this 的方式</h2><p>如果想強制綁定 this的指向，有以下方法: call() 、 apply() 以及 bind()。</p>
<h3 id="bind"><a href="#bind" class="headerlink" title=".bind()"></a>.bind()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun.<span class="title function_">bind</span>(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure>

<p>在函式後加上 .bind()，第一個參數為指定的 this對象，剩下的參數則為此函式的參數。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">func</span>();            <span class="comment">// undefined</span></span><br><span class="line">func.<span class="title function_">bind</span>(obj)();  <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<h3 id="call-與-apply"><a href="#call-與-apply" class="headerlink" title=".call() 與 .apply()"></a>.call() 與 .apply()</h3><p>基本上 .call() 或是 .apply() 都是去呼叫執行這個 function ，並將這個 function 的 context 替換成第一個參數帶入的物件。 換句話說，就是強制指定某個物件作為該 function 執行時的 this。</p>
<p><img src="https://miro.medium.com/max/720/1*G9i16krE_w0op-vUYlwGQg.webp"></p>
<p>可將 Ming 傳入並取代 this，後面帶上一個參數 2 則是函式的參數。因此</p>
<ul>
<li>.call() 前者為套用 this 的物件，後者以後都是函式的參數。</li>
<li>.apply() 前者一樣套用this的物件，後者以陣列的方式傳入參數。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fn.<span class="title function_">call</span>(<span class="number">1</span>, <span class="string">&#x27;小名&#x27;</span>, <span class="string">&#x27;杰倫&#x27;</span>)     <span class="comment">// this =&gt; &#123;1&#125;</span></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="string">&#x27;文字&#x27;</span>, <span class="string">&#x27;小名&#x27;</span>, <span class="string">&#x27;杰倫&#x27;</span>) <span class="comment">// this =&gt; &#123;&#x27;文字&#x27;&#125;</span></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="literal">undefined</span>, <span class="string">&#x27;小名&#x27;</span>, <span class="string">&#x27;杰倫&#x27;</span>) <span class="comment">// this =&gt; window</span></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="string">&#x27;小名&#x27;</span>, <span class="string">&#x27;杰倫&#x27;</span>) <span class="comment">// this =&gt; window</span></span><br></pre></td></tr></table></figure>

<p>當使用 call 傳入的第一個參數不是物件而是純值時，string、number、boolean 會被包裝成物件，undefined、null 則會被替換成 window。</p>
<p>簡易呼叫時盡可能不要調用this，因為它的本質就是 undefined。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下兩行實際上是一樣的。</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;小名&#x27;</span>, <span class="string">&#x27;杰倫&#x27;</span>)</span><br><span class="line">fn.<span class="title function_">call</span>(<span class="literal">undefined</span>, <span class="string">&#x27;小名&#x27;</span>, <span class="string">&#x27;杰倫&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>簡易呼叫其實就相當於執行 call 但傳入的值是 undefined，undefined 在一般模式會被替換成 window，而在嚴格模式則會維持 undedined。</p>
<h3 id="bind-、-call-、-apply-的差異"><a href="#bind-、-call-、-apply-的差異" class="headerlink" title=".bind()、 .call() 、.apply()的差異"></a>.bind()、 .call() 、.apply()的差異</h3><p>bind() 讓這個 function 在呼叫前先綁定某個物件，使它不管怎麼被呼叫都能有固定的 this。</p>
<p>尤其常用在像是 callback function 這種類型的場景，可以想像成是先綁定好 this，然後讓 function 在需要時才被呼叫的類型。</p>
<p>而 .call() 與 .apply() 則是使用在 context 較常變動的場景，依照呼叫時的需要帶入不同的物件作為該 function 的 this。 在呼叫的當下就立即執行。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>ChatGPT (1) 基礎教學</title>
    <url>/2023/02/26/2023-02-26-chatgpt/</url>
    <content><![CDATA[<h2 id="chatGPT-是什麼"><a href="#chatGPT-是什麼" class="headerlink" title="chatGPT 是什麼"></a>chatGPT 是什麼</h2><p>ChatGPT是一種大型自然語言處理模型，是由OpenAI訓練的。它基於GPT（Generative Pretrained Transformer）模型架構，具有數十億個參數，可以生成自然語言文本，並且可以進行各種自然語言處理任務，例如問答、文本摘要、翻譯等。</p>
<h2 id="使用-chatGPT"><a href="#使用-chatGPT" class="headerlink" title="使用 chatGPT"></a>使用 chatGPT</h2><p>先到 <a href="https://openai.com/blog/chatgpt/">chatGPT 官網</a>註冊一個帳號。</p>
<h3 id="使用chatGPT寫文章"><a href="#使用chatGPT寫文章" class="headerlink" title="使用chatGPT寫文章"></a>使用chatGPT寫文章</h3><ol>
<li>讓 chatGPT 列舉文章標題</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*FTMGjBe3GKoJXpY9kTZ5tA.png"></p>
<ol start="2">
<li>選擇一個滿意的標題，讓chatGPT進行創作</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*C5UMiW4nOPhttJPsNRbvBA.png"></p>
<ol start="3">
<li>要進長篇創作的話，可以用標題讓chatGPT寫出文章大綱</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*0p51kvnXq5drLZoMHl0HrA.png"></p>
<p>再讓chatGPT針對大綱寫出內文</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*lae9k6MhFuU9j5uSdJpHKQ.png"></p>
<h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p><img src="https://cdn-images-1.medium.com/max/1100/1*V70mwdgb6piXKjqWNkXl5g.png"></p>
]]></content>
      <tags>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>Midjourney AI 繪圖</title>
    <url>/2023/03/04/2023-03-04-chatgpt-draw/</url>
    <content><![CDATA[<h2 id="註冊-Midjourney-帳號"><a href="#註冊-Midjourney-帳號" class="headerlink" title="註冊 Midjourney 帳號"></a>註冊 Midjourney 帳號</h2><p>首先來到 <a href="https://www.midjourney.com/home/?callbackUrl=/app/">Midjourney 官網</a> 註冊一個帳號，並先下載<br>discord 程式，因為繪圖主要是在 discord 裡進行。</p>
<p>之後再 midjourney 官網點擊來使用discord加入discord群組。 <img src="https://cdn-images-1.medium.com/max/1100/1*sapDYz4NYUiXSqsSToLbSQ.png" alt="使用discord"> </p>
<p>在discord 群組裡點進名稱為 newbies 的頻道來開始創作</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*qMNptQLH2Rs-mD_hM4dJ2A.png"></p>
<h2 id="使用指令"><a href="#使用指令" class="headerlink" title="使用指令"></a>使用指令</h2><p>在 newbies 頻道裡輸入指令 <code>/imagine prompt</code> 後面接你指定的關鍵字如下:</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*7Q_fJgw-T4cxrIRnXcuSyw.png"></p>
<p>上面這些關鍵字要用 , 分隔</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*RcQN-NcORTiS4-zFWqmEOA.png"></p>
<p>關鍵字後面會加上 –的基礎指令，包含圖片比例，作畫模式等。</p>
<h3 id="常用關鍵字"><a href="#常用關鍵字" class="headerlink" title="常用關鍵字"></a>常用關鍵字</h3><ul>
<li>Octane Render: 3D創作</li>
<li>highly details: 更細膩</li>
<li>epic composition: 雄偉(建築類圖畫)</li>
<li>cinematic lighting: 戲劇化光線</li>
</ul>
<h3 id="常用基礎指令"><a href="#常用基礎指令" class="headerlink" title="常用基礎指令"></a>常用基礎指令</h3><ul>
<li>ar 1:3: 畫作的比例(aspect ratio)</li>
<li>test : 官方測試指令(加了畫會比較細膩)</li>
<li>creative: 官方測試指令(加了畫會比較細膩)</li>
</ul>
<h2 id="繪圖結果"><a href="#繪圖結果" class="headerlink" title="繪圖結果"></a>繪圖結果</h2><p>當送出指令並繪圖完成後，圖片底下會出現幾個指令。</p>
<p><img src="blob:https://medium.com/ed7312e1-7828-448d-9c15-4ac2a00fc7a9"></p>
<ul>
<li>U1: 滿意匯出成果，但希望圖更細緻</li>
<li>V1: 滿意結果，希望根據這張圖在做變化</li>
</ul>
<h2 id="系統預設指令"><a href="#系統預設指令" class="headerlink" title="系統預設指令"></a>系統預設指令</h2><p>輸入 &#x2F;settings 會出現機器人可以預設的指令</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*JQQXLA_5y00gYkJnvn9nqA.png"></p>
<p>其中每一橫排是一組指令</p>
<ul>
<li>MJ mode: 預設作畫風格，可以自行嘗試</li>
<li>style mode: 風格從保守(low)到狂野(high)可供選擇</li>
</ul>
<h2 id="日式動漫風格-nijijourney"><a href="#日式動漫風格-nijijourney" class="headerlink" title="日式動漫風格 nijijourney"></a>日式動漫風格 nijijourney</h2><p>如果想畫日本動漫風格，可以使用 nijijourney 這個discord 機器人，使用流程和 Midjourney 一樣先到<a href="https://discord.com/invite/nijijourney">官網</a>加入 discord 群組。</p>
<p><img src="https://cdn-images-1.medium.com/max/1100/1*RnjsIo8mbfwacn3oAzMPTw.png"></p>
<p>指令整理網站：<a href="https://aitag.top/">https://aitag.top/</a><br>圖片敘述範例：<a href="https://www.ai4hub.com/">https://www.ai4hub.com/</a></p>
]]></content>
      <tags>
        <tag>Midjourney</tag>
      </tags>
  </entry>
  <entry>
    <title>chatGPT (2) 實用外掛</title>
    <url>/2023/03/05/2023-03-05-chatgpt-2/</url>
    <content><![CDATA[<h2 id="chatGPT-for-google"><a href="#chatGPT-for-google" class="headerlink" title="chatGPT for google"></a>chatGPT for google</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*EQKmu6Zr35OgVomOEBzwaA.png"></p>
<p>在<a href="https://chrome.google.com/webstore/category/extensions">google 擴充商店</a>裡安裝 chatGPT for google 外掛，就可以在google搜尋時，同步使用chatGPT。</p>
<h2 id="AIPRM"><a href="#AIPRM" class="headerlink" title="AIPRM"></a>AIPRM</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*3WnGo-dcumUDknPKqP-KHQ.png"></p>
<p>這個外掛提供多種 chatGPT 的指令腳本，可以在 topic 底下選擇主題。</p>
<p>例如選擇 Generative Ai 這個主題，在選擇底下的 Midjourney prompt generator腳本，可以自動生成 Midjourney ai繪圖的指令。</p>
<h2 id="ChatGPT-Writer"><a href="#ChatGPT-Writer" class="headerlink" title="ChatGPT Writer"></a>ChatGPT Writer</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*lHN5MVVX9AW613IL27k4uQ.png"></p>
<p>填入信件內文後，自動根據內文回覆信件。</p>
<h2 id="ChatGPT-Prompt-Genius"><a href="#ChatGPT-Prompt-Genius" class="headerlink" title="ChatGPT Prompt Genius"></a>ChatGPT Prompt Genius</h2><p><img src="https://cdn-images-1.medium.com/max/1100/1*lHN5MVVX9AW613IL27k4uQ.png"></p>
<p>這個插建可以讓我們將 chatGPT的對話下載成圖檔或做成網頁連結分享給別人。</p>
]]></content>
      <tags>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas fingting game (1) 創建遊戲主角與敵人</title>
    <url>/2023/04/29/2023-04-29-1-canvas-fighting-game-1/</url>
    <content><![CDATA[<h2 id="專案建立"><a href="#專案建立" class="headerlink" title="專案建立"></a>專案建立</h2><p>建立一個新資料夾，並建立index.html 與 index.js檔案。在 index.html裡，加入canvas元素，並在index.js中選取它設定相關的值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設定 canvas 的畫布大小，並繪製到畫面上</span></span><br><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> c = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">canvas.<span class="property">width</span> = <span class="number">1024</span>;</span><br><span class="line">canvas.<span class="property">height</span> = <span class="number">576</span>;</span><br><span class="line"></span><br><span class="line">c.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br></pre></td></tr></table></figure>

<h2 id="創建主角與敵人物件藍圖-class"><a href="#創建主角與敵人物件藍圖-class" class="headerlink" title="創建主角與敵人物件藍圖(class)"></a>創建主角與敵人物件藍圖(class)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gravity = <span class="number">.2</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sprite</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">&#123; position, velocity &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">position</span> = position;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">velocity</span> = velocity;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = <span class="number">150</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = <span class="number">50</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    c.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">    c.<span class="title function_">fillRect</span>(<span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span>, <span class="variable language_">this</span>.<span class="property">width</span>, <span class="variable language_">this</span>.<span class="property">height</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">draw</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> += <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">y</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 當物件的底部碰到畫布的底部時，停止移動。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> + <span class="variable language_">this</span>.<span class="property">height</span> + <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">y</span> &gt;= canvas.<span class="property">height</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">y</span> = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">y</span> += gravity;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先建立一個 class 叫做 sprite ，我們會用這個 sprite class 分別來生成主角與敵人的物件。<br>在 sprite 裡會傳入一個物件當作參數，物件裡包含 position 和 velocity 物件。</p>
<ul>
<li>posotion : 包含x和y值，用來決定物件的位置。</li>
<li>velocity:  包含x和y值，用來決定物件的移動值。</li>
</ul>
<p>sprite 裡也包含兩個函式:</p>
<ul>
<li>draw: 繪製物件。</li>
<li>update: 更新物件的值。</li>
</ul>
<h2 id="建立實體"><a href="#建立實體" class="headerlink" title="建立實體"></a>建立實體</h2><p>有了 sprite class後，我們可以依據class建立主角和敵人實體。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> player = <span class="keyword">new</span> <span class="title class_">Sprite</span>(&#123;</span><br><span class="line">  <span class="attr">position</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">velocity</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> enemy = <span class="keyword">new</span> <span class="title class_">Sprite</span>(&#123;</span><br><span class="line">  <span class="attr">position</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">100</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">velocity</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="持續更新畫面"><a href="#持續更新畫面" class="headerlink" title="持續更新畫面"></a>持續更新畫面</h2><p>為了持續更新畫面，我們需要一個 loop function，在函式裡我們用到 <code>requestAnimationFrame</code> 來持續更新畫面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(animate);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重設畫布</span></span><br><span class="line">  c.<span class="property">fillStyle</span> = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">  c.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新並繪製人物</span></span><br><span class="line">  player.<span class="title function_">update</span>();</span><br><span class="line">  enemy.<span class="title function_">update</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">animate</span>();</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas fingting game (2) 移動角色</title>
    <url>/2023/04/30/2023-04-30-1-canvas-fighting-game-2/</url>
    <content><![CDATA[<p><a href="https://github.com/tim8076/canvas-fighting-game/tree/2-move-character">原始碼參考</a></p>
<h2 id="建立鍵盤事件監聽"><a href="#建立鍵盤事件監聽" class="headerlink" title="建立鍵盤事件監聽"></a>建立鍵盤事件監聽</h2><p>為了移動角色，需要監聽鍵盤的 keydown 事件，當玩家按下鍵盤後移動角色；並同時監聽 keyup事件，當玩家放開鍵盤後停止角色移動。</p>
<p>另外我們會另外建立一個 keys 的物件，用來記錄按鍵是否為按下的狀態，再來利用這些狀態，在animate函式中操作人物的移動。因為直接在 window.addEventListener中操作角色移動會不夠靈敏，在animate函式操作更為靈活。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">pressd</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">d</span>: &#123;</span><br><span class="line">    <span class="attr">pressd</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">w</span>: &#123;</span><br><span class="line">    <span class="attr">pressd</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title class_">ArrowRight</span>: &#123;</span><br><span class="line">    <span class="attr">pressd</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title class_">ArrowLeft</span>: &#123;</span><br><span class="line">    <span class="attr">pressd</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span>(e.<span class="property">key</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">      keys.<span class="property">d</span>.<span class="property">pressd</span> = <span class="literal">true</span>;</span><br><span class="line">      player.<span class="property">lastKey</span> = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">      keys.<span class="property">a</span>.<span class="property">pressd</span> = <span class="literal">true</span>;</span><br><span class="line">      player.<span class="property">lastKey</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">      player.<span class="property">velocity</span>.<span class="property">y</span> = -<span class="number">20</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ArrowRight&#x27;</span>:</span><br><span class="line">      keys.<span class="property">ArrowRight</span>.<span class="property">pressd</span> = <span class="literal">true</span>;</span><br><span class="line">      enemy.<span class="property">lastKey</span> = <span class="string">&#x27;ArrowRight&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ArrowLeft&#x27;</span>:</span><br><span class="line">      keys.<span class="property">ArrowLeft</span>.<span class="property">pressd</span> = <span class="literal">true</span>;</span><br><span class="line">      enemy.<span class="property">lastKey</span> = <span class="string">&#x27;ArrowLeft&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ArrowUp&#x27;</span>:</span><br><span class="line">      enemy.<span class="property">velocity</span>.<span class="property">y</span> = -<span class="number">20</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (e.<span class="property">key</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">      keys.<span class="property">d</span>.<span class="property">pressd</span> = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">      keys.<span class="property">a</span>.<span class="property">pressd</span> = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// enemy keys</span></span><br><span class="line">  <span class="keyword">switch</span> (e.<span class="property">key</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ArrowRight&#x27;</span>:</span><br><span class="line">      keys.<span class="property">ArrowRight</span>.<span class="property">pressd</span> = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ArrowLeft&#x27;</span>:</span><br><span class="line">      keys.<span class="property">ArrowLeft</span>.<span class="property">pressd</span> = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="移動角色"><a href="#移動角色" class="headerlink" title="移動角色"></a>移動角色</h2><p>有了 keys 的物件，用來記錄按鍵是否為按下的狀態，可以利用這些狀態，在animate函式中操作人物的移動。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(animate);</span><br><span class="line">  c.<span class="property">fillStyle</span> = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">  c.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line">  player.<span class="title function_">update</span>();</span><br><span class="line">  enemy.<span class="title function_">update</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 每次移動前都先停止角色，防止角色無限移動</span></span><br><span class="line">  player.<span class="property">velocity</span>.<span class="property">x</span> = <span class="number">0</span>;</span><br><span class="line">  enemy.<span class="property">velocity</span>.<span class="property">x</span> = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// player movement</span></span><br><span class="line">  <span class="keyword">if</span> (keys.<span class="property">a</span>.<span class="property">pressd</span> &amp;&amp; player.<span class="property">lastKey</span> === <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">    player.<span class="property">velocity</span>.<span class="property">x</span> = -<span class="number">5</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (keys.<span class="property">d</span>.<span class="property">pressd</span> &amp;&amp; player.<span class="property">lastKey</span> === <span class="string">&#x27;d&#x27;</span>) &#123;</span><br><span class="line">    player.<span class="property">velocity</span>.<span class="property">x</span> = <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enemy movement</span></span><br><span class="line">  <span class="keyword">if</span> (keys.<span class="property">ArrowLeft</span>.<span class="property">pressd</span> &amp;&amp; enemy.<span class="property">lastKey</span> === <span class="string">&#x27;ArrowLeft&#x27;</span>) &#123;</span><br><span class="line">    enemy.<span class="property">velocity</span>.<span class="property">x</span> = -<span class="number">5</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (keys.<span class="property">ArrowRight</span>.<span class="property">pressd</span> &amp;&amp; enemy.<span class="property">lastKey</span> === <span class="string">&#x27;ArrowRight&#x27;</span>) &#123;</span><br><span class="line">    enemy.<span class="property">velocity</span>.<span class="property">x</span> = <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas fingting game (3) 角色的攻擊</title>
    <url>/2023/05/07/2023-05-07-01-canvas-fight-3/</url>
    <content><![CDATA[<p><img src="https://lh3.googleusercontent.com/pw/AJFCJaVrH9s7_ipjTUieLi-RodR-ulm4NGUwp2I5igeF7WT1XBa-_bFvPk0MtKx-eVtMsPbcbkQ9DDW4mrd4qqW8uIFxF1YOBlfHiKFkZpyTfCu-8BSUm37YzOOFYt7zgBuTUT1s-fAHxg3a2bkfQPIrjnVphyZzEdy3KggNmk1cbwh9PGoSWOvKZ45jAlnorMAB3pf6D-shnwo9fvS3JoqtacsI9W5NCQjULPzwCLjxZ1F27x8uHcgN9qVHbLW77DdymUK_pMZ-zsYHQAL5QKwM0WLmZnC2d4WpChpLhXTuXKTzSKCuIWxeOMmcZxivnR7G7NJ9rZ6xbezhST9L-SRniBW2ZJPwZiOYvDXbLEJiCD2md7FUoak1FaTG-FKuunXAGEK9onwDSjxsDsGQe-SBQF016VZposy83M-QwT23CHk70yXHxKAf5vdaaXGvgHiD7Sj1HyrF6lQm-H8FtKIEue1Qg6BHoHDi-BCQouNXnKRH72B7NdD82f5bQFO89GS0KmngCzwT3RSQm1R0I0uA0TQxQ3zMqTQL-I4t9Rc5uh32-RZkXyonMKNoIWAmVVp-jTJrUvKjd35nC3_asjK0iztI0d7-O1aA79sLoYYLdl5xesETKbyq_2G7yEdr25M5DpgTAbv9cylVVhkC31K6wwGGMNREG7aeYzr95fM9HlMhV9dpa9V8Ml8ojzmC1rBOB8T00h-UOJe4uKoRAEEDK_m-TvsgKcfXcmIX7hvFmkbY-ZJtjXjmEqHYp6Mghq_ukh0t_dQPM504Hlh6oP-cp1ENd5rRbyluA1fe6X63Ky4Z2452kC-miFG12wsqx5uhpJR2pMJ08N7XMDhqMSBo0qrtlDaJ_QIkLq3Ud-AfUXTT7wbtuQR0tOh_sEjoOBa2UhujTyzrRrl5-iCB-6XhrLcmVzHrigFybArW-aZj38a3NtM55KYwzf9LJ8M=w407-h197-s-no?authuser=0"></p>
<h2 id="角色攻擊"><a href="#角色攻擊" class="headerlink" title="角色攻擊"></a>角色攻擊</h2><p>為了使角色能攻擊，我們需要在 class 加上 attack box 的值，來決定攻擊敵人的範圍。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sprite</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">&#123; position, velocity, color = <span class="string">&#x27;red&#x27;</span>, offset &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">position</span> = position;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">velocity</span> = velocity;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = <span class="number">150</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = <span class="number">50</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastKey</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">attackBox</span> = &#123;</span><br><span class="line">      <span class="attr">position</span>: &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">width</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">50</span>,</span><br><span class="line">      offset</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAttacking</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">attack</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAttacking</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isAttacking</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上，我們在 sprite 裡加上 attackbox ，並設定 position 跟 寬高。 isAttacking 則用來決定角色是否處於攻擊狀態，在attack()函式中，會先設定 isAttacking 為true，再用setTimeout 於 100 ms後 設訂為 false;</p>
<h2 id="確認攻擊範圍"><a href="#確認攻擊範圍" class="headerlink" title="確認攻擊範圍"></a>確認攻擊範圍</h2><p>為了確認攻擊是否擊中敵人，可以建立一個確認物體碰撞的函式，來確認 attackbox是否在敵人身上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">rectangularCollision</span>(<span class="params">&#123; rectangle1, rectangle2 &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    rectangle1.<span class="property">attackBox</span>.<span class="property">position</span>.<span class="property">x</span> + rectangle1.<span class="property">attackBox</span>.<span class="property">width</span> &gt;= rectangle2.<span class="property">position</span>.<span class="property">x</span> &amp;&amp;</span><br><span class="line">    rectangle1.<span class="property">attackBox</span>.<span class="property">position</span>.<span class="property">x</span> &lt;= rectangle2.<span class="property">position</span>.<span class="property">x</span> + rectangle2.<span class="property">width</span> &amp;&amp;</span><br><span class="line">    rectangle1.<span class="property">attackBox</span>.<span class="property">position</span>.<span class="property">y</span> + rectangle1.<span class="property">attackBox</span>.<span class="property">height</span> &gt;= rectangle2.<span class="property">position</span>.<span class="property">y</span> &amp;&amp;</span><br><span class="line">    rectangle1.<span class="property">attackBox</span>.<span class="property">position</span>.<span class="property">y</span> &lt;= rectangle2.<span class="property">position</span>.<span class="property">y</span> + rectangle2.<span class="property">height</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 animate 的函式中，就可來確認是否攻擊成功</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 確認攻擊範圍是在敵人身上</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">    <span class="title function_">rectangularCollision</span>(&#123;</span><br><span class="line">      <span class="attr">rectangle1</span>: player,</span><br><span class="line">      <span class="attr">rectangle2</span>: enemy,</span><br><span class="line">    &#125;) &amp;&amp;</span><br><span class="line">    player.<span class="property">isAttacking</span></span><br><span class="line">  ) &#123;</span><br><span class="line">  player.<span class="property">isAttacking</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="事件偵聽"><a href="#事件偵聽" class="headerlink" title="事件偵聽"></a>事件偵聽</h2><p>最後就是將 攻擊的動作加入鍵盤事件偵聽， player 我們設為空白鑑攻擊， enemy 則設為↓ 攻擊。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span>(e.<span class="property">key</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">      keys.<span class="property">d</span>.<span class="property">pressd</span> = <span class="literal">true</span>;</span><br><span class="line">      player.<span class="property">lastKey</span> = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">      keys.<span class="property">a</span>.<span class="property">pressd</span> = <span class="literal">true</span>;</span><br><span class="line">      player.<span class="property">lastKey</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">      player.<span class="property">velocity</span>.<span class="property">y</span> = -<span class="number">20</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">      player.<span class="title function_">attack</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ArrowRight&#x27;</span>:</span><br><span class="line">      keys.<span class="property">ArrowRight</span>.<span class="property">pressd</span> = <span class="literal">true</span>;</span><br><span class="line">      enemy.<span class="property">lastKey</span> = <span class="string">&#x27;ArrowRight&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ArrowLeft&#x27;</span>:</span><br><span class="line">      keys.<span class="property">ArrowLeft</span>.<span class="property">pressd</span> = <span class="literal">true</span>;</span><br><span class="line">      enemy.<span class="property">lastKey</span> = <span class="string">&#x27;ArrowLeft&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ArrowUp&#x27;</span>:</span><br><span class="line">      enemy.<span class="property">velocity</span>.<span class="property">y</span> = -<span class="number">20</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ArrowDown&#x27;</span>:</span><br><span class="line">      enemy.<span class="title function_">attack</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>Js裡物件的拷貝</title>
    <url>/2023/04/30/2023-04-30-2-object-clone/</url>
    <content><![CDATA[<h2 id="複製物件"><a href="#複製物件" class="headerlink" title="複製物件"></a>複製物件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">food</span>: <span class="string">&#x27;rice&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj1;</span><br><span class="line"></span><br><span class="line">obj1.<span class="property">food</span> = <span class="string">&#x27;noodle&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">food</span>) <span class="comment">// &#x27;noodle&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>在js裡若複製的資料型態是物件時，我們複製的其實是改物件的記憶體位置，如上例，obj2 和 obj1都指向同一個記憶體位置，所以當改變obj1裡的值時，obj2同時會被改變。</p>
<h2 id="淺拷貝"><a href="#淺拷貝" class="headerlink" title="淺拷貝"></a>淺拷貝</h2><p>為了避免這個問題，我們可以用淺拷貝的方式，也就是新建立一個物件，將原本資料全部的屬性都複製進去。</p>
<h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">food</span>: <span class="string">&#x27;rice&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj1);</span><br><span class="line">obj1.<span class="property">food</span> = <span class="string">&#x27;noodle&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">food</span>) <span class="comment">// &#x27;rice&#x27;</span></span><br></pre></td></tr></table></figure>

<p>或是利用es6的展開運算子寫法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">food</span>: <span class="string">&#x27;rice&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; ...obj1 &#125;;</span><br><span class="line">obj1.<span class="property">food</span> = <span class="string">&#x27;noodle&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">food</span>) <span class="comment">// &#x27;rice&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>利用這個方法，可以拷貝物件裡第一層的屬性，但如果物件中屬性的值也是物件，就無法拷貝。</p>
<h2 id="深拷貝"><a href="#深拷貝" class="headerlink" title="深拷貝"></a>深拷貝</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">food</span>: <span class="string">&#x27;rice&#x27;</span>,</span><br><span class="line">  <span class="attr">flavor</span>: [<span class="string">&#x27;spicy&#x27;</span>, <span class="string">&#x27;sweet&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title class_">Json</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1));</span><br><span class="line">obj1.<span class="property">food</span> = <span class="string">&#x27;noodle&#x27;</span>;</span><br><span class="line">obj1.<span class="property">flavor</span>[<span class="number">0</span>] = <span class="string">&#x27;sour&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">food</span>) <span class="comment">// &#x27;rice&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">flavor</span>) <span class="comment">// [&#x27;spicy&#x27;, &#x27;sweet&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>若要連物件內的物件也拷貝，可以使用深拷貝的方法，就是將物件依序經過 JSON.stringify 及 JSON.parse 兩個方法，建立全新的物件。</p>
<p>上例中可以發現 obj2經過深拷貝後，就算改動 obj1內陣列的值，obj2也不會被影響。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>使用 js 中 的 Intl api</title>
    <url>/2023/05/21/2023-05-21-intl/</url>
    <content><![CDATA[<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>在 JS 中，如果我們需要調整不同語言間的資料格式，或將資料調整的更加容易閱讀，可以使用 Intl 這個 API。</p>
<h2 id="DateTimeFormat-調整時間格式"><a href="#DateTimeFormat-調整時間格式" class="headerlink" title="DateTimeFormat 調整時間格式"></a>DateTimeFormat 調整時間格式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formatter = <span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">DateTimeFormat</span>(<span class="string">&#x27;en-US&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formatter.<span class="title function_">format</span>());  <span class="comment">// 5/21/2023</span></span><br></pre></td></tr></table></figure>

<p>要使用 Intl api ，要先 new 出一個實體，並調用裡面 DateTimeFormat 這個方法。<br>DateTimeFormat 方法裡可以傳入要格式化的地區，如上我傳入 en-US 地區。</p>
<p>如果不確定格式化的地區，可以傳入 undefined，程式會根據使用者上網的地區自行帶入時間格式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">  <span class="attr">weekday</span>: <span class="string">&quot;long&quot;</span>,</span><br><span class="line">  <span class="attr">year</span>: <span class="string">&quot;numeric&quot;</span>,</span><br><span class="line">  <span class="attr">month</span>: <span class="string">&quot;long&quot;</span>,</span><br><span class="line">  <span class="attr">day</span>: <span class="string">&quot;numeric&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formatter = <span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">DateTimeFormat</span>(<span class="literal">undefined</span>, options);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formatter.<span class="title function_">format</span>()); <span class="comment">// 2023年5月21日 星期日</span></span><br></pre></td></tr></table></figure>

<p>在第二個參數可以傳入一個 options的 obj，用來指定格式是要用數字或是文字表達。</p>
<h2 id="NumberFormat-調整數字格式"><a href="#NumberFormat-調整數字格式" class="headerlink" title="NumberFormat 調整數字格式"></a>NumberFormat 調整數字格式</h2><p>基礎用法可以將數字加上使用者地區的格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> number = <span class="number">3500</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">NumberFormat</span>().<span class="title function_">format</span>(number));</span><br><span class="line"><span class="comment">// &#x27;3,500&#x27; if in US English locale</span></span><br></pre></td></tr></table></figure>

<p>NumberFormat 可以將數字加上幣值符號。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> number = <span class="number">123456.789</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">NumberFormat</span>(<span class="string">&#x27;de-DE&#x27;</span>, &#123; <span class="attr">style</span>: <span class="string">&#x27;currency&#x27;</span>, <span class="attr">currency</span>: <span class="string">&#x27;EUR&#x27;</span> &#125;).<span class="title function_">format</span>(number));</span><br><span class="line"><span class="comment">// Expected output: &quot;123.456,79 €&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The Japanese yen doesn&#x27;t use a minor unit</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">NumberFormat</span>(<span class="string">&#x27;ja-JP&#x27;</span>, &#123; <span class="attr">style</span>: <span class="string">&#x27;currency&#x27;</span>, <span class="attr">currency</span>: <span class="string">&#x27;JPY&#x27;</span> &#125;).<span class="title function_">format</span>(number));</span><br><span class="line"><span class="comment">// Expected output: &quot;￥123,457&quot;</span></span><br></pre></td></tr></table></figure>

<p>也可以加上不同的單位</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Formatting with units</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">NumberFormat</span>(<span class="string">&quot;pt-PT&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">style</span>: <span class="string">&quot;unit&quot;</span>,</span><br><span class="line">    <span class="attr">unit</span>: <span class="string">&quot;kilometer-per-hour&quot;</span>,</span><br><span class="line">  &#125;).<span class="title function_">format</span>(<span class="number">50</span>),</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 50 km/h</span></span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>vue (1) 宣告式模板渲染</title>
    <url>/2023/06/10/2023-06-10-vue-1-template/</url>
    <content><![CDATA[<h2 id="宣告式與命令式"><a href="#宣告式與命令式" class="headerlink" title="宣告式與命令式"></a>宣告式與命令式</h2><p>在純js裡，我們是用命令式的方式來寫程式。</p>
<ul>
<li>命令式: 我們寫的每一行程式來命令電腦執行。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;bitton&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, clickHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先命令電腦找出btn元素，再命令將btn綁上事件監聽</span></span><br></pre></td></tr></table></figure>

<p>在vue裡，直接在模板上宣告想要的功能，vue會幫我們完成後面的動作。</p>
<ul>
<li>宣告式: 直接在模板上宣告要使用的功能</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clickHandler&quot;</span>&gt;</span></span><br><span class="line">    開始</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 直接在模板上綁定功能 --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Virtual-Dom"><a href="#Virtual-Dom" class="headerlink" title="Virtual Dom"></a>Virtual Dom</h2><p><a href="https://youtu.be/DTJspLLm8Rs?list=PLEfh-m_KG4dbjf0YCJ7i0FFGK3FtQpanL&t=1800">教學連結</a></p>
<p>在vue裡面，我們會先撰寫template，之後 vue 會將 template 轉為 JS 的物件，也就是vurtual dom，最後在將 vurtual dom 轉為真正的dom。</p>
<p>至於為什麼要先轉成 vurtual dom 是因為 vue 會拿這個 vurtual dom 去和舊的 vurtual dom 比較，看哪邊不一樣，並只更新不一樣的地方，不會像 innerHtml 是整個 dom 重新渲染，從而提升網頁效能。</p>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用npm安裝 vue</span></span><br><span class="line">npm create vue@latest</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接引入 cdn</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>安裝好後，可以在網頁上建立 vue 的實體</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// vue3 寫法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> vm = <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  vm.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>這個物件的 data 就是 vue.js 儲存的資料，而生成後的物件則透過 mount 和 html 綁定。當在建立物件實體時，還會引入一個物件參數，也就是 vue.js 實體的核心，稱為 options 物件。在這個 options 物件中會定義與ui相關的狀態、事件與方法。</p>
<h2 id="模板語法"><a href="#模板語法" class="headerlink" title="模板語法"></a>模板語法</h2><p>當 vue 實體掛載完成後，可以將data內的資料用 <code>&#123;&#123; &#125;&#125;</code> 綁定到畫面。 <code>&#123;&#123; &#125;&#125;</code> 可以做資料的簡單運算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  數量: &#123;&#123; quantity &#125;&#125;</span><br><span class="line">  金額: &#123;&#123; price &#125;&#125;</span><br><span class="line">  總金額: &#123;&#123; quantity * price &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// vue3 寫法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> vm = <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">price</span>: <span class="number">800</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">quantity</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  vm.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><code>&#123;&#123; &#125;&#125;</code> 內可以帶入表達式進行運算</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;`list-$&#123;id&#125;`&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>非表達式不能被帶入 <code>&#123;&#123; &#125;&#125;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- this is a statement, not an expression: --&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- flow control won&#x27;t work either, use ternary expressions --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模板可使用的window方法"><a href="#模板可使用的window方法" class="headerlink" title="模板可使用的window方法"></a>模板可使用的window方法</h2><p>只有特定的 window 方法，可以在template 內使用，如 Math、Date<br>可用方法參考<a href="https://github.com/vuejs/core/blob/main/packages/shared/src/globalsAllowList.ts#L3">這裡</a></p>
<h2 id="共用data的汙染問題"><a href="#共用data的汙染問題" class="headerlink" title="共用data的汙染問題"></a>共用data的汙染問題</h2><p>當有多個 vue 實體想共用同樣的 data 格式時，會將 data 在實體外定義。此時 vue 物件內的 data 應該 return 解構後的 { …dataObj }，避免兩個vue實體都修改到同一個物件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// vue3 寫法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> dataObj = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> vm1 = <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123; ...dataObj &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> vm2 = <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123; ...dataObj &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app2&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>










]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>pinia (1) 基礎安裝與介紹</title>
    <url>/2023/06/11/2023-06-11-1-pinia/</url>
    <content><![CDATA[<h2 id="什麼是-pinia"><a href="#什麼是-pinia" class="headerlink" title="什麼是 pinia"></a>什麼是 pinia</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*uQjLk5Ic585g7JwwNQ12Mg.png"></p>
<p>pinia 是 vue 的集中式資料管理工具，當有資料需要在多個元件被使用時，可以將資料存在 store 裡再取用。<br>在每個元件裡，則可以使用 action 去改變 store裡的 state 資料狀態。</p>
<h2 id="安裝pinia"><a href="#安裝pinia" class="headerlink" title="安裝pinia"></a>安裝pinia</h2><p>在vue的專案裡，可以先下載 pinia</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure>

<p>然後在進入點 main.js 裡 引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>







]]></content>
      <tags>
        <tag>pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>pinia (2)  建立 store</title>
    <url>/2023/06/11/2023-06-11-2-pinia/</url>
    <content><![CDATA[<h2 id="建立-store"><a href="#建立-store" class="headerlink" title="建立 store"></a>建立 store</h2><p>在專案根目錄建立 store.js 作為 pinia 的資料儲存中心。<br>我們使用 defineStore方法來建立 store，第一個參數是這個store的名字，第二個參數則傳入物件，<br>裡面包含</p>
<ul>
<li>stste: 資料</li>
<li>getters: 資料產生的資料</li>
<li>actions: 方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">count</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&#x27;Eduardo&#x27;</span> &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="使用-store"><a href="#使用-store" class="headerlink" title="使用 store"></a>使用 store</h2><p>store 建立好後可以在不同元件內使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/counter&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// access the `store` variable anywhere in the component ✨</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> store = <span class="title function_">useCounterStore</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>pinia (3) 建立 actions</title>
    <url>/2023/06/11/2023-06-11-5-pinia/</url>
    <content><![CDATA[<h2 id="建立-actions"><a href="#建立-actions" class="headerlink" title="建立 actions"></a>建立 actions</h2><p>我們可以建立 actions 來更新 state 裡的資料。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// since we rely on `this`, we cannot use an arrow function</span></span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">randomizeCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">100</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在元件裡使用 actions</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> store = <span class="title function_">useCounterStore</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// call the action as a method of the store</span></span></span><br><span class="line"><span class="language-javascript">store.<span class="title function_">randomizeCounter</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Even on the template --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;store.randomizeCounter()&quot;</span>&gt;</span>Randomize<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="非同步使用"><a href="#非同步使用" class="headerlink" title="非同步使用"></a>非同步使用</h2><p>actions 裡也可執行非同步執行程式，如打api或取資料後再更新state。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mande &#125; <span class="keyword">from</span> <span class="string">&#x27;mande&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = <span class="title function_">mande</span>(<span class="string">&#x27;/api/users&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUsers = <span class="title function_">defineStore</span>(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">userData</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">registerUser</span>(<span class="params">login, password</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userData</span> = <span class="keyword">await</span> api.<span class="title function_">post</span>(&#123; login, password &#125;)</span><br><span class="line">        <span class="title function_">showTooltip</span>(<span class="string">`Welcome back <span class="subst">$&#123;<span class="variable language_">this</span>.userData.name&#125;</span>!`</span>)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="title function_">showTooltip</span>(error)</span><br><span class="line">        <span class="comment">// let the form component display the error</span></span><br><span class="line">        <span class="keyword">return</span> error</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>Factory function 工廠函式</title>
    <url>/2023/08/27/2023-08-27-1-factory-function/</url>
    <content><![CDATA[<h2 id="遇到的問題"><a href="#遇到的問題" class="headerlink" title="遇到的問題"></a>遇到的問題</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> me = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Sina&#x27;</span>,</span><br><span class="line">  <span class="title function_">talk</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> you = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tim&#x27;</span>,</span><br><span class="line">  <span class="title function_">talk</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">me.<span class="title function_">talk</span>() <span class="comment">// My name is Sina</span></span><br><span class="line">you.<span class="title function_">talk</span>() <span class="comment">// My name is Tim</span></span><br><span class="line"></span><br><span class="line">me.<span class="property">name</span> = <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">me.<span class="title function_">talk</span>() <span class="comment">// My name is Tom</span></span><br></pre></td></tr></table></figure>

<p>當我們有許多屬性一樣的物件時，若直接撰寫物件，會多出許多重複的code，並且物件的屬性是可以直接被修改，容易造成bug。</p>
<p>這時可以改用工廠函式來產生這些物件。</p>
<h2 id="工廠函式"><a href="#工廠函式" class="headerlink" title="工廠函式"></a>工廠函式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    <span class="title function_">talk</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="title class_">Person</span>(<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line">me.<span class="title function_">talk</span>() <span class="comment">// My name is Tom</span></span><br></pre></td></tr></table></figure>

<p>工廠函式即是用函式直接回傳一個新的物件，物件的屬性的值可由函式的參數傳入。如此不僅避免重複的code，也防止物件的內容被任意修改。</p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createElement</span>(<span class="params">type, text, color</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(type);</span><br><span class="line">  el.<span class="property">innerText</span> = text;</span><br><span class="line">  el.<span class="property">style</span>.<span class="property">color</span> = color;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(el);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    el,</span><br><span class="line">    <span class="title function_">setText</span>(<span class="params">text</span>) &#123;</span><br><span class="line">      el.<span class="property">innerText</span> = text,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setColor</span>(<span class="params">color</span>) &#123;</span><br><span class="line">      el.<span class="property">style</span>.<span class="property">color</span> = color,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> h1 = <span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Hey guys&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面範例中使用工廠函式來快速製造 h1 元素並掛載到dom上。</p>
<h2 id="工廠函式的問題"><a href="#工廠函式的問題" class="headerlink" title="工廠函式的問題"></a>工廠函式的問題</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    <span class="title function_">talk</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="title class_">Person</span>(<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> you = <span class="title class_">Person</span>(<span class="string">&#x27;Lisa&#x27;</span>);</span><br><span class="line"></span><br><span class="line">me.<span class="property">talk</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hello I am <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">me.<span class="title function_">talk</span>() <span class="comment">// Hello I am Tom</span></span><br><span class="line">you.<span class="title function_">talk</span>() <span class="comment">// My name is Lisa</span></span><br></pre></td></tr></table></figure>

<p>使用工廠函式產生物件時，每個回傳的物件都是獨立的記憶體位置，如上我修改了 me.talk()的函式內容，<br>you.talk()並不會被修改，因為兩個是不同的獨立物件。</p>
<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myProto = &#123;</span><br><span class="line">  <span class="title function_">talk</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`I am <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">create</span>(myProto, &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: name,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="title function_">createPerson</span>(<span class="string">&#x27;Sina&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> you = <span class="title function_">createPerson</span>(<span class="string">&#x27;Lisa&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>這次在工廠函式中，我們不直接回傳一個物件，而是用 Object.create() 方法，指定 myProto 為 prototype物件，<br>這樣 me.talk() 和 you.talk() 就會指向同一個函式了。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>pinia (3) state資料建立</title>
    <url>/2023/06/11/2023-06-11-3-pinia/</url>
    <content><![CDATA[<h2 id="建立-state"><a href="#建立-state" class="headerlink" title="建立 state"></a>建立 state</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;storeId&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// arrow function recommended for full type inference</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// all these properties will have their type inferred automatically</span></span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Eduardo&#x27;</span>,</span><br><span class="line">      <span class="attr">isAdmin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">items</span>: [],</span><br><span class="line">      <span class="attr">hasChanged</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在 store 裡建立state，使用的是箭頭函式來回傳一包物件資料。</p>
<h2 id="取得-store-資料"><a href="#取得-store-資料" class="headerlink" title="取得 store 資料"></a>取得 store 資料</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span><br><span class="line"></span><br><span class="line">store.<span class="property">count</span>++</span><br></pre></td></tr></table></figure>

<p>在元件裡可以用 useStore() 來取得state資料。</p>
<h2 id="重設-state"><a href="#重設-state" class="headerlink" title="重設 state"></a>重設 state</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span><br><span class="line"></span><br><span class="line">store.$reset()</span><br></pre></td></tr></table></figure>

<p>如果想重設state回原始狀態，可以使用 $reset() 方法</p>
]]></content>
      <tags>
        <tag>pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP Networking(1) 什麼是 http</title>
    <url>/2023/09/03/2023-09-03-http-1/</url>
    <content><![CDATA[<h2 id="什麼是-http"><a href="#什麼是-http" class="headerlink" title="什麼是 http"></a>什麼是 http</h2><p>當兩台電腦要透過網路上交換訊息時，必須使用相同的規則。就像英文使用者無法和日文使用者溝通一樣，電腦要互相溝通的語言稱為 <code>protocol 協議</code>。</p>
<p>目前最常用的協議就是 HTTP，也就是 Hypertext Transfer Protocol。</p>
<h2 id="需求與回應"><a href="#需求與回應" class="headerlink" title="需求與回應"></a>需求與回應</h2><p>http 的核心就是 request-response system，包含</p>
<ul>
<li><p>client: 向server 提出 http request 的電腦，我們稱為客戶端(如桌機、手機、平板等)</p>
</li>
<li><p>server: 回應 http request 的伺服器，回傳客戶端 文字、圖片、css、html等資訊。一個好的server應該是24小時在線以隨時提供  client的需求。</p>
</li>
</ul>
<p><img src="https://i.imgur.com/ReFw6nN.png"></p>
<p>一台電腦可以是 client、server、或兩者都是，看的是這台電腦執行的誌哪一端的任務。</p>
<h2 id="HTTP-URLS"><a href="#HTTP-URLS" class="headerlink" title="HTTP URLS"></a>HTTP URLS</h2><p>URLS (Uniform Resource Locator)，是另一台電腦主機或我們稱為伺服器的地址。</p>
<p><img src="https://i.imgur.com/6jiaXBn.png"></p>
<p>在 URLS 的一開始使用 http:&#x2F;&#x2F; 來表示http protocol協議會被使用在此次通訊。特別註明的原因是除了http協議以外也有其他協議 會使用url。</p>
]]></content>
      <categories>
        <category>HTTP Networking</category>
      </categories>
      <tags>
        <tag>HTTP Networking系列</tag>
      </tags>
  </entry>
  <entry>
    <title>pinia (3) getter 建立</title>
    <url>/2023/06/11/2023-6-11-4-pinia/</url>
    <content><![CDATA[<h2 id="什麼是-getter"><a href="#什麼是-getter" class="headerlink" title="什麼是 getter"></a>什麼是 getter</h2><p>getter 就和 vue 裡的 computed 一樣，會根據state的資料，產生一筆新的資料。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如上， doubleCount 依據 state.count 回傳2倍數值的資料。</p>
<h2 id="依賴其他-getter"><a href="#依賴其他-getter" class="headerlink" title="依賴其他 getter"></a>依賴其他 getter</h2><p>當要根據其他 getter 來產生資料時，可以使用 this 來指向整個物件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// automatically infers the return type as a number</span></span><br><span class="line">    <span class="title function_">doubleCount</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">count</span> * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// the return type **must** be explicitly set</span></span><br><span class="line">    <span class="title function_">doublePlusOne</span>(): number &#123;</span><br><span class="line">      <span class="comment">// autocompletion and typings for the whole store ✨</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">doubleCount</span> + <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>(0) CSS基礎篇 font-family 教學</title>
    <url>/2022/06/20/2024-04-04-font-family/</url>
    <content><![CDATA[<h2 id="system-ui-字型的好處"><a href="#system-ui-字型的好處" class="headerlink" title="system-ui 字型的好處"></a>system-ui 字型的好處</h2><p><img src="/../images/css/font-family.png" alt="各系統預設字體"></p>
<p>一般建立網頁時，常用 google font 的 CDN 來載入字型，但會讓網頁速度變慢。<br>使用電腦、手機內建的 system-ui 可以避免這個問題。</p>
<p>字體設定懶人包:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: system-ui, -apple-system, BlinkMacSystemFont, <span class="string">&quot;Segoe UI&quot;</span>, <span class="string">&quot;Microsoft JhengHei&quot;</span>, Roboto,  <span class="string">&quot;Helvetica Neue&quot;</span>, Arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-apple-system, BlinkMacSystemFont</code> : Apple 系統字型。</li>
<li><code>Segoe UI</code>: Window 系統英文預設字型。</li>
<li><code>Microsoft JhengHei</code>: Window 系統中文預設字型。</li>
<li><code>Roboto</code>: Android, Unix 系統字型。</li>
<li><code>&quot;Helvetica Neue&quot;</code>: ios 字體</li>
</ul>
<p>當這樣設定時，系統會從最前面的 system-ui 字型開始套用，如果找不到，就往後尋找直到最後的 sans-serif 為止。通常撰寫字型的時候會在最後將通用字型（像是：sans-serif 無襯線字體）寫上，確保各個裝置都能正確瀏覽。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Roboto&#x27;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 system-ui 的另一個好處是，從 100-900的字體粗細都有。不像 google-font 還要下載指定的字體粗細。</p>
<h2 id="設計稿指定字型"><a href="#設計稿指定字型" class="headerlink" title="設計稿指定字型"></a>設計稿指定字型</h2><p>如果設計稿有指定的中文或英文字型，可以加在通用設定前面。<br>英文字型放在中文前面，因為英文字型只會套用到英文字上，<br>中文字型則會同時套用到中英文上，為了讓英文能先吃到設定所以放前面。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;指定英文字型&quot;</span>, <span class="string">&quot;指定中文字型&quot;</span>, system-ui, -apple-system, BlinkMacSystemFont, <span class="string">&quot;Segoe UI&quot;</span>, <span class="string">&quot;Microsoft JhengHei&quot;</span>, Roboto,  <span class="string">&quot;Helvetica Neue&quot;</span>, Arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Google-Fonts-線上外部字型載入"><a href="#Google-Fonts-線上外部字型載入" class="headerlink" title="Google Fonts 線上外部字型載入"></a>Google Fonts 線上外部字型載入</h2><p>選擇想要載入的字型，以 <a href="https://fonts.google.com/specimen/Castoro">Castoro</a> 為例。</p>
<ol>
<li>進入 Google Fonts 官網，搜尋 Castoro</li>
<li>點擊右上角的「Get font」</li>
<li>會跳轉到這個畫面，接著點擊「Get embed code」</li>
</ol>
<p><img src="https://imgur.com/OnsYucx.png"></p>
<p>然後下方會提供兩種方式載入（擇一使用）</p>
<p>使用 <code>&lt;link&gt;</code> 方式：<br>將程式碼貼到 HTML <head> 內<br>範例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.gstatic.com&quot;</span> <span class="attr">crossorigin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Castoro:ital@0;1&amp;display=swap&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span> <span class="comment">&lt;!-- 自定義的 CSS 檔 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 @import 方式：<br>在 CSS 最上方加入</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;https://fonts.googleapis.com/css2?family=Castoro:ital@0;1&amp;display=swap&#x27;</span>);</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>閉包 closures</title>
    <url>/2023/08/30/2023-8-30-closures/</url>
    <content><![CDATA[<h2 id="閉包說明"><a href="#閉包說明" class="headerlink" title="閉包說明"></a>閉包說明</h2><p>當一個函式 return 另一個函式出來時，就是閉包的概念。</p>
<p>因為我們在呼叫函式以前，範圍鍊就已經建立，被 return 出來的函式，可以取得父層函式內部的變數。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter1 = <span class="title function_">count</span>();</span><br><span class="line"><span class="keyword">const</span> counter2 = <span class="title function_">count</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">counter1</span>() <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">counter1</span>() <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">counter2</span>() <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">counter2</span>() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>因為每個count()被執行時，會產生獨立的執行環境，讓 counter1、counter2 內部的 count 變數都是獨立的變數，並避免將 count 設定成全域變數，產生錯誤的風險。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clickHandler</span>(<span class="params">size</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">`<span class="subst">$&#123;size&#125;</span>px`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;size-12&#x27;</span>).<span class="property">onClick</span> = <span class="title function_">clickHandler</span>(<span class="number">12</span>);</span><br></pre></td></tr></table></figure>

<p>上面是另一個閉包範例，我們將 size 以參數傳入，並回傳一個設定字體大小的函式。</p>
<h2 id="閉包回傳物件"><a href="#閉包回傳物件" class="headerlink" title="閉包回傳物件"></a>閉包回傳物件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">storeMoney</span>(<span class="params">initValue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> money = initValue || <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increase</span>: <span class="keyword">function</span>(<span class="params">price</span>) &#123;</span><br><span class="line">      money += price;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrease</span>: <span class="keyword">function</span>(<span class="params">price</span>) &#123;</span><br><span class="line">      money -= price;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span>(<span class="params">price</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> money;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我們也可以在函式內回傳一個物件，利用物件內的函式去取得父層函式的變數值。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>CSS PX EM 與 REM 的差異</title>
    <url>/2024/04/06/2024-04-06-em-rem/</url>
    <content><![CDATA[<h2 id="PX"><a href="#PX" class="headerlink" title="PX"></a>PX</h2><p>px 的特性是屬於 絕對數值，他不受外圍的單位影響，只要固定是 12px，就會以 12 像素呈現。以下方的範例來說，他並不會受到外圍文字大小所影響，內部的文字大小還是依據 CSS 設定所呈現。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*p-48wfpme3d3Mi37jjjXrQ.png"></p>
<h2 id="EM"><a href="#EM" class="headerlink" title="EM"></a>EM</h2><p>另一個常見的文字單位是 em， em 是相對的的數值單位，它會受到外圍的文字大小所影響，而 1em 即是 1 的文字大小， 1.5em 也就是 1.5 倍的文字大小。</p>
<p>以下方的範例可以發現，如果外圍是以 15px，內層的文字第一層 1em 等同於 15px，隨後的依比例放大。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*Unp2jeV1E7cryX0qtCVQHQ.png"></p>
<p>接下來改成使用 em 來做實驗，外層的文字大小直接從 1.4em 開始，可以看到內層的 1em 文字大小等同於外層 1.4em，隨後的逐漸放大。如果在加入一層在內部，文字就會以 1.4 * 1.4 的倍數再放大，這是 em 的相對比例單位的特性，是優點也是缺點，如果無法掌握就容易失控。</p>
<p><img src="https://medium.com/aeb299a1-12d2-4d23-a526-a273f428b72e"></p>
<h2 id="REM"><a href="#REM" class="headerlink" title="REM"></a>REM</h2><p>rem 也是相對的文字尺寸，和 em 使用方法接近，不同的是他僅相對於 root 層級的文字大小(網頁中的 html)。</p>
<p>以這個範例來說，此網站的文字大小是 16px，rem的尺寸就是以 16px 為基準，故下方的 1rem 會與 16px 相同尺寸。所以無論外層是否有其他文字大小，皆不會影響 rem 的尺寸，唯一會影響 rem 比例的只有 html 的文字大小</p>
<p><img src="https://medium.com/fc671f1f-e8a1-4c39-86a1-0c63bfa118a8"></p>
<h2 id="該如何選擇"><a href="#該如何選擇" class="headerlink" title="該如何選擇"></a>該如何選擇</h2><h3 id="選擇-em"><a href="#選擇-em" class="headerlink" title="選擇 em"></a>選擇 em</h3><p>em 的文字大小基準取決於父層的文字大小，所以建議使用在限制區域的內容、元件 如 Button<br>等等，就文字大小切換的效果來說，em 可以輕易的從父層改變進而影響內容文字的大小。</p>
<h3 id="選擇-rem"><a href="#選擇-rem" class="headerlink" title="選擇 rem"></a>選擇 rem</h3><p>rem 的文字基準取決於最外層的 html 文字大小，很適合用在整體的尺寸大小切換，以 RWD 響應式網頁來說，可以依據不同的尺寸，統一切換整體網頁的文字大小。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>(0-1) CSS基礎篇 自行hosting google font</title>
    <url>/2022/06/20/2024-04-04-font-hosting/</url>
    <content><![CDATA[<h2 id="為什麼要自行hosting-google-font"><a href="#為什麼要自行hosting-google-font" class="headerlink" title="為什麼要自行hosting google font"></a>為什麼要自行hosting google font</h2><p>以前當我們在使用 google font時，大多會用 cdn 的方式來載入字型。但自行hosting google font<br>，有以下好處:</p>
<ul>
<li><p>加快網路載入速度: 自行hosting，不必像 CDN 一樣向 server申請字型資源，可以讓網頁載入速度更快。</p>
</li>
<li><p>降低網頁跑版問題: 使用cdn載入字型，可能因為載入字型的時間，導致網頁暫時跑版。自行hosting可避免此問題。</p>
</li>
</ul>
<h2 id="自行hosting-方法"><a href="#自行hosting-方法" class="headerlink" title="自行hosting 方法"></a>自行hosting 方法</h2><ol>
<li><p>來到 <a href="https://fonts.google.com/">google font 官網</a></p>
</li>
<li><p>選擇你想使用的字型，點選下載</p>
</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*b7lVRh_6Qnp4Vbg4iLS3Qg.png"></p>
<ol start="3">
<li>解壓縮下載好的字型，</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*WNvYUqKLJrCKJ8j29jQ9MA.png"></p>
<ol start="4">
<li>來到 <a href="https://www.fontsquirrel.com/tools/webfont-generator">fontsquirrel</a>，點選上傳檔案，將字型檔案壓縮。</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*vzsTfF4EZmNV6cwQDeHueQ.png"></p>
<ol start="5">
<li>下載壓縮好的字型到網頁專案資料夾</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*4JlORBm4mAKD7LIwc6_Nvw.png"></p>
<ol start="6">
<li>在 scss 檔案裡用 @font-face 載入字型，@font-face 裡的 src 指向你存放字型檔案的位置。</li>
</ol>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Roboto&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">  <span class="attribute">src</span>: url(<span class="string">&#x27;../../font/squeez/roboto-black-webfont.woff2&#x27;</span>) format(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">       url(<span class="string">&#x27;../../font/squeez/roboto-black-webfont.woff&#x27;</span>) format(<span class="string">&#x27;woff&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Roboto&#x27;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(14) SCSS練功坊-function</title>
    <url>/2024/04/06/2024-04-06-scss-function/</url>
    <content><![CDATA[<h2 id="使用-function-來產生"><a href="#使用-function-來產生" class="headerlink" title="使用 function 來產生"></a>使用 function 來產生</h2><p>當在 scss 想計算較複雜的數值時，可以使用 funtion</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@function</span> light-comp(<span class="variable">$color</span>) &#123;</span><br><span class="line">  <span class="variable">$complement</span>: complement(<span class="variable">$color</span>);</span><br><span class="line">  <span class="variable">$light-complement</span>: lighten(<span class="variable">$complement</span>, <span class="number">30%</span>);</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$light-complement</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上 我們在 自己建立的 light-comp function 中，傳入一個變數，<br>透過兩個內建的函式，來調整原本的顏色。</p>
<ul>
<li>complement(): 回傳相對色</li>
<li>lighten(): 調亮顏色</li>
</ul>
<p>最後將調整完的 $light-complement 透過 @return 回傳。</p>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>(13) SCSS練功坊-hover時產生樣式</title>
    <url>/2024/04/06/2024-04-06-scss-hover/</url>
    <content><![CDATA[<h2 id="產生-hover-樣式"><a href="#產生-hover-樣式" class="headerlink" title="產生 hover 樣式"></a>產生 hover 樣式</h2><p>在 scss 裡，可以用 &amp; 來指向父層，產生 hover 時的樣式。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.text-primary</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上在 hover 時，color會變白色。</p>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>(12) SCSS練功坊-if</title>
    <url>/2024/04/06/2024-04-06-scss-if/</url>
    <content><![CDATA[<h2 id="if-用法"><a href="#if-用法" class="headerlink" title="if 用法"></a>if 用法</h2><p>在 scss 中，可以用 @if 進行判斷，如下。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@if</span>(<span class="number">10</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="selector-class">.test-if</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">  <span class="selector-class">.test-if</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上會產上 color: black; 樣式</span></span><br></pre></td></tr></table></figure>

<h2 id="and-用法"><a href="#and-用法" class="headerlink" title="and 用法"></a>and 用法</h2><p>當想判斷 兩個值是否同時符合條件時，可以用 and</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@if</span>(<span class="number">1</span> == <span class="number">1</span> <span class="keyword">and</span> <span class="number">5</span> != <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="selector-class">.test-if</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">  <span class="selector-class">.test-if</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以上會產上 color: black; 樣式</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>(11) SCSS練功坊-Map</title>
    <url>/2024/04/06/2024-04-06-scss-map/</url>
    <content><![CDATA[<h2 id="建立map"><a href="#建立map" class="headerlink" title="建立map"></a>建立map</h2><p>在 scss 裡，我們可以用 map 來將多個變數整合在一個 map 裡。 map 就像 Js的陣列一樣，有key和 value。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$primary</span>: <span class="number">#326dee</span>;</span><br><span class="line"><span class="variable">$secondary</span>: <span class="number">#1ac888</span>;</span><br><span class="line"><span class="variable">$error</span>: <span class="number">#d32752</span>;</span><br><span class="line"><span class="variable">$info</span>: <span class="number">#f6c31c</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// color plattes</span></span><br><span class="line"><span class="variable">$colors</span>: (</span><br><span class="line">  <span class="string">&quot;primary&quot;</span>: <span class="variable">$primary</span>,</span><br><span class="line">  <span class="string">&quot;secondary&quot;</span>: <span class="variable">$secondary</span>,</span><br><span class="line">  <span class="string">&quot;error&quot;</span>: <span class="variable">$error</span>,</span><br><span class="line">  <span class="string">&quot;info&quot;</span>: <span class="variable">$info</span>,</span><br><span class="line">  <span class="string">&quot;blue&quot;</span>: <span class="number">#1919e6</span>,</span><br><span class="line">  <span class="string">&quot;red&quot;</span>: <span class="number">#e61919</span>,</span><br><span class="line">  <span class="string">&quot;yellow&quot;</span>: <span class="number">#e6e619</span>,</span><br><span class="line">  <span class="string">&quot;green&quot;</span>: <span class="number">#19e635</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="使用-map-方法"><a href="#使用-map-方法" class="headerlink" title="使用 map 方法"></a>使用 map 方法</h2><p>有了 map 後，可以使用 map 的方法來對陣列操作。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.test-btn</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: map-get(<span class="variable">$colors</span>, <span class="string">&quot;purple&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// map-get 取得map裡指定key的值</span></span><br><span class="line"><span class="keyword">@debug</span> map-get(<span class="variable">$colors</span>, <span class="string">&quot;purple&quot;</span>);  <span class="comment">// #326dee;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map-has-key 確認陣列裡是否有指定的key，有回傳 true，否回傳false</span></span><br><span class="line"><span class="keyword">@debug</span> map-has-key(<span class="variable">$colors</span>, <span class="string">&quot;secondary&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">@debug</span> map-has-key(<span class="variable">$colors</span>, <span class="string">&quot;tertiary&quot;</span>);  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map-remove 移除map裡的key</span></span><br><span class="line"><span class="keyword">@debug</span> map-remove(<span class="variable">$colors</span>, <span class="string">&quot;primary&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// map-merge 合併兩個map</span></span><br><span class="line"><span class="keyword">@debug</span> map-merge(<span class="variable">$colors</span>, (<span class="string">&quot;pink&quot;</span>: <span class="number">#ffc0cb</span>));</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP Networking(2) 什麼是 WEB ADDRESSES</title>
    <url>/2024/04/11/2024-04-11-http-dns/</url>
    <content><![CDATA[<h2 id="WEB-ADDRESSES"><a href="#WEB-ADDRESSES" class="headerlink" title="WEB ADDRESSES"></a>WEB ADDRESSES</h2><p>在現實世界，我們使用地址來標記朋友、商家、活動的位置。在網路世界，我們用 IP(Internet Protocol) 來標記其他電腦所在位置。一個 IP 可以像這樣</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8.13.156.7 </span><br></pre></td></tr></table></figure>

<p>共由四段數字組成，每段數字可以是 0-255 其中之一。</p>
<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>但使用者若要訪問一個網站，不可能去記住每個網站的 IP 位置，而是直接打網址如 <a href="http://www.google.com/">www.google.com</a> 來訪問。<br>這時就需要 DNS (Domain Name System)，DNS的功能就是將 人類看得懂的網址(Domain Name)如 <a href="http://www.google.com/">www.google.com</a> 和 IP位置連結。這樣人們只需要打網址就能訪問網站。</p>
<p>舉例來說 有一個 網址 如下:</p>
<p><code>https://en.wikipedia.org/wiki/Miniature_pig</code></p>
<p>這串網址的 Domain Name 的部分就是 <code>en.wikipedia.org</code>，會被轉換成特定的 IP 位置，讓我們能找到這個網站。</p>
<p>至於 DNS 主要是由一個叫 ICANN 的 非營利組織管理。若將 DNS 想像成一個電話簿，ICANN則是出版這本電話簿的出版商。</p>
<h2 id="Subdomains"><a href="#Subdomains" class="headerlink" title="Subdomains"></a>Subdomains</h2><p>子網域 (Subdomain) 是從網域名稱再加以延伸的部分，讓使用者可以在同一個網域下，透過子網域進入完全不同的網址頁面<br>假設 天矽官網的<a href="http://www.tsg.com.tw是主網域,那麼天矽購物網的/">www.tsg.com.tw是主網域，那麼天矽購物網的</a> shop.tsg.com.tw 就會是它的子網域。</p>
]]></content>
      <categories>
        <category>HTTP Networking</category>
      </categories>
      <tags>
        <tag>HTTP Networking系列</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP Networking(4) Asynchronous</title>
    <url>/2024/04/13/2024-04-13-ASYNCHRONOUS/</url>
    <content><![CDATA[<h2 id="同步與非同步"><a href="#同步與非同步" class="headerlink" title="同步與非同步"></a>同步與非同步</h2><ul>
<li>synchronous: 也就是同步的程式碼，代表程式是按照順序執行，一行執行結束才執行下一行。</li>
</ul>
<p>舉例來說 下面 console 的程式碼會逐行執行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I print first&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I print second&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I print third&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>asynchronous: 非同步的程式碼，讓我們可以同時執行不同的程式碼，舉例來說:</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I print first&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I print third because I&#x27;m waiting 100 milliseconds&quot;</span>), <span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I print second&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// I print first</span></span><br><span class="line"><span class="comment">// I print second</span></span><br><span class="line"><span class="comment">// I print third because I&#x27;m waiting 100 milliseconds</span></span><br></pre></td></tr></table></figure>

<p>在js裡，當執行一般同步的程式碼時，那沒有問題就一行接一行執行，但當遇到非同步的程式碼時，如 setTimeout、打api時，js會將非同步程式碼放到事件儲列，並接著執行下面的程式碼，等同步的程式碼跑完後就會跑事件儲列裡的程式碼。</p>
<p>好處是，我們不用等待非同步的程式碼執行完才能執行下一步，我們可以同時進行。</p>
<h2 id="為什麼需要非同步"><a href="#為什麼需要非同步" class="headerlink" title="為什麼需要非同步"></a>為什麼需要非同步</h2><p>我們會希望盡量保持程式是同步執行的，因為那比較簡單了解。但有時也需要非同步的程式碼，例如當使用者操作更新一個網頁時，瀏覽器需要和伺服器溝通取得新資料，這個 HTTP request  通常會花 100 毫秒左右，如果使用者必須等 100毫秒才能在操作網頁，甚至連滑鼠都不能使用，會是很糟的使用者體驗。</p>
<p>藉由非同步的程式碼，可以讓網頁在等待 HTTP request 的同時，執行其他code，讓使用者體驗更好。</p>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a><a href="https://www.boot.dev/assignments/e9d87b33-df09-4d49-9c96-ce085b81ec92">Promise</a></h2><p>在 js 中有內建的 Promise物件來處理非同步程式，就和現實世界做一個承諾(promise)一樣，會有兩種結果，要嘛我成功行承諾(resovle)，要嘛我沒有履行承諾(reject)，程式碼如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">getRandomBool</span>()) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;resolved!&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&quot;rejected!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandomBool</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">.5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面程式碼會在1秒後，若成功回傳 resolved! 、失敗回傳rejected! 當我們在等待 promise 結果回傳前，其他程式碼會同時被執行。</p>
<h3 id="如何使用-pormise"><a href="#如何使用-pormise" class="headerlink" title="如何使用 pormise"></a>如何使用 pormise</h3><p>pormise 物件有兩個方法:</p>
<ul>
<li>.then: 如果promise resolve， .then方法會被執行。</li>
<li>.catch: 如果promise reject， .catch方法會被執行。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The promise finally <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The promise finally <span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// prints:</span></span><br><span class="line"><span class="comment">// The promise finally resolved!</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="comment">// the promise finally rejected!</span></span><br></pre></td></tr></table></figure>

<h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p>除了 <code>.then() .catch()</code>，也可以用 await 。<br>await 會等待 Promise 被 resolve 後將值回傳。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="keyword">await</span> promise</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Resolved with <span class="subst">$&#123;message&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>

<p>但這不代表整個 js 程式會停止並等待，而只是這段程式會 await 等待。<br>await 可以讓我們將非同步的程式碼寫得和同步的程式碼一樣，<br>且 await keyword 只能使用在 async function 中或程式的第一層<a href="https://stackoverflow.com/questions/46515764/how-can-i-use-async-await-at-the-top-level">top level module</a>。</p>
<h2 id="async-function"><a href="#async-function" class="headerlink" title="async function"></a>async function</h2><p>就像 await 被用來取代 .then() 一樣， async function 被用來取代 <code>new Promise</code>。<br>當一個 function 前面加上 async 關鍵字時，這個function 會自動回傳一個 promise，這個promise resolve的值，就是function return 出來的值。</p>
<p>以下為 promise 和 async function 的範例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// promise 範例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPromiseForUserData</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchDataFromServerAsync</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">user</span>)&#123;</span><br><span class="line">      <span class="title function_">resolve</span>(user)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> promise = <span class="title function_">getPromiseForUserData</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// async function 範例</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getPromiseForUserData</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">fetchDataFromServer</span>()</span><br><span class="line">  <span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="title function_">getPromiseForUserData</span>()</span><br></pre></td></tr></table></figure>

<h2 id="async-function-的優點"><a href="#async-function-的優點" class="headerlink" title="async function  的優點"></a>async function  的優點</h2><p>比起 <code>.then()</code> 使用 async function 可以讓程式碼更簡單易懂</p>
<p><code>.then()</code>寫法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetchUser.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">user</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetchLocationForUser</span>(user)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">location</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetchServerForLocation</span>(location)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">server</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The server is <span class="subst">$&#123;server&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>async 寫法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">fetchUser</span>()</span><br><span class="line"><span class="keyword">const</span> location = <span class="keyword">await</span> <span class="title function_">fetchLocationForUser</span>(user)</span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">await</span> <span class="title function_">fetchServerForLocation</span>(location)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The server is <span class="subst">$&#123;server&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>HTTP Networking</category>
      </categories>
      <tags>
        <tag>HTTP Networking系列</tag>
      </tags>
  </entry>
  <entry>
    <title>(14) SCSS練功坊-製作自己的 grid system</title>
    <url>/2024/04/07/2024-04-07-scss-breakpoint/</url>
    <content><![CDATA[<h2 id="製作-grid-system"><a href="#製作-grid-system" class="headerlink" title="製作 grid system"></a>製作 grid system</h2><p>像 bootstrap、tailwind 等css框架，都會有 grid system 來快速排版。<br>本篇會介紹 如何在 scss 裡製作屬於自己的格線系統</p>
<h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><p>在格線系統中， container 是一個將內容置中的容器。<br>會使用 <code>margin: 0 auto</code>，讓容器置中。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _grid.scss</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在container 內層會有 .row，用 flex 讓裡面的 col 能水平排列</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-flow</span>: row wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再來是 col 的製作，預設會有 12 個欄位<br>利用 col-2、col-5 的方式決定每個col 佔 12欄裡的幾欄。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$grid-columns</span>: <span class="number">12</span>; <span class="comment">// 12欄</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$breakpoints</span>: (</span><br><span class="line">  <span class="string">&quot;xs&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;sm&quot;</span>: <span class="number">480px</span>,</span><br><span class="line">  <span class="string">&quot;md&quot;</span>: <span class="number">720px</span>,</span><br><span class="line">  <span class="string">&quot;lg&quot;</span>: <span class="number">960px</span>,</span><br><span class="line">  <span class="string">&quot;xl&quot;</span>: <span class="number">1200px</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先跑每個斷點的迴圈</span></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$brek</span>, <span class="variable">$value</span> in <span class="variable">$breakpoints</span> &#123;</span><br><span class="line">  <span class="comment">// include mq 的 mixin</span></span><br><span class="line">  <span class="keyword">@include</span> mq(<span class="variable">$brek</span>) &#123;</span><br><span class="line">    <span class="comment">// 從 1 跑到 12</span></span><br><span class="line">    <span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="variable">$grid-columns</span> &#123;</span><br><span class="line">      <span class="selector-class">.col-</span>#&#123;<span class="variable">$brek</span>&#125;-#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">        <span class="attribute">flex-grow</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 每欄 col 的寬度</span></span><br><span class="line">        <span class="attribute">width</span>: math.div(<span class="variable">$i</span> * <span class="number">100%</span>, <span class="variable">$grid-columns</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="製作-gap"><a href="#製作-gap" class="headerlink" title="製作 gap"></a>製作 gap</h3><p>在每個col如果想要有間隔時，我們可以製作每欄的 gap<br>首先先設定 一個 gap 的 陣列，來決定 gap的寬度。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$grid-gaps</span>: (</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="number">10px</span>,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="number">20px</span>,</span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>: <span class="number">30px</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>再來製作 gap </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// grid gaps</span></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$key</span>, <span class="variable">$val</span> in <span class="variable">$grid-gaps</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 在 row欄上加上 gap-3、gap-0 等 class來決定gap寬度</span></span><br><span class="line">  <span class="comment">// 每個 row 底下的 col 會有 padding來撐開寬度。</span></span><br><span class="line">  <span class="selector-class">.gap-</span>#&#123;<span class="variable">$key</span>&#125; &gt; *&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="variable">$val</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用負的margin來移除，最左欄和最右欄的 padding，讓col能貼齊row。</span></span><br><span class="line">  <span class="selector-class">.gap-</span>#&#123;<span class="variable">$key</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="variable">$val</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: -<span class="variable">$val</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP Networking(5) Http Headers</title>
    <url>/2024/04/14/2024-04-14-http-header/</url>
    <content><![CDATA[<h2 id="什麼是-http-headers"><a href="#什麼是-http-headers" class="headerlink" title="什麼是 http headers"></a>什麼是 http headers</h2><p>http headers 可以讓 client 或 server 在每次 request 或 response 時附帶額外的資訊。<br>例如在網站登入時，常作為使用者的身分驗證使用。<br>http headers是由一對一對的 key value pair，組成，由冒號(:)隔開</p>
<p>常見的如:</p>
<ul>
<li>Content-Type: application&#x2F;json &#x3D;&gt; 傳輸資料的格式</li>
<li>User-Agent:  Mozilla&#x2F;5.0  &#x3D;&gt; 用戶端的裝置</li>
<li>Date: Wed, 21 Oct 2015 07:28:00 GMT &#x3D;&gt; 傳輸資料的日期</li>
</ul>
<h2 id="使用瀏覽器工具"><a href="#使用瀏覽器工具" class="headerlink" title="使用瀏覽器工具"></a>使用瀏覽器工具</h2><p>在瀏覽器的開發者工具中，可以找到 network 標籤，裡面記錄了整個網頁的網路活動，包括瀏覽器發出的 request 和收到的 response，還有整個資源請求所需的時間。</p>
<p><img src="https://storage.googleapis.com/qvault-webapp-dynamic-assets/course_assets/STKdceG.png"></p>
]]></content>
      <categories>
        <category>HTTP Networking</category>
      </categories>
      <tags>
        <tag>HTTP Networking系列</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP Networking(6) JSON</title>
    <url>/2024/04/14/2024-04-14-html-5/</url>
    <content><![CDATA[<h2 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a><a href="https://www.boot.dev/assignments/e17d690e-5258-4470-a2e3-394ce62bf046">JSON格式</a></h2><p>JSON 就是字串版的 JavaScrip 物件格式，是由美國程式設計師道格拉斯·克羅克福特構想和設計的一種輕量級資料交換格式。其內容由屬性和值所組成。<br>因為JavaScrip 的物件只存在專案的變數中，當我們想將物件向外傳遞時(例如使用 http request)，需要先將資料轉成 JSON 格式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSON 格式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;movies&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;genre&quot;</span>: <span class="string">&quot;Action&quot;</span>,</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Iron Man&quot;</span>,</span><br><span class="line">            <span class="string">&quot;director&quot;</span>: <span class="string">&quot;Jon Favreau&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;genre&quot;</span>: <span class="string">&quot;Action&quot;</span>,</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;The Avengers&quot;</span>,</span><br><span class="line">            <span class="string">&quot;director&quot;</span>: <span class="string">&quot;Joss Whedon&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="將JSON轉換成物件"><a href="#將JSON轉換成物件" class="headerlink" title="將JSON轉換成物件"></a>將JSON轉換成物件</h2><p>要在 js 中使用 json 的資料，要先將json轉換成 js 的物件。<br>js的 <code>fetch()</code> api 有提供轉換的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">fetch</span>(...)</span><br><span class="line"><span class="keyword">const</span> javascriptObjectResponse = <span class="keyword">await</span> resp.<span class="title function_">json</span>()</span><br></pre></td></tr></table></figure>

<h2 id="並不只用於-JavaScrip"><a href="#並不只用於-JavaScrip" class="headerlink" title="並不只用於 JavaScrip"></a>並不只用於 JavaScrip</h2><p>雖然 JSON 的全名是 JavaScript Object Notation，但不代表 JSON 只用於 JavaScript。<br>其他程式語言如 Java、Node.js、C# 也會使用。</p>
<h2 id="JSON-STRINGIFY"><a href="#JSON-STRINGIFY" class="headerlink" title="JSON.STRINGIFY()"></a>JSON.STRINGIFY()</h2><p><code>JSON.stringify()</code> 方法會帶入一個 JavaScrip 的物件，並將其轉成 JSON格式。當要將物件轉成json 傳到server 或資料庫時常用。</p>
<h2 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h2><p>JSON.parse() 則是將 JSON 格式轉成 JavaScrip 的物件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> json = <span class="string">&#x27;&#123;&quot;title&quot;: &quot;Avengers Endgame&quot;, &quot;Rating&quot;:4.7, &quot;inTheaters&quot;:false&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">title</span>)</span><br><span class="line"><span class="comment">// Avengers Endgame</span></span><br></pre></td></tr></table></figure>

<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XML(Extensible Markup Language)，和 JSON 一樣也是一個資料交換格式。<br>XML 的格式有點像 HTML，以下為 範例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">genre</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">genre</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Iron Man<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">director</span>&gt;</span>Jon Favreau<span class="tag">&lt;/<span class="name">director</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的 xml 格式若用 json 表達如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;genre&quot;</span>: <span class="string">&quot;Action&quot;</span>,</span><br><span class="line">  <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Iron Man&quot;</span>,</span><br><span class="line">  <span class="string">&quot;director&quot;</span>: <span class="string">&quot;Jon Favreau&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="用-xml-或-json"><a href="#用-xml-或-json" class="headerlink" title="用 xml 或 json ?"></a>用 xml 或 json ?</h2><p>xml 和 json 的功能都是資料交換的格式，但 json 更易懂，並在現代程式語言中有更好的支援。</p>
]]></content>
      <categories>
        <category>HTTP Networking</category>
      </categories>
      <tags>
        <tag>HTTP Networking系列</tag>
      </tags>
  </entry>
  <entry>
    <title>命令提示字元教學</title>
    <url>/2024/04/16/2024-04-16-command/</url>
    <content><![CDATA[<h2 id="command-line"><a href="#command-line" class="headerlink" title="command line"></a>command line</h2><p>command line 也被稱作 命令行 或 命令行介面 是一個純文字的應用程式，可以查看，處理電腦裡的檔案，若要打開 command line</p>
<ul>
<li><p>windows:按下開始，搜尋 cmd 。</p>
</li>
<li><p>Mac OS X: 搜尋 → Terminal.app。</p>
</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*mnpSUjAVb2sQQe2OhWt8TQ.png"></p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="cd-進入下一頁"><a href="#cd-進入下一頁" class="headerlink" title="cd  進入下一頁"></a>cd  進入下一頁</h3><p>例: cd Documents ，進入Documents資料夾的意思。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\shose&gt;cd Documents</span><br><span class="line"></span><br><span class="line">C:\Users\shose\Documents&gt;</span><br></pre></td></tr></table></figure>

<p>若要進入下下一頁，路徑用 &#x2F; 表達</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\shose&gt;cd Postman/files</span><br><span class="line"></span><br><span class="line">C:\Users\shose\Postman\files&gt;</span><br></pre></td></tr></table></figure>

<h3 id="cd-回到上一頁"><a href="#cd-回到上一頁" class="headerlink" title="cd ..  回到上一頁"></a>cd ..  回到上一頁</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\shose&gt;cd ..</span><br><span class="line"></span><br><span class="line">C:\Users&gt;</span><br></pre></td></tr></table></figure>

<h3 id="ls-展開列表"><a href="#ls-展開列表" class="headerlink" title="ls  展開列表"></a>ls  展開列表</h3><p>顯示該資料夾內的檔案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\shose\Documents&gt;ls</span><br><span class="line">&#x27;My Music&#x27;  &#x27;My Pictures&#x27;  &#x27;My Videos&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="mkdir-開新資料夾"><a href="#mkdir-開新資料夾" class="headerlink" title="mkdir 開新資料夾"></a>mkdir 開新資料夾</h3><p><img src="https://miro.medium.com/v2/resize:fit:720/format:webp/1*0Eyq6lI2cI9q9w1ILortnw.png"></p>
<h3 id="touch-開新檔案"><a href="#touch-開新檔案" class="headerlink" title="touch 開新檔案"></a>touch 開新檔案</h3><p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*nC6AA81NSm0nWYr-mBMIhQ.png"></p>
]]></content>
      <tags>
        <tag>命令提示字元</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP Networking(4) 錯誤處理</title>
    <url>/2024/04/14/2024-04-14-http-error-handling/</url>
    <content><![CDATA[<h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h2><p>當 js 中的程式有錯誤時，可以用 try catch 來處理錯誤。<br>以下程式，因為變數 car 沒有定義會出現錯誤。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> speed = car.<span class="property">speed</span></span><br><span class="line"><span class="comment">// The code crashes with the following error:</span></span><br><span class="line"><span class="comment">// &quot;ReferenceError: car is not defined&quot;</span></span><br></pre></td></tr></table></figure>

<p>此時可以用 try catch 來處理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> speed = car.<span class="property">speed</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`An error was thrown: <span class="subst">$&#123;err&#125;</span>`</span>)</span><br><span class="line">  <span class="comment">// the code cleanly logs:</span></span><br><span class="line">  <span class="comment">// &quot;An error was thrown: ReferenceError: car is not defined&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BUGS-VS-ERRORS"><a href="#BUGS-VS-ERRORS" class="headerlink" title="BUGS VS ERRORS"></a>BUGS VS ERRORS</h2><ul>
<li><p>Bugs: 指的是程式運行的結果和想的不同，此時需要 fix the bug</p>
<pre><code>  例如有一個加法函式 `add(5, 3)` 預期會得到 8 但卻出現 10 的，就是bug。
</code></pre>
</li>
<li><p>Error: 指的是程式在預期中可能出現的錯誤，例如:<br>   <code>No Internet connection</code>、<code>server down</code>、<code>user input</code><br>   此時要做得是 handle the error。</p>
</li>
</ul>
<h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><p>當程式運行的結果和想的不同時，需要 debugging，例如:</p>
<ul>
<li>新增一個缺少的參數到函式裡。</li>
<li>修正一個有錯誤的 url後，在執行 HTTP request</li>
<li>修復應用程序中未正確顯示的日期選擇元件</li>
</ul>
<h2 id="Error-handling"><a href="#Error-handling" class="headerlink" title="Error handling"></a>Error handling</h2><p>是指在程式中，處理那些預期中可能出現的錯誤，例如:</p>
<ul>
<li>使用 try&#x2F;catch 來檢測用戶輸入的問題</li>
<li>使用 try&#x2F;catch 在沒有網絡連接時，顯示錯誤。</li>
</ul>
<h2 id="Async-await-讓錯誤處理更容易"><a href="#Async-await-讓錯誤處理更容易" class="headerlink" title="Async await 讓錯誤處理更容易"></a>Async await 讓錯誤處理更容易</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">fetchUser</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`user fetched: <span class="subst">$&#123;user&#125;</span>`</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`an error was thrown: <span class="subst">$&#123;err&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>try catch 是js中處理錯誤的標準方法，但在 Promise API 中無法使用。若使用 Async await 則可以配合 try catch。</p>
]]></content>
      <categories>
        <category>HTTP Networking</category>
      </categories>
      <tags>
        <tag>HTTP Networking系列</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 核心篇 (2) JS 的作用域</title>
    <url>/2024/04/16/2024-04-16-js-core-area/</url>
    <content><![CDATA[<h2 id="靜態與動態作用域"><a href="#靜態與動態作用域" class="headerlink" title="靜態與動態作用域"></a>靜態與動態作用域</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*_-44uYqBfkpzwjuyWvjdqg.png"></p>
<ul>
<li>靜態作用域: 變數的作用域在語法解析就已經決定，不會改變。 JS屬於此類</li>
<li>動態作用域: 變數的作用域在函式調用時才決定。</li>
</ul>
<p>範例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line">  <span class="title function_">fn1</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>(); </span><br></pre></td></tr></table></figure>
<p>因為 js 是靜態作用域，所以 fn1()被執行時會去取得外層 1 的值，而不是fn2被調用後才改變的值。</p>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*WE0NuL_9ntARx1kiJQP9Sg.png"></p>
<p>JS 的作用域是一層一層向內的，最外層會有一個全域的作用域，內層則由function 所包著，每個 function 的作用域是獨立的。<br>當這個 function 要讀取某個變數，但函式內沒有時，會向外查找，若外層也沒有則會出現錯誤。</p>
]]></content>
      <categories>
        <category>JS 核心篇</category>
      </categories>
      <tags>
        <tag>JS 核心篇</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP Networking(7) http methods</title>
    <url>/2024/04/16/2024-04-16-http-methods/</url>
    <content><![CDATA[<h2 id="http-methods"><a href="#http-methods" class="headerlink" title="http methods"></a>http methods</h2><p>HTTP methods 是用來告訴伺服器，現在我們想對資料庫進行哪種操作，包含了 GET, POST, PUT, or DELETE 等方法。<br>這些方法會對應到 CRUD 四種不同的動作。</p>
<ul>
<li>Create: POST 方法</li>
<li>Read: GET 方法</li>
<li>Update: PUT 方法</li>
<li>Delete: DELETE 方法</li>
</ul>
<p>就像使用者操作社群平台貼文一樣，他們會 新增、修改、刪除、讀取貼文，而那正是 CRUD 對資料庫做的事。</p>
<h2 id="Status-code"><a href="#Status-code" class="headerlink" title="Status code"></a>Status code</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*lceTqptlcG5bO41b1KHZyg.png"></p>
<ul>
<li>Errors: 當client端向server發出 http request 出錯時，會出現 error。<br>    例如: url 錯誤、網路斷線。</li>
<li>Status code: 當http request成功送到伺服器，但伺服器端有錯誤時，會在 response 中用 status code 回應。<br>         例如: 沒有權限取得資料，伺服器掛掉。</li>
</ul>
<p>以下是常見的 Status code</p>
<ol>
<li>200: OK 一切正常</li>
<li>201: Created. 資源成功建立，通常用在 POST request</li>
<li>301: Moved permanently. 請求的資源已經移到別處，例如網址更改。</li>
<li>400: Bad request. 前端http request 發生錯誤</li>
<li>401: Unauthorized. 請求權限不足，例如少了 api key。</li>
<li>404: Not found. 請求的資源不存在</li>
<li>500: Internal server error. 伺服器錯誤。</li>
</ol>
<h2 id="GET-methods"><a href="#GET-methods" class="headerlink" title="GET methods"></a>GET methods</h2><p>http get 方法可從 server 取回特定資料的 copy，並不是真的將資料從 server 拿出，而僅是該資料當下狀態的 copy 而已。<br>通常認為 get 是安全的，因為並不會更改或刪除資料庫裡的資料。</p>
<p>以下為使用 fetch() api ，送出 get request</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;macOS&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>fetch() api，第二個參數可傳入物件，以下為物件可能的值。</p>
<ul>
<li>method: The HTTP method of the request, like GET.</li>
<li>headers: The headers to send.</li>
<li>mode: Used for security, we’ll talk about this in future courses.</li>
<li>body: The body of the request. Often encoded as JSON.</li>
</ul>
<h2 id="POST-methods"><a href="#POST-methods" class="headerlink" title="POST methods"></a>POST methods</h2><p>post 方法會傳資料給 sever，通常會在資料庫中新增一筆新的資料。<br>在 fetch() api中，會將資料放在body後傳送給後端。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="PUT-methods"><a href="#PUT-methods" class="headerlink" title="PUT methods"></a>PUT methods</h2><p>送出 PUT 方法後，有兩種情況</p>
<ol>
<li>若後端已經有此筆資料，就更新該筆資料</li>
<li>若後端沒有這筆資料，建立該筆資料</li>
</ol>
<p>POST 和 PUT 的差別是，POST只建立資料， PUT 則是更新或建立資料。<br>另一個差異是，PUT 對後端是沒有重複影響的，當我送第一次PUT給後端時，後端更新該筆資料，當我送同樣的PUT到後端時，沒有影響。<br>POST 則是你送幾次請求，就在後端建立幾個新的資料。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">   <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">   <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">   <span class="attr">headers</span>: &#123;</span><br><span class="line">   <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="PATCH-method"><a href="#PATCH-method" class="headerlink" title="PATCH method"></a>PATCH method</h2><p>Patch 和 put 不同的是， put 是更新整筆資料， Patch 則是更新部分資料。<br>Patch 沒有 PUT 那麼常用，很多後端 server 選擇使用 put 即使你只要更新部分資料。</p>
<h2 id="DELETE-method"><a href="#DELETE-method" class="headerlink" title="DELETE method"></a>DELETE method</h2><p>DELETE 方法用來刪除指定的資料</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://api.boot.dev/v1/courses_rest_api/learn-http/locations/52fdfc07-2182-454f-963f-5f0f9a621d72&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>HTTP Networking</category>
      </categories>
      <tags>
        <tag>HTTP Networking系列</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 核心篇 (1) JS 是如何運行的</title>
    <url>/2024/04/16/2024-04-16-js-core-running/</url>
    <content><![CDATA[<h2 id="JS-的運行方式"><a href="#JS-的運行方式" class="headerlink" title="JS 的運行方式"></a>JS 的運行方式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ming = <span class="string">&#x27;小名&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>我們撰寫的 JS 是無法直接被瀏覽器給閱讀的，要經過解譯才能運行這段程式碼。</p>
<p>程式語言可以分為 直譯式語言和編譯式語言，JS就屬於 直譯式語言。</p>
<h2 id="編譯式語言"><a href="#編譯式語言" class="headerlink" title="編譯式語言"></a>編譯式語言</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*SG3vsBwfXSaHb67XRvxU3w.png"></p>
<p>編譯式語言會將程式碼預先編譯，編譯完後將代碼生成出來，最後在丟給執行環境運行。好處是在編譯時就能先除錯，譯式語言的執行速度通常比直譯式語言更快。</p>
<h2 id="直譯式語言"><a href="#直譯式語言" class="headerlink" title="直譯式語言"></a>直譯式語言</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*yZOp1b7eufv7P0JwF2SlJg.png"></p>
<p>直譯式語言的程式碼是由直譯器逐行解釋和執行的。當你執行一段直譯式語言的程式碼時，直譯器會一行一行地讀取程式碼，並且將其轉換成相應的機器碼或是直接執行相應的動作。<br>優點是它們的執行速度較快，因為它們可以立即執行程式碼而不需要經過編譯的過程，但若程式碼有錯誤，也會直接反映在環境上。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*zQJFAG9_uch7FKBSuHgxyw.png"></p>
<ul>
<li>語法單元化: 將 js 的符號、詞彙一一解析出來。</li>
<li>抽象結構樹: 將原始碼結構定義出來。</li>
</ul>
<p>js 編譯過程可以參考以下網站。<br><a href="https://esprima.org/demo/parse.html#">編譯網站</a></p>
<h2 id="執行的錯誤情境-LHS-RHS"><a href="#執行的錯誤情境-LHS-RHS" class="headerlink" title="執行的錯誤情境 LHS, RHS"></a>執行的錯誤情境 LHS, RHS</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*9zBrr9y5W8-aeg6U3OFW6g.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LHS: 當值從右側賦予到左側時</span></span><br><span class="line"><span class="keyword">let</span> ming = <span class="string">&#x27;小名&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 當左邊不是變數無法被賦值時，會跳錯誤</span></span><br><span class="line"><span class="string">&#x27;MING&#x27;</span> = <span class="string">&#x27;小名&#x27;</span>; </span><br><span class="line"><span class="title class_">Uncaught</span> <span class="title class_">SyntaxError</span>: <span class="title class_">Invalid</span> left-hand side <span class="keyword">in</span> assignment</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 JavaScript 中，RHS 通常指代賦值操作符（=）右邊的表達式，這是一個很常見的概念。以下是一個示例：</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 在這個例子中，&quot;x = 5&quot; 是賦值操作，而 &quot;5&quot; 就是 RHS。因為它是指賦值操作符右邊的值，它是表達式的一部分。</span></span><br></pre></td></tr></table></figure>

<p>RHS 不會在編譯過程中出現錯誤，而是在執行階段才發現變數無法取得</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ming = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(min);</span><br><span class="line"><span class="title class_">Uncaught</span> <span class="title class_">ReferenceError</span>: min is not defined</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JS 核心篇</category>
      </categories>
      <tags>
        <tag>JS 核心篇</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 核心篇 (3) JS 的執行環境</title>
    <url>/2024/04/17/2024-04-17-js-core-excution-context/</url>
    <content><![CDATA[<h2 id="執行環境"><a href="#執行環境" class="headerlink" title="執行環境"></a>執行環境</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*__mmZCynRMxNwsHfGStYYg.png"></p>
<p>當我們宣告一個函式時，作用域就已經被確定，但此時還沒有變數產生。<br>當函式被執行，變數才產生，並產生一個<code>執行環境</code>，當函式反覆被執行，會產生多個<code>執行環境</code>。<br><code>執行環境</code>會有限作用域的功能，並且有自己的this。</p>
<h2 id="全域環境"><a href="#全域環境" class="headerlink" title="全域環境"></a>全域環境</h2><p>除了函式有執行環境，全域也有全域執行環境。全域環境是在網頁一開啟或後端nodeJS一開啟就建立了。全域執行環境產生後會:</p>
<ul>
<li>瀏覽器: 產生 window 變數，還有一個 this(等於 window)。</li>
<li>nodeJS: 產生 global 變數， 還有一個 this(等於 global)。</li>
</ul>
<h2 id="執行堆疊-call-stack"><a href="#執行堆疊-call-stack" class="headerlink" title="執行堆疊 (call stack)"></a>執行堆疊 (call stack)</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*MN5_XRqtujvxGd8odbvZ7g.png"></p>
<p>當多個函式被執行時，依照執行的順序，執行環境會往上堆疊。</p>
<p>全域環境 &#x3D;&gt;  dosomething 環境 &#x3D;&gt; sayHi 環境</p>
<p>當函式跑完後則依序離開</p>
<p>sayHi 環境離開 &#x3D;&gt; dosomething 環境離開 &#x3D;&gt; 回到全域執行環境</p>
<h3 id="blowing-the-stack"><a href="#blowing-the-stack" class="headerlink" title="blowing the stack"></a>blowing the stack</h3><p> 當我們寫了一個遞回函式時，也就是 function 不斷呼叫function 本身，瀏覽器會產生 maximum call 錯誤。</p>
<p> <img src="/../images/js/call-stack-1.png"></p>
<p> <img src="/../images/js/call-stack-2.png"></p>
]]></content>
      <categories>
        <category>JS 核心篇</category>
      </categories>
      <tags>
        <tag>JS 核心篇</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 關注點分離</title>
    <url>/2024/04/16/2024-04-16-js-%E9%97%9C%E6%B3%A8%E9%BB%9E%E5%88%86%E9%9B%A2/</url>
    <content><![CDATA[<h2 id="傳統-JS-操作方式"><a href="#傳統-JS-操作方式" class="headerlink" title="傳統 JS 操作方式"></a>傳統 JS 操作方式</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*eYwgdxQFXI4_FGxF49pdug.png"></p>
<p>上面是一個輸入框，輸入框輸入文字後提交，會將資料呈現在上方。<br>傳統 JS 的操作方式是以操作 DOM 為主，先將 DOM 裡的文字提出後，在新增一個新的 DOM ，將資料帶入後<br>呈現在上方。</p>
<p>缺點是開發者必須同時操作資料和畫面。</p>
<h2 id="關注點分離"><a href="#關注點分離" class="headerlink" title="關注點分離"></a>關注點分離</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*Y4itI_eALQEqC6WAvaGpyQ.png"></p>
<p>關注點分離則是現在許多 JS 框架採用的方法，開發者主要著重在資料的操作上，當資料更新後，畫面則由框架來幫忙渲染。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 核心篇 (5) JS 的提升</title>
    <url>/2024/04/17/2024-04-17-js-core-hosting/</url>
    <content><![CDATA[<h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>當我們在建立一個執行環境時，分為兩個階段，創造環境和執行。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*LXm5uSoMkdHf8lD-FYu6tQ.png"></p>
<p>當使用 var 宣告變數或用 function 建立函式時，會有<code>提升 hoisting</code>的現象。<br>也就是在創造環境就先將變數放入記憶體，但此時還沒給值，所以是 undfined。到執行時才會將值賦予到變數。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*BlVgvBz_VAVht4P-aLQMYw.png" alt="創造環境階段"></p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*XFhNGWc651xhzUR2eE7DQA.png" alt="執行階段"></p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*eSZE8EDxCleZSKCeqRw54w.png"></p>
<p>函數陳述式和var變數不同的是，在創造階段完整的函式就會被放入記憶體。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn1</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上，因為完整的函式fn1()在創造階段就放入記憶體了，所以可以在宣告前使用函式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn1</span>(); <span class="comment">// fn1() is not a function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn1) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若是函式表達式，因為只有變數名稱被存入記憶體，會出現 undefined，無法提前使用。</p>
<h2 id="函式優先"><a href="#函式優先" class="headerlink" title="函式優先"></a>函式優先</h2><p>若同時有函數陳述式和用var宣告的變數，在創造階段含是會優先被提昇。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創造環境</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ming);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ming;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行階段</span></span><br><span class="line"><span class="title function_">fn1</span>();</span><br><span class="line">ming = <span class="string">&#x27;小名&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>如上，執行 fn1() 會出現 undefined， 因為值在執行階段才給予。</p>
]]></content>
      <categories>
        <category>JS 核心篇</category>
      </categories>
      <tags>
        <tag>JS 核心篇</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 核心篇 (4) JS 的範圍鍊</title>
    <url>/2024/04/17/2024-04-17-js-core-range/</url>
    <content><![CDATA[<h2 id="範圍練"><a href="#範圍練" class="headerlink" title="範圍練"></a>範圍練</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line">  <span class="title function_">fn1</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>();</span><br></pre></td></tr></table></figure>

<p>上面範例中，console.log(value) 的值會是 1 , 因為js屬於靜態作用域，在程式碼撰寫完就確定作用域，和執行環境無關。<br>而範圍鍊的意思是，當函式本身沒有這個變數時，會向外尋找，所以 <code>fn1()</code> 向外就會找到全域的 <code>value = 1</code>；</p>
]]></content>
      <categories>
        <category>JS 核心篇</category>
      </categories>
      <tags>
        <tag>JS 核心篇</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP Networking(8) Url paths</title>
    <url>/2024/04/18/2024-04-18-http-url/</url>
    <content><![CDATA[<h2 id="Url-paths"><a href="#Url-paths" class="headerlink" title="Url paths"></a>Url paths</h2><p><code>http://testdomain.com/root/next</code></p>
<p>上面這段網址中，在 domain 後的 ‘&#x2F;root&#x2F;next’ 就是 path。</p>
<p>在早期的網路開發中，URL’s path 通常會對應伺服器的資料夾路徑。例如，如果有一個網站 <a href="https://exampleblog.com,是運行在伺服器端的/">https://exampleblog.com，是運行在伺服器端的</a> &#x2F;home 資料夾路徑。那當我們對 <a href="https://exampleblog.com/site/index.html">https://exampleblog.com/site/index.html</a> 訪問時，index.html 應該是在伺服器的 &#x2F;home&#x2F;site資料夾裡。</p>
<p>但在許多現在的 web 伺服器裡，URL’s path 不會對應伺服器的資料夾路徑，他可能只代表一些參數要被傳給伺服器而已。</p>
<h2 id="RESTful-APIs"><a href="#RESTful-APIs" class="headerlink" title="RESTful APIs"></a>RESTful APIs</h2><p>REST(Representational State Transfer)，是一個標準或慣例用來打造更好的 API。RESTful API的目的就是確立一個規則，讓前端開發者能共同遵循，有更好的開發體驗。這些規則如下:</p>
<h2 id="SEPARATE-AND-AGNOSTIC"><a href="#SEPARATE-AND-AGNOSTIC" class="headerlink" title="SEPARATE AND AGNOSTIC"></a>SEPARATE AND AGNOSTIC</h2><p>RESTful API 其中一個重點是讓 前後端(client and server) 能互相分離，互不依賴。前端程式可以用任何語言撰寫，後端程式也可以用任何語言撰寫。前後端只需要在一些小地方相同即可，例如 資源的命名、資料傳遞的格式等等。</p>
<h2 id="Stateless"><a href="#Stateless" class="headerlink" title="Stateless"></a>Stateless</h2><p>在 RESTful API 中，”STATELESS” 意味著每個客戶端請求都應該包含足夠的信息，以便伺服器可以理解並處理該請求，而無需依賴之前的任何請求。換句話說，伺服器不會在請求之間保留任何狀態信息。每個請求都應該包含所有必要的信息，以便伺服器可以完全理解並處理請求。</p>
<p>例: 假設有個遊戲的伺服器，裡面有100註冊玩家的資料。現在有一個玩家刪除帳號，剩下99個玩家，這在server端是有持續保留與更新資料狀態的。但前後端不該保留任何之前曾經往來的紀錄。</p>
<p>例如，前端向後端要前 10 筆玩家的資料，後端給你了。之後前端又向後端要前 10 筆玩家的資料，後端不該記得前端曾要過10筆資料，而給 11 - 20筆的資料，而是前端指定要 11-20筆的資料。</p>
<h2 id="PATHS"><a href="#PATHS" class="headerlink" title="PATHS"></a>PATHS</h2><p>在 RESTful API 的 path 的最後一段，會代表想取得的資源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://api.boot.dev/v1/courses_rest_api/learn-http/locations</span><br><span class="line">https://api.boot.dev/v1/courses_rest_api/learn-http/users</span><br><span class="line">https://api.boot.dev/v1/courses_rest_api/learn-http/items</span><br></pre></td></tr></table></figure>

<p>上面三組 RESTful API 的最後一段就代表 locations、users、items等資源。</p>
]]></content>
      <categories>
        <category>HTTP Networking</category>
      </categories>
      <tags>
        <tag>HTTP Networking系列</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 核心篇 (7) 陳述式與表達式</title>
    <url>/2024/04/18/2024-04-18-js-core-expression/</url>
    <content><![CDATA[<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*QF0Pqw1z3lIZBTlKOwrd6A.png"></p>
<h2 id="陳述式"><a href="#陳述式" class="headerlink" title="陳述式:"></a>陳述式:</h2><p>舉凡流程判斷用，但不回傳結果的，稱為陳述式。</p>
<p>陳述式有幾大分類，如：</p>
<ul>
<li>宣告（var、function）</li>
<li>流程控制（block、if…else）</li>
<li>迴圈（for、for…in）</li>
<li>其它（import, export）</li>
</ul>
<p>函式陳述式又稱具名函式，因為不會回傳結果，為陳述式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="表達式"><a href="#表達式" class="headerlink" title="表達式"></a>表達式</h2><p>表達式的重點是會回傳一個結果，因此是否能夠回傳結果就能判斷該語句或詞是否為表達式。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*KGg1cezTRo22qhp0kkf4rA.png"></p>
<p>例子：</p>
<ul>
<li>數字運算：5 + 3</li>
<li>字串拼接：”Hello, “ + “world!”</li>
<li>變數：var y &#x3D; x * 2;</li>
<li>函式呼叫：Math.max(10, 20)</li>
<li>陣列索引：arr[0]</li>
</ul>
<p>函式表達式又稱匿名函式，因為會回傳結果，為表達式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> callName = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;call name&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS 核心篇</category>
      </categories>
      <tags>
        <tag>JS 核心篇</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 核心篇 (6) JS 記憶體存放</title>
    <url>/2024/04/18/2024-04-18-js-core-memory/</url>
    <content><![CDATA[<h2 id="記憶體存放"><a href="#記憶體存放" class="headerlink" title="記憶體存放"></a>記憶體存放</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*MN5_XRqtujvxGd8odbvZ7g.png"></p>
<p>之前章節說過每個函式在執行時，會產生執行環境，在執行環境中會創造屬於他的記憶體空間。當函式執行完後，也會將記憶體空間釋放。<br>但記憶體的釋放也有條件:</p>
<ul>
<li>當這個物件不被任何物件參考時，會被時為可回收的記憶體垃圾。</li>
</ul>
<p>範例: </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> demoData = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    demoData.<span class="title function_">push</span>(<span class="title function_">randomText</span>(<span class="number">5000</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>();</span><br></pre></td></tr></table></figure>

<p>上面韓式執行完後， demoData 因不被參考，而釋出記憶體空間。</p>
]]></content>
      <categories>
        <category>JS 核心篇</category>
      </categories>
      <tags>
        <tag>JS 核心篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(11) Git 練功坊- git stash</title>
    <url>/2024/04/19/2024-04-19-git-stash/</url>
    <content><![CDATA[<h2 id="git-stash-—-暫存檔案"><a href="#git-stash-—-暫存檔案" class="headerlink" title="git stash — 暫存檔案"></a>git stash — 暫存檔案</h2><p>當你今天工作到一半，老闆叫你去處理別的專案時，可以使用 git stash 將你目前的工作進度暫存起來。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*dR1EwTyjcpWa3zSCkIHhHA.png"></p>
<h2 id="查詢-stash-紀錄"><a href="#查詢-stash-紀錄" class="headerlink" title="查詢 stash 紀錄"></a>查詢 stash 紀錄</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*aGcqx6gQnKstjPROvG1Hog.png"></p>
<h2 id="還原暫存檔案"><a href="#還原暫存檔案" class="headerlink" title="還原暫存檔案"></a>還原暫存檔案</h2><p>將暫存的紀錄叫回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*2ho6a1nQiEziUW_OSRS8kw.png"></p>
<h2 id="指令表"><a href="#指令表" class="headerlink" title="指令表"></a>指令表</h2><p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*Kz-_yjwjMTzUcLEcC7y5YA.png"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>(10) Git 練功坊- git tag 標籤</title>
    <url>/2024/04/19/2024-04-19-git-tag/</url>
    <content><![CDATA[<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*bWYXIAgR59YkCNY3rbhTQA.png"></p>
<h2 id="新增-git-tag"><a href="#新增-git-tag" class="headerlink" title="新增 git tag"></a>新增 git tag</h2><p>當今天我們有commit記錄，你想在上面加上tag ，方便以後搜尋時，可以在commit完後，輸入 git tag {tag名稱}，如下圖:</p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*kJMrnOPJfojcBEoVqa9Skw.png"></p>
<p>此時你再用 git tag 去查詢，就會出現v1這個 tag</p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*sBDYPUOx9wb0mugzXAq8yw.png"></p>
<h2 id="切換到特定標籤"><a href="#切換到特定標籤" class="headerlink" title="切換到特定標籤"></a>切換到特定標籤</h2><p>當你想回到特定標籤的commit版本時，輸入: git checkout 標籤名稱，head 會移動到該 commit。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*1A9-daS9R8Lu1naBRRaxSA.png"></p>
<h2 id="新增-標籤備註"><a href="#新增-標籤備註" class="headerlink" title="新增 標籤備註"></a>新增 標籤備註</h2><p>當你想為標籤增加一些備註時，輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -am &lt;備註內容&gt; &lt;tag名稱&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*MXBggrXswzCnWVJJnGeVRA.png"></p>
<p>要查詢詳細標籤時，輸入 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -n</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP Networking(9) HTTP security</title>
    <url>/2024/04/19/2024-04-19-http-security/</url>
    <content><![CDATA[<h2 id="什麼是-https"><a href="#什麼是-https" class="headerlink" title="什麼是 https"></a>什麼是 https</h2><p>HTTPS(Hypertext Transfer Protocol Secure)，是 http 協議的延伸。它確保 在 client 和 server 端之間傳送的資料都是加密的。這樣就可以安全的傳送像 信用卡資料、密碼、銀行帳號的資料。</p>
<p><img src="https://www.shubo.io/9cc769693e50c090178068e8efd3338e/http-vs-https.svg"></p>
<h2 id="HTTP-過程解說"><a href="#HTTP-過程解說" class="headerlink" title="HTTP 過程解說"></a>HTTP 過程解說</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*guPOaNV8Ma-zueBpQu1b8g.png"></p>
<p>當 client 向 server 發出 http 請求時，中間會有許多人可以看到你的資料，如下</p>
<ul>
<li>Public wifi: 使用的公用 wifi</li>
<li>ISP: Internet Service Provider 網際網路連線服務公司 ，如 HiNet</li>
<li>cloud provider: 雲端伺服器的供應商，如 AWS</li>
</ul>
<p>所以在 client 發出請求前要先加密，而伺服器收到請求後在解密。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*DBHHn56dkgepJwvqz79v0A.png"></p>
<p>在 server 端會有兩把鑰匙</p>
<ul>
<li>public key: 用來加密資料，但無法解密。</li>
<li>private key:  用來解密</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*vdOe-IQxF0kHwFEFR0ccKw.png"></p>
<p>前後端之間通常會用 symmetric encription key 來加密和解密資料。這意味著發送方和接收方都需要知道並使用相同的金鑰來加密和解密數據。</p>
<p>詳細流程如下:</p>
<ol>
<li>server 產生 public 和 private key(伺服器端只需產生一次，在https協議建立時)</li>
<li>client 向 server 接觸，說明想發出 secure request 給你。</li>
<li>server 將 public key 傳給 client</li>
<li>client 產生一組 secret token，並將 secret token 用 public key 加密後，回傳 server</li>
<li>server 用 private key 解密</li>
<li>client 和 server 協議出 symmetric encription key</li>
<li>client 成功發出 https 請求。</li>
<li>server 成功解密請求，並回傳 加密的 response。</li>
<li>client 解密回傳的 response</li>
</ol>
]]></content>
      <categories>
        <category>HTTP Networking</category>
      </categories>
      <tags>
        <tag>HTTP Networking系列</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 核心篇 (8) 優先性與相依性</title>
    <url>/2024/04/19/2024-04-19-js-core-order/</url>
    <content><![CDATA[<h2 id="優先性與相依性"><a href="#優先性與相依性" class="headerlink" title="優先性與相依性"></a>優先性與相依性</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*Roo2ukmpSROdWPKbZuT34g.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> * <span class="number">2</span> + <span class="number">3</span> * <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>優先性: 上面程式中，因為 * 號的優先性比 + 號大，所以會先將 乘法運算完後，兩者在相加。</p>
</li>
<li><p>相依性: 運算子的執行方向， * 號跟 + 號的執行方向是由左至右，等號則是由右至左，將右邊的值賦予到左邊。</p>
</li>
</ul>
<p>詳細可參考<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_precedence">此網站</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt; <span class="number">2</span> &gt; <span class="number">1</span>); <span class="comment">// false;</span></span><br></pre></td></tr></table></figure>
<p>上面程式會先執行 3 &gt; 2 結果為 true;<br>再執行 true &gt; 1， true 因為型別轉換結果為 1， 1 沒有大於 1 ，所以結果為 false。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">a = b = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); <span class="comment">// 3, 3</span></span><br></pre></td></tr></table></figure>

<p>上面程式中，因為等號是由右至左執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a 取到的值是 3 賦予到 b 所回傳的結果，並不是直接取 b 的值。</span><br><span class="line">也就是說因為 b = 3 是一個表達式，執行完後會得到 3；</span><br><span class="line">a 再取到 3 這個值。</span><br></pre></td></tr></table></figure>

<p>當有賦值行為時，因為 &#x3D; 是表達式，會回傳賦予的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = &#x27;QQ&#x27;</span><br><span class="line">那麼回傳的就是 QQ。</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>JS 核心篇</category>
      </categories>
      <tags>
        <tag>JS 核心篇</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 基礎篇 (3) 運算式與運算子</title>
    <url>/2024/04/20/2024-04-20-js-new-operator/</url>
    <content><![CDATA[<p>JavaScript 的語法基本上可以分為兩大類，「敘述句 (Statement)」 與 「運算式 (Expression)」。</p>
<ul>
<li><p>敘述句 (Statement)：<br>簡單來說，敘述句就是執行某個動作。 像是變數的宣告、賦值，迴圈和 if 判斷式等等都可以被歸類於此。</p>
</li>
<li><p>運算式 (Expression)：<br>而運算式最大的特性，就是它會產生一個「值」。<br>像是我們在呼叫 function 時的參數 (arguments)，或者透過 &#x3D; 賦值時，在 &#x3D; 「右側」的部分都屬於運算式的部分。</p>
</li>
</ul>
<h2 id="算術運算子"><a href="#算術運算子" class="headerlink" title="算術運算子"></a>算術運算子</h2><p>JavaScript 各種運算子當中，最常見的就屬「算術運算子」了。簡單來說，算術運算子包括了大家所熟知的數學四則運算「加、減、乘、除」等。</p>
<h3 id="加號"><a href="#加號" class="headerlink" title="加號 (+)"></a>加號 (+)</h3><p>加號 + 的使用非常簡單，如果你想要表示 1 + 2 這個算式的話，可以這樣寫：</p>
<p><img src="https://miro.medium.com/v2/resize:fit:580/format:webp/1*yv2Fb7hdT8YopTeai5YueA.png"></p>
<p>到目前為止還只是單純數字的狀況。 那麼，假設加號 + 兩側的其中一方，不是數字而是「字串」呢？</p>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*PX68pOqL44vQdON240yuHQ.png"></p>
<p>當加號 + 兩側的其中一方是字串的情況下，加號 + 會將兩者都視為「字串」連接在一起。也就是說，其中一方是字串，另一端會被「自動轉型」為字串後，連接在一起。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*SrySdeJUtmSIy5nTuM9Yxw.png"></p>
<h3 id="減號"><a href="#減號" class="headerlink" title="減號 (-)"></a>減號 (-)</h3><p>再來是減號 -。 如同前面的加法一樣，如果只是單純的數字算式：</p>
<p><img src="https://miro.medium.com/v2/resize:fit:606/format:webp/1*-IH0mAnn_q74Ge2drneqMw.png"></p>
<p>基本型別 (如 string 、 boolean 、 undefined 與 null)在做減法運算時，若其中一方屬於基本型別且不是數字的情況，那麼 JavaScript 會在先在背後透過 Number() 嘗試將數值轉為「數字」，再進行運算。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*_cF6n5xRjjuo_Y1wwlW1DA.png"></p>
<h3 id="乘號"><a href="#乘號" class="headerlink" title="乘號 (*)"></a>乘號 (*)</h3><p>相較前面的加法、減法的規則，乘法運算子就單純許多。乘法運算子由一個「星號」 * 來代表，用來計算前後兩個數值的乘積。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*ZTtVdAcmmn3adiU_X58UQA.png"></p>
<p>如果有其中一個不是數字的話，那麼 JavaScript 就會先在背後以 Nubmer() 作轉換後再進行計算，如：</p>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*5n-6VcbFWf0lBlroT8O8jw.png"></p>
<h3 id="除號-x2F"><a href="#除號-x2F" class="headerlink" title="除號 (&#x2F;)"></a>除號 (&#x2F;)</h3><p>除法與乘法的規則類似。 除號在 JavaScript 用一個「斜線」&#x2F; 來表示。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:616/format:webp/1*qPiJH4-U4b-vDt0EwU5VRw.png"></p>
<p>如果有其中一個不是數字的話，那麼 JavaScript 就會先在背後以 Nubmer() 作轉換後再進行計算。</p>
<h3 id="取餘數"><a href="#取餘數" class="headerlink" title="取餘數 (%)"></a>取餘數 (%)</h3><p>除了基本的四則運算之外，JavaScript 也有取餘數的運算子，以「百分比符號」 % 來表示。使用方式與除號類似，但得到的值是除法運算後的「餘數」：</p>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*oTTmoNXHKKamjTNyrBuAZg.png"></p>
<p>與除法一樣的是，如果有其中一個不是數字的話，那麼 JavaScript 就會先在背後以 Nubmer() 作轉換後再進行計算。</p>
<h2 id="遞增-遞減-–"><a href="#遞增-遞減-–" class="headerlink" title="遞增 ++ 遞減 –"></a>遞增 ++ 遞減 –</h2><p>當變數遇到了++ 就會+1 如 a++</p>
<p>a &#x3D; a+1</p>
<p>當變數遇到了 – 就會 -1 如 a–</p>
<p>a &#x3D; a-1</p>
<h2 id="相等＝＝-與全等-＝＝＝"><a href="#相等＝＝-與全等-＝＝＝" class="headerlink" title="相等＝＝ 與全等 ＝＝＝"></a>相等＝＝ 與全等 ＝＝＝</h2><p>在２個等號＝＝的情形下，數值會自動轉型，如下：</p>
<p>＂１０＂ ＝＝ １０ &#x2F;&#x2F; true</p>
<p>字串的１０被自動轉型成數字，所以兩邊相等。</p>
<p>三個等號不會自動轉型，所以</p>
<p>＂１０＂ ＝＝＝ １０ &#x2F;&#x2F; false</p>
<p>只會在雙方的數值與型態都相同的情況下回傳 true。</p>
<p>所以盡量用 ＝＝＝ 取代 ＝＝</p>
<h2 id="不等於！＝-與-！＝＝"><a href="#不等於！＝-與-！＝＝" class="headerlink" title="不等於！＝ 與 ！＝＝"></a>不等於！＝ 與 ！＝＝</h2><p>！＝ 會自動轉型</p>
<p>！＝＝不會自動轉型</p>
<h2 id="指派運算子"><a href="#指派運算子" class="headerlink" title="指派運算子"></a>指派運算子</h2><p>在 JavaScript 中，指派運算子用於將值賦給變數。除了簡單的賦值 &#x3D; 之外，還有一些複合指派運算子，如 +&#x3D;、-&#x3D;、*&#x3D; 等等。這些運算子允許您對變數的值進行運算並將結果賦給同一個變數。</p>
<p>以下是 JavaScript 中常見的指派運算子：</p>
<ol>
<li>賦值運算子 (&#x3D;)：將右側的值賦給左側的變數。<br><code>var x = 10;</code></li>
<li>複合指派運算子：將運算結果賦給左側的變數。</li>
</ol>
<ul>
<li>+&#x3D;：加法指派<br><code>x += 5; // 相當於 x = x + 5;</code></li>
<li>-&#x3D;：減法指派<br><code>x -= 5; // 相當於 x = x - 5;</code></li>
<li>*&#x3D;：乘法指派<br><code>x *= 2; // 相當於 x = x * 2;</code></li>
<li>&#x2F;&#x3D;：除法指派<br><code>x /= 2; // 相當於 x = x / 2;</code></li>
<li>%&#x3D;：取餘指派<br><code>x %= 3; // 相當於 x = x % 3;</code></li>
</ul>
<h2 id="逗號運算子"><a href="#逗號運算子" class="headerlink" title="逗號運算子"></a>逗號運算子</h2><p>在 JavaScript 中，逗號運算子（,）用於將多個表達式連接在一起，並按照從左到右的順序依次求值。</p>
<p>以下是逗號運算子的用法和示例：</p>
<ol>
<li>在變數聲明中使用：在聲明變數的同時，可以使用逗號運算子定義多個變數。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></li>
<li>在函數調用中使用：可以在函數調用時使用逗號運算子傳遞多個參數。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">myFunction</span>(param1, param2, param3);</span><br></pre></td></tr></table></figure></li>
<li>在表達式中使用：可以在表達式中使用逗號運算子串聯多個表達式，並返回最後一個表達式的結果。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = (<span class="number">1</span> + <span class="number">2</span>, <span class="number">3</span> + <span class="number">4</span>); <span class="comment">// x 等於 7，先計算 (1 + 2)，然後計算 3 + 4，返回 7</span></span><br></pre></td></tr></table></figure></li>
<li>在迴圈中使用：可以在迴圈中使用逗號運算子來執行多個操作。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">10</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="邏輯運算子-Logical-Operator"><a href="#邏輯運算子-Logical-Operator" class="headerlink" title="邏輯運算子 (Logical Operator)"></a>邏輯運算子 (Logical Operator)</h2><ul>
<li><p>「&amp;&amp;」：<br>當 &amp;&amp; 左右兩側的值同時為 true 時，則會得到 true 的結果。 若其中一方是 false 的情況下，則得到 false 。</p>
</li>
<li><p>「||」：<br>當 || 左右兩側的值只要有一方為 true，則結果為 true。 只有在兩側皆為 false 的情況下才會得到 false 。</p>
</li>
<li><p>「!」：以一個 ! 驚嘆號來表示，原本是 true 的結果經過 ! 轉換後會得到 false，而 false 會變成 true。 所以你可能會看到很多人用 !!xxx 來取代 Boolean(xxx)，透過兩次的「NOT」操作，即可判斷某數值 Boolean 轉換後的結果。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>; <span class="comment">// result 為 false</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="literal">true</span> || <span class="literal">false</span>; <span class="comment">// result 為 true</span></span><br><span class="line"><span class="keyword">var</span> result = !<span class="literal">true</span>; <span class="comment">// result 為 false</span></span><br></pre></td></tr></table></figure>

<p>&amp;&amp; 和 || 所回傳的值不一定是布林值，而是兩者其中之一。<br>&amp;&amp; 和 || 再做判斷時，會先對左邊的值檢查:</p>
<ol>
<li>如果是 Boolean 類型就再作後續判斷，若不是就會透過 ToBoolean 判斷是 falsy 或 truthy 來轉換成對應的 true 或 false。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">expr1 &amp;&amp; expr2 : 如果expr1 為假值，就回傳 expr1，否則回傳 expr2</span><br><span class="line"></span><br><span class="line">expr1 || expr2 : 如果expr1 為真值，就回傳 expr1，否則回傳 expr2</span><br></pre></td></tr></table></figure>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*i1OT9EqwLLC1prlADlh71A.png"></p>
<h2 id="Truthy-與-Falsy"><a href="#Truthy-與-Falsy" class="headerlink" title="Truthy 與 Falsy"></a>Truthy 與 Falsy</h2><p>邏輯判斷中，為 false 的並非真的為 false 這個值；而被判定為 true 的也並非為這個值，因此我們給他 Falsy(假值) 與 Truthy(真值)</p>
<p>Falsy 有 null、undefined、0、NaN、””(空值) 以及 false。</p>
<p>這裡只要記住 Falsy 有哪些就好了，其他都為 Truthy。</p>
]]></content>
      <categories>
        <category>JS 基礎篇</category>
      </categories>
      <tags>
        <tag>JS 基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 基礎篇 (2) 物件、陣列及型別的判斷</title>
    <url>/2024/04/20/2024-04-20-js-new-object/</url>
    <content><![CDATA[<h2 id="物件-Object"><a href="#物件-Object" class="headerlink" title="物件 Object"></a>物件 Object</h2><p>一個物件可以是多種屬性的集合，用來記錄一組彼此有關係的資料，比如person會有姓名、工作、年齡等資料。<br>物件可以由 new 關鍵字建立，在新增屬性及方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Lin&#x27;</span>;</span><br><span class="line">person.<span class="property">job</span> = <span class="string">&#x27;teacher&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>或由 { } 直接建立並指定屬性，此種方法稱為【物件實字】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Lin&#x27;</span>,</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&#x27;teacher&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="物件屬性存取"><a href="#物件屬性存取" class="headerlink" title="物件屬性存取"></a>物件屬性存取</h3><p>使用 . 來存取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Lin&#x27;</span>,</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&#x27;teacher&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="property">name</span> <span class="comment">// &#x27;Lin&#x27;</span></span><br></pre></td></tr></table></figure>

<p>或使用 [ ] 來存取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Lin&#x27;</span>,</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&#x27;teacher&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;$-小名家&#x27;</span>: <span class="string">&#x27;$-小名家 string&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">person[<span class="string">&#x27;name&#x27;</span>] <span class="comment">// &#x27;Lin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以帶入變數取值</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line">person[a] <span class="comment">// &#x27;Lin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以帶入數字取值</span></span><br><span class="line">person[<span class="number">1</span>] <span class="comment">// &#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以帶入字串取值</span></span><br><span class="line">person[<span class="string">&#x27;$-小名家&#x27;</span>] <span class="comment">// &#x27;$-小名家 string&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="屬性新增"><a href="#屬性新增" class="headerlink" title="屬性新增"></a>屬性新增</h3><p>若想為物件新增屬性的話，直接用 &#x3D; 指定就可以了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Lin&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="property">job</span> = <span class="string">&#x27;teacher&#x27;</span>;</span><br><span class="line">person[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<h3 id="屬性刪除"><a href="#屬性刪除" class="headerlink" title="屬性刪除"></a>屬性刪除</h3><p>若要刪除屬性，則透過 delete 關鍵字刪除。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Lin&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">delete</span> person[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">person.<span class="property">name</span> <span class="comment">// undefined</span></span><br><span class="line">person[<span class="string">&#x27;age&#x27;</span>] <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>另外要提到一點， js裡變數無法被刪除，屬性才可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> a; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">delete</span> b; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// b is not defined</span></span><br></pre></td></tr></table></figure>

<p>上面 a 是經過 var 宣告的變數，不可被刪除。b 沒有經過變數宣告，會直接成為全域物件 window 內的屬性，可以被刪除。</p>
<h3 id="判斷屬性是否存在"><a href="#判斷屬性是否存在" class="headerlink" title="判斷屬性是否存在"></a>判斷屬性是否存在</h3><p>當要判斷物件中存不存在某個屬性時，可檢查該屬性是否為 undefined。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>或者用 hasOwnProperty() 或 in 來檢查</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;nike&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 in 檢查</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> obj) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;value&#x27;</span> <span class="keyword">in</span> obj) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hasOwnProperty()</span></span><br><span class="line">obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;value&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="未定義的物件屬性預設值"><a href="#未定義的物件屬性預設值" class="headerlink" title="未定義的物件屬性預設值"></a>未定義的物件屬性預設值</h3><p>當查找一個物件中不存在的屬性時，會回傳 undefined，並且物件中無法在不存在的屬性上新增值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;nike&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">ming</span> <span class="comment">// undefined</span></span><br><span class="line">obj.<span class="property">ming</span>.<span class="property">name</span> = <span class="string">&#x27;小名&#x27;</span> <span class="comment">// cannot set property of undefiend</span></span><br></pre></td></tr></table></figure>

<p>解決方法是新增一個 空物件再去設值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;nike&#x27;</span>,</span><br><span class="line">  <span class="attr">ming</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">ming</span>.<span class="property">name</span> = <span class="string">&#x27;小名&#x27;</span></span><br></pre></td></tr></table></figure>

<p>另一種是無法一開始就確定結構時，直接指定屬性為物件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;nike&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">ming</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小名&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h2><p>JS的陣列可以看做是一種特別的物件，同一個陣列內可以是原始資料類型、另一個陣列、物件或是函式。與物件不同，陣列是有順序性的集合，所以只能透過[ ]加上索引來存取。</p>
<p>陣列可透過 new 關鍵字建立</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&#x27;apple&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>或是陣列實字的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="string">&#x27;banana&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br></pre></td></tr></table></figure>

<h3 id="陣列長度"><a href="#陣列長度" class="headerlink" title="陣列長度"></a>陣列長度</h3><p>陣列的長度可以用 .length 取得</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">ary.<span class="property">length</span> <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>也可以由 .length 來更改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">ary.<span class="property">length</span> <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">ary.<span class="property">length</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ary) <span class="comment">// [&#x27;a&#x27;];</span></span><br><span class="line"></span><br><span class="line">ary.<span class="property">length</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ary) <span class="comment">// [&#x27;a&#x27;, undefined, undefined]</span></span><br></pre></td></tr></table></figure>

<h3 id="取得陣列項目"><a href="#取得陣列項目" class="headerlink" title="取得陣列項目"></a>取得陣列項目</h3><p>陣列的索引由 0 開始計算，也就是說要取得陣列的第一個元素，要用 array [0]來取得，如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">ary[<span class="number">0</span>] <span class="comment">// &#x27;a&#x27;;</span></span><br></pre></td></tr></table></figure>

<h3 id="判斷是否為陣列"><a href="#判斷是否為陣列" class="headerlink" title="判斷是否為陣列"></a>判斷是否為陣列</h3><p>當用 typeof 來判斷一個陣列時，會得到 Object。但若真想判斷某變數是陣列而非物件時，用 isArray():</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>([]) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="keyword">new</span> <span class="title class_">Array</span>()) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(&#123;&#125;) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="陣列方法"><a href="#陣列方法" class="headerlink" title="陣列方法"></a>陣列方法</h3><ul>
<li>項目新增: 想要在陣列末端新增元素時，可以用 push()方法</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*JS3hzXSy8Pv_NWP6B2A3ew.png"></p>
<ul>
<li>移除陣列末端項目 pop()</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:720/format:webp/1*6oaf0gfytvS1ulr8Orh3Gw.png"></p>
<ul>
<li>移除陣列前端項目 shift()</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:750/format:webp/1*_6WT-fF4krbwpznDpppeyQ.png"></p>
<ul>
<li>加入項目至陣列前端 unshift()</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*Z1MJlry1VWCyA6bKw5J6kg.png"></p>
<ul>
<li>在陣列中尋找項目的索引值 indexOf</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*14aphYWL3L9gmu7I_8bmCQ.png"></p>
<ul>
<li>移除指定位置項目 splice()</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*ifeD-029_JeQcCpCLJE7Dw.png"></p>
]]></content>
      <categories>
        <category>JS 基礎篇</category>
      </categories>
      <tags>
        <tag>JS 基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 基礎篇 (1) 變數與資料型別</title>
    <url>/2024/04/20/2024-04-20-js-new-variablesType/</url>
    <content><![CDATA[<h2 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h2><p>變數是用來儲存資料和運算的基本單位，可以將變數想像成存放資料的盒子。使用時，記得要先宣告、在使用。</p>
<h3 id="變數命名規則"><a href="#變數命名規則" class="headerlink" title="變數命名規則:"></a>變數命名規則:</h3><ol>
<li>開頭不能是數字</li>
<li>第一個字母必須為英文、底線_、或是錢字號$</li>
<li>英文大小寫有區分</li>
<li>變數建議語意化，如跟價格有關 可用 price 作為名稱</li>
<li>不能使用 if for in var 等JS原本內建的 <a href="https://pydoing.blogspot.com/2010/12/javascript-reserved.html">關鍵字</a></li>
</ol>
<p>JS 為弱型別語言，變數在宣告時，無須指定型別，型別的資訊只存在【值】或【物件】本身。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;Hello&#x27;</span>; <span class="comment">// 型別為字串，由 &#x27;Hello&#x27; 這個值決定。</span></span><br></pre></td></tr></table></figure>

<h3 id="變數宣告"><a href="#變數宣告" class="headerlink" title="變數宣告"></a>變數宣告</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// ES6 變數</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>; <span class="comment">// ES6  常數</span></span><br></pre></td></tr></table></figure>

<p>ES6以前變數可以用 var 來宣告 ，ES6以後則多了 let 、const 來宣告。</p>
<h2 id="變數的資料型別"><a href="#變數的資料型別" class="headerlink" title="變數的資料型別"></a>變數的資料型別</h2><ul>
<li>基本型別(Primitives): <code>string 、number、boolean、null、undefined、Symbol。</code></li>
<li>物件型別(Object): 除了基本型別以外，都是物件型別。</li>
</ul>
<h3 id="String-字串"><a href="#String-字串" class="headerlink" title="String 字串"></a>String 字串</h3><p>字串會用一組 ‘’ 或 “” 包住， 兩者不可混用，意即用單引號開頭就要單引號收合。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;這是一個字串&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> hello = <span class="string">&#x27;Hello, &#x27;</span> + <span class="string">&#x27;world&#x27;</span>; <span class="comment">// 字串相加</span></span><br><span class="line"><span class="keyword">var</span> hello = <span class="string">&#x27;第一行\</span></span><br><span class="line"><span class="string">第二行\</span></span><br><span class="line"><span class="string">第三行&#x27;</span>; <span class="comment">// 換行要用 \ 符號，\後方不得有空白。</span></span><br></pre></td></tr></table></figure>

<p>es6 新增樣板字面值字串，由一組反引號 &#96;&#96; $ {} 組成，可帶入變數。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;小名&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`這是 <span class="subst">$&#123;name&#125;</span> 的家`</span>; <span class="comment">// 這是小名的家</span></span><br></pre></td></tr></table></figure>

<h3 id="Number-數字"><a href="#Number-數字" class="headerlink" title="Number 數字"></a>Number 數字</h3><p>JS 中只有一種數值型別就是 Number， number 可以是整數或小數點或負數。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span> ;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">12.5</span>; </span><br><span class="line"><span class="keyword">let</span> c = -<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">特殊數字</span><br><span class="line">Infinity: 無限大  // 正數除以0</span><br><span class="line">-Infinity: 負無限大 // 負數除以0</span><br><span class="line">NaN: 不是數值(Not a number)</span><br></pre></td></tr></table></figure>

<p>NaN 字面上來說不是數字，但若用 typeof 判斷型態，會得到 number</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="title class_">NaN</span>; <span class="comment">// number`</span></span><br></pre></td></tr></table></figure>

<p>NaN 與任何數字運算都會是 NaN，甚至是自己。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span> <span class="comment">// false;</span></span><br></pre></td></tr></table></figure>

<p>可以用 isNaN() 來檢查一個變數是否為 NaN</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="number">123</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;小名&#x27;</span>) <span class="comment">// ture</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;123&#x27;</span>) <span class="comment">// false 因為字串 &#x27;123&#x27;，會透過隱含的 Number()轉成數字。</span></span><br></pre></td></tr></table></figure>

<h2 id="Boolean-布林值"><a href="#Boolean-布林值" class="headerlink" title="Boolean 布林值"></a>Boolean 布林值</h2><p>boolean 值只有兩種， true 以及 false，常用在判斷式當中。</p>
<h2 id="null-與-undefined"><a href="#null-與-undefined" class="headerlink" title="null 與 undefined"></a>null 與 undefined</h2><p>undefined 代表 此變數還沒有給值，所以不知道是什麼。</p>
<p>null 代表的是以前可能有或沒有值，但現在沒有值， 代表是一個空值。</p>
<h2 id="變數與刪除"><a href="#變數與刪除" class="headerlink" title="變數與刪除"></a>變數與刪除</h2><p>js 中變數是無法被刪除的，屬性才可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> a; </span><br><span class="line"><span class="keyword">delete</span> b;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// b is not defined</span></span><br></pre></td></tr></table></figure>

<p>上面程式中，a 是宣告的變數，無法由 delete 刪除。<br>b沒有透過變數宣告，會直接變成全域物件window下的屬性。所以delete b就相當於 delete window.b。</p>
<h2 id="動態型別"><a href="#動態型別" class="headerlink" title="動態型別"></a>動態型別</h2><p>js 中變數本身不具有型別，型別是由值賦予的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myName = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> myName); <span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;小明&#x27;</span>); <span class="comment">// string</span></span><br></pre></td></tr></table></figure>

<p>上面可以看出值本身具有型別 string，而變數的型別是由值賦予的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br><span class="line">num = <span class="string">&#x27;文字&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num); <span class="comment">// string</span></span><br></pre></td></tr></table></figure>

<p>因為 js 是動態型別，所以變數型別會因為被賦予值的不同而更換。</p>
<h3 id="型別隱性轉換"><a href="#型別隱性轉換" class="headerlink" title="型別隱性轉換"></a>型別隱性轉換</h3><p>變數型別除了直接被賦值的顯性轉換以外，也有隱性轉換的情形:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br><span class="line">num = num + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num); <span class="comment">// string</span></span><br></pre></td></tr></table></figure>
<p>如上因為 數字與字串型別相加，會變成字串型別。</p>
]]></content>
      <categories>
        <category>JS 基礎篇</category>
      </categories>
      <tags>
        <tag>JS 基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 基礎篇 (4) 自動轉型</title>
    <url>/2024/04/20/2024-04-20-js-new-typeChange/</url>
    <content><![CDATA[<h2 id="自動轉型的規則"><a href="#自動轉型的規則" class="headerlink" title="自動轉型的規則"></a>自動轉型的規則</h2><p>JS 在運算與比較的過程中，常會為兩側的數值做自動轉型。<br>在兩個等號的 &#x3D;&#x3D; 的比較運算式下，若雙方資料類型不同時，會「自動轉型」。<br>規則如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其中一個值為 Boolean 的情形下，true 轉型為數字 1，false 轉型為數字 0</span></span><br><span class="line"><span class="number">1</span> == <span class="literal">true</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字串與數字做比較時，將字串透過Number()轉型為數字後比較</span></span><br><span class="line"><span class="number">1</span> == <span class="string">&#x27;1&#x27;</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null undefined 不會被轉為數字比較</span></span><br><span class="line"><span class="literal">null</span> == <span class="number">0</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="number">0</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中一方為物件時，另一方為基本型別時，會透過物件的 valueof 取得對應的基本型別的值後比較</span></span><br><span class="line"><span class="comment">// 定義一個自定義的物件</span></span><br><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  <span class="attr">valueOf</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>; <span class="comment">// 返回基本型別的值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將物件與基本型別進行比較</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myObject == <span class="number">5</span>); <span class="comment">// 輸出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">10</span>] == <span class="number">10</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="string">&#x27;a&#x27;</span>] == <span class="string">&#x27;a&#x27;</span>) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; <span class="string">&#x27;A&#x27;</span>: A &#125; == <span class="string">&#x27;A&#x27;</span>); <span class="comment">// false &#123;&#x27;A&#x27;: A &#125; 被轉換為字符串 &quot;[object Object]&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="數值的大於-gt-與-小於-lt"><a href="#數值的大於-gt-與-小於-lt" class="headerlink" title="數值的大於 &gt; 與 小於 &lt;"></a>數值的大於 &gt; 與 小於 &lt;</h2><p>在 JavaScript 中，當使用大於 &gt; 或小於 &lt; 的比較運算符時，如果兩側的值不是同一種類型，JavaScript 會嘗試將它們轉換為相同的類型，然後再進行比較。這種自動轉型的過程被稱為類型轉換或類型強制轉換。</p>
<p>下面是一些類型轉換的規則：</p>
<ol>
<li>如果兩側都是字符串，則直接比較字符串的 Unicode 字符序列。</li>
<li>如果一側是字符串，另一側是數字，則將字符串轉換為數字後進行比較。</li>
<li>如果一側是布爾值，則將布爾值轉換為數字後進行比較（true 轉換為 1，false 轉換為 0）。</li>
<li>如果其中一側是物件，會先使用 valueOf 方法嘗試轉換為基本型別值，如果 valueOf 返回的不是基本型別值，則使用 toString 方法轉換為字符串後進行比較。</li>
<li>如果以上都不符合，則會返回 false。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> &gt; <span class="string">&quot;3&quot;</span>);      <span class="comment">// 輸出: true，&quot;3&quot; 被轉換為數字 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> &lt; <span class="number">5</span>);      <span class="comment">// 輸出: false，&quot;10&quot; 被轉換為數字 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &gt; <span class="number">0</span>);      <span class="comment">// 輸出: true，true 被轉換為數字 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &lt; <span class="number">1</span>);     <span class="comment">// 輸出: true，false 被轉換為數字 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; &gt; <span class="literal">null</span>);     <span class="comment">// 輸出: false，&#123;&#125; 被轉換為字符串 &quot;[object Object]&quot;，null 被轉換為數字 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] &gt; []);       <span class="comment">// 輸出: false，兩個空陣列都被轉換為字符串 &quot;&quot;，然後比較字符串的 Unicode 字符序列，相等返回 false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JS 基礎篇</category>
      </categories>
      <tags>
        <tag>JS 基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 基礎篇 (7) 傳值或傳址</title>
    <url>/2024/04/21/2024-04-21-js-value/</url>
    <content><![CDATA[<p>Javascript 的資料可以分為「基本型別」和「物件型別」</p>
<ul>
<li>基本型別: 資料以純值的形式存在</li>
<li>物件型別: 資料以純值或物件組合而成</li>
</ul>
<h2 id="基本型別的比較"><a href="#基本型別的比較" class="headerlink" title="基本型別的比較"></a>基本型別的比較</h2><p>當今天比較兩個基本型別的資料時，比較的是變數的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="物件型別的比較"><a href="#物件型別的比較" class="headerlink" title="物件型別的比較"></a>物件型別的比較</h2><p>物件比較的情況下，因為每個js的物件都是個別的實體，在記憶體中存在不同位置。所以即使物件內的value相同，仍是不同物件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 === obj2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="傳值或傳址"><a href="#傳值或傳址" class="headerlink" title="傳值或傳址"></a>傳值或傳址</h2><p>當你在 JavaScript 中傳遞變數給函數作為參數或將變數賦值給另一個變數時，你實際上是在處理該變數的值。這就涉及到 JavaScript 中的「傳值」和「傳址」的概念。</p>
<ol>
<li>傳值（Pass by Value）:<br>當你將一個基本型別的變數（例如數字、字串、布林值等）傳遞給函數或賦值給另一個變數時，JavaScript 會將該變數的值複製一份，然後將這份複製的值傳遞給函數或賦值給另一個變數。在函數內部修改這個複製的值或新變數不會影響原始變數的值。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">double</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    num = num * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">double</span>(num1)); <span class="comment">// 輸出 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1); <span class="comment">// 仍然是 5，因為 num1 沒有被修改</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>傳址（Pass by Reference）</li>
</ol>
<p>當你將一個物件（包括陣列、函數等）傳遞給函數或賦值給另一個變數時，JavaScript 會將該物件在記憶體中的位置（記憶體參考）傳遞給函數或另一個變數，而不是將物件的值複製一份。因此，在函數內部修改這個物件或新變數會影響到原始物件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">value</span>: <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doubleValue</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    obj.<span class="property">value</span> = obj.<span class="property">value</span> * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">doubleValue</span>(obj1)); <span class="comment">// 輸出 &#123; value: 20 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">// 會輸出 &#123; value: 20 &#125;，因為 obj1 與原始物件引用的是同一個物件</span></span><br></pre></td></tr></table></figure>

<ul>
<li>例外情形:</li>
</ul>
<p>當物件被傳遞給函式作為參數或賦值給另一個變數後，此時若不是修改物件而是重新將物件賦值時，不會影響原來的物件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">value</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj1;</span><br><span class="line">obj2 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125; <span class="comment">// 物件重新賦值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1) <span class="comment">// &#123; value: 10 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2) <span class="comment">// &#123; a: 1 &#125;</span></span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>JS 基礎篇</category>
      </categories>
      <tags>
        <tag>JS 基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>Firebase 資料庫 (2) 資料庫環境</title>
    <url>/2024/04/22/2024-04-22-firebase-environment/</url>
    <content><![CDATA[<p>上章節中已建立好一個firebase專案，點選左邊選單的 Realtime Database來建立一個資料庫</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*e9v5rZWjhu4B0tuLOtvS_w.png"></p>
<p>在資料這頁可以看到資料庫狀態，此時因為還沒寫入資料所以是null</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*CLGTTmxho-OADRWcgnQWtA.png"></p>
<p>在規則這頁可以設定各種條件，比如預設是要登入才有寫入與讀取的權限。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*U5X-nGPYisNe_G8eVPrDcw.png"></p>
<p>用量則可看到資料庫目前使用情況。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*2pCHGJKkGHne36Ex0IVrvQ.png"></p>
]]></content>
      <categories>
        <category>Firebase</category>
      </categories>
      <tags>
        <tag>Firebase</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 基礎篇 (6) 函式的基本概念</title>
    <url>/2024/04/21/2024-04-21-js-new-function/</url>
    <content><![CDATA[<h2 id="函式是物件的一種"><a href="#函式是物件的一種" class="headerlink" title="函式是物件的一種"></a>函式是物件的一種</h2><p>在前面介紹變數型別的時候曾經說過，除了基本型別以外的都是物件。函式本身也是物件的一種，只是多了被呼叫的能力。</p>
<h2 id="函式"><a href="#函式" class="headerlink" title="函式"></a>函式</h2><p>「函式」指的是將一或多段程式指令包裝起來，可以重複使用，也方便維護。</p>
<p>宣告函式的方法有好幾種，但不管是什麼方式，通常一個函式會包含三個部分：</p>
<ul>
<li>函式的名稱 (也可能沒有名稱)</li>
<li>在括號 ( ) 中的部分，稱為「參數 (arguments) 」，參數與參數之間會用逗號 , 隔開</li>
<li>在大括號 { } 內的部分，內含需要重複執行的內容，是函式功能的主要區塊。</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*yEQ5TtUsQntKtxzUsqQPrQ.png"></p>
<h2 id="定義函式的方式"><a href="#定義函式的方式" class="headerlink" title="定義函式的方式"></a>定義函式的方式</h2><ul>
<li>函式宣告: 使用 function 關鍵字聲明函式，並指定函式名稱。函式聲明可以在程式碼的任何位置進行調用，因為它們會被提升（hoisted）至作用域的頂部。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&quot;World&quot;</span>); <span class="comment">// 調用函式</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函式表達式: 將函式賦值給一個變數，這種方式下，函式的名稱是可選的，也可以是匿名的。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 將匿名函式賦予變數</span></span><br><span class="line"><span class="keyword">var</span> greet = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&quot;World&quot;</span>); <span class="comment">// 調用函式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 將具名函式賦予變數</span></span><br><span class="line"><span class="keyword">var</span> functionD = <span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 具名函式 myFunc 只能在函式內被調用</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(functionD)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myFunc) <span class="comment">// myFunc is not defined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>new Function</li>
</ul>
<p>以使用 new Function 建構函式。new Function 允許你在執行時動態建立一個函式，你只需要提供函式的參數和函式體。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction = <span class="keyword">new</span> <span class="title class_">Function</span>(arg1, arg2, ..., body);</span><br></pre></td></tr></table></figure>

<ul>
<li>arg1, arg2, … 是函式的參數。這些是字串，每個字串代表一個函式參數的名稱。</li>
<li>body 是函式的內容，也是一個字串，代表了函式的主體部分</li>
</ul>
<p>範例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> addFunction = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;return a + b;&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFunction</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 輸出: 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure>

<p>雖然 new Function 提供了動態建立函式的能力，但應該小心使用它，因為它的使用可能會讓程式碼難以閱讀和維護。通常情況下，函式聲明、函式表達式更加直觀和易於理解。</p>
<h2 id="立即函式"><a href="#立即函式" class="headerlink" title="立即函式"></a>立即函式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 將函式轉為立即函式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;call something&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步驟一 函式外層加上小括號 ()</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;call something&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步驟二 函式後方再加上小括號 ()</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;call something&#x27;</span>);</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure>

<p>立即函式有以下特點: </p>
<ol>
<li>立刻執行</li>
<li>無法在函式外被再次執行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;call something&#x27;</span>);</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunc</span>(); <span class="comment">// myFunc is not defined</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>可以不加上函式名稱</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;call something&#x27;</span>);</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>() 可以移到外層</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;call something&#x27;</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>可傳遞參數到立即函式內</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">where</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(where); <span class="comment">// 小明在這</span></span><br><span class="line">&#125;)(<span class="string">&#x27;小明在這&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>可以 return 值到外層</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> whereMing = (<span class="keyword">function</span> (<span class="params">where</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> where;</span><br><span class="line">&#125;)(<span class="string">&#x27;小明在這&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>常用來限制變數作用域，因為變數的作用域在函式內。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>); <span class="comment">// 小明</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>); <span class="comment">// Ming is not defined</span></span><br></pre></td></tr></table></figure>

<h2 id="函式參數"><a href="#函式參數" class="headerlink" title="函式參數"></a>函式參數</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 小明</span></span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 小明</span></span><br><span class="line">  a = <span class="string">&#x27;杰倫&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 杰倫</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">callName</span>(<span class="string">&#x27;小明&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>參數在傳入函式時，已經定義好值，在函式內宣告一樣的變數，不會影響到原本參數。若要修改參數，就要在函式內重新賦值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&#x27;杰倫&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> family = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callName</span>(family);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family.<span class="property">name</span>); <span class="comment">// 杰倫</span></span><br></pre></td></tr></table></figure>

<p>當把物件作為參數傳入時，因為物件傳參考的特性，若修改物件屬性的值，外層物件也會被修改。</p>
<h2 id="arguments-物件"><a href="#arguments-物件" class="headerlink" title="arguments 物件"></a>arguments 物件</h2><p>Function被呼叫時會產生 arguments 物件，用來記錄傳入的參數。 arguments不是陣列，只是具有索引特性的物件，內建.length屬性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    total += <span class="variable language_">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出：6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)); <span class="comment">// 输出：65</span></span><br></pre></td></tr></table></figure>

<p>要注意的是箭頭函式沒有 arguments 物件，而是改用其餘參數的方式取得</p>
<p><code>const func = (...args) =&gt; console.log(args)</code>;</p>
]]></content>
      <categories>
        <category>JS 基礎篇</category>
      </categories>
      <tags>
        <tag>JS 基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 基礎篇 (5) 流程控制與迴圈</title>
    <url>/2024/04/21/2024-04-21-js-new-ifelse/</url>
    <content><![CDATA[<h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><p>就如同字面上一樣，「如果」怎樣怎樣，就做某件事，「否則」做另一件事，語法像這樣︰</p>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*ioRuQzg0mgPzHzV6BB_bsQ.png"></p>
<p>除了 if else 之外，你也可以使用 else if 來新增條件：</p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*KbgXoVzcuXYYrQ54sYgk_Q.png"></p>
<h2 id="三元運算子"><a href="#三元運算子" class="headerlink" title="三元運算子"></a>三元運算子</h2><p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*38CeRDOo_tVhtKHEeCc5BA.png"></p>
<p>如果單純做賦予值的判斷時，可用三元運算判斷式。</p>
<p>如果 today &#x3D;&#x3D;3 就將水餃的值賦予到 eat，不然就將飯賦予到eat。</p>
<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*f1kFLkDw4eqcxekWf1VJHQ.png"></p>
<p>switch 括號內的語法可能是運算式或是某個變數、值，像上面就是 Math.ceil(month&#x2F;3)。<br>接著會進入 case 來判斷，若switch 括號內的結果剛好是 case 後面的「值」，則會執行 case 區塊內的指令。<br>而 default 的區塊就是當上面所有 case 都不成立的時候會執行。</p>
<h2 id="for-迴圈"><a href="#for-迴圈" class="headerlink" title="for 迴圈"></a>for 迴圈</h2><p>所謂「迴圈」指的是，想要重複做某件事，而數值會依次數有「遞增」或「遞減」的變化來完成退出的條件。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*WhtkqGEPX10xhHfQKNWA_Q.png"></p>
<p>綠線的部分是「執行迴圈的條件」，指的是當滿足這個條件 (結果為 true) 的時候，就會進入大括號 { } 的區塊，然後執行內部程式。</p>
<p>藍線的部分是，在每一次執行完大括號 { } 區塊的程式碼之後，會執行這段程式碼。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這段程式碼將輸出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<h2 id="while-迴圈"><a href="#while-迴圈" class="headerlink" title="while 迴圈"></a>while 迴圈</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>括號 () 內代表的是「執行迴圈的條件」，指的是當滿足這個條件 (結果為 true) 的時候，就會進入大括號 { } 的區塊，然後執行內部程式。</p>
<p>while 迴圈特別適用於當你無法確定迴圈需要執行多少次，但可以確定某個條件會在適當的時候變為 false 的情況下。</p>
<h2 id="跳脫迴圈"><a href="#跳脫迴圈" class="headerlink" title="跳脫迴圈"></a>跳脫迴圈</h2><p>使用迴圈時，若想跳過其中幾次或提早離開迴圈，可用:</p>
<ul>
<li>break: 直接跳離迴圈</li>
<li>continue: 跳過一次，再繼續下個迴圈</li>
</ul>
<p>假設想印出 1 - 10 的所有數字，但跳過3的倍數:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">3</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 跳過3的倍數</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>JS 基礎篇</category>
      </categories>
      <tags>
        <tag>JS 基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>Firebase 資料庫 (1) 服務介紹</title>
    <url>/2024/04/22/2024-04-22-firebase-install/</url>
    <content><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/1000/0*TbHUwnXPWLpB6s3M.jpg"></p>
<p>firebase是一個線上的資料庫，讓我們能透過 js 來操作這個資料庫。價錢方面，免費版就可以同時上線 100人，並有1GB的儲存空間，可以說相當足夠。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*TSCOOcsNN4KrDgLHYrxiVw.png"></p>
<h2 id="登入Firebase"><a href="#登入Firebase" class="headerlink" title="登入Firebase"></a>登入Firebase</h2><p>首先進入 firebase 官網，點選右上角 go to console進入主控台。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*mYyBDf0uHbAMrCKCjlpfQQ.png"></p>
<p>點擊建立專案，第一步輸入專案名稱。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*fHKNlNeQJ3wd1f3ZWF2NZQ.png"></p>
<p>專案建立好後，會來到這個介面</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*BjL7CqoKGhIm-ffoQQVZMg.png"></p>
]]></content>
      <categories>
        <category>Firebase</category>
      </categories>
      <tags>
        <tag>Firebase</tag>
      </tags>
  </entry>
  <entry>
    <title>Firebase 資料庫 (4) 新增資料</title>
    <url>/2024/04/23/2024-04-23-firebase-addData/</url>
    <content><![CDATA[<h2 id="新增資料"><a href="#新增資料" class="headerlink" title="新增資料"></a>新增資料</h2><p>在學習新增資料以前，先學習2個語法</p>
<ol>
<li>ref() 尋找資料庫路徑</li>
<li>set() 新增資料</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">firebase.<span class="title function_">database</span>().<span class="title function_">ref</span>().<span class="title function_">set</span>(<span class="string">&#x27;hi&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>上面的程式碼代表，我要使用firebase裡的database功能，並在這個資料庫的ref()路徑裡新增 hi這筆資料，注意ref如果不帶路徑，預設是指向根目錄。</p>
<p>這時會跳錯，因為 firebase 因為安全性問題，預設是不能讀取與寫入的，所以先到規則頁面將 讀取與寫入 改為true。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*0yl7fQkVFq09oq18FwZqEg.png"></p>
<p>將 html重新整理後，會發現資料 hi 被寫入資料庫了</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*qBPhRblil-11V187Wrhh2A.png"></p>
<p>也可以寫入物件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">firebase.<span class="title function_">database</span>().<span class="title function_">ref</span>().<span class="title function_">set</span>(&#123; <span class="attr">home</span>: <span class="string">&#x27;TW&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn-images-1.medium.com/max/1000/1*7l4j8nnIq1skG03DHGoQdA.png"></p>
<p>firebase全部是物件格式，無法寫入陣列</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*83fBM2iTLN-Rxrl_ZUzWPQ.png"></p>
<p>假設想將一個陣列寫入firebase時，會發現資料並不是以陣列的方式存在</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*zYR86Mb16ZxsIvxW5RRAyA.png"></p>
<p>因為無法寫入陣列，所以可以用物件的方式來寫入多筆資料</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*1aQf4x3FdBdSdqxazalt-w.png"></p>
<p>在firebase資料庫會呈現如下:</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*79FrgpKXe5XgKnKba9dNJQ.png"></p>
<p>如果要修改stydent1的name時，可以在ref裡帶入 student1&#x2F;name這個路徑，再用set去修改資料即可。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*jXdvV3t4xNIAOIc3DRmdVg.png"></p>
]]></content>
      <categories>
        <category>Firebase</category>
      </categories>
      <tags>
        <tag>Firebase</tag>
      </tags>
  </entry>
  <entry>
    <title>Firebase 資料庫 (6) 新增、刪除資料</title>
    <url>/2024/04/24/2024-04-24-firebase-addData/</url>
    <content><![CDATA[<h2 id="push-新增資料"><a href="#push-新增資料" class="headerlink" title="push 新增資料"></a>push 新增資料</h2><p>firebase中新增資料可以用 push 語法</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*Lj_oiCxolhEon7gyO2jouw.png"></p>
<p>上面例子中，先選取todos的資料位置後，再用push語法新增一筆物件進去</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*r-Q7UQ1tFWHEqkE0Bw8Epw.png"></p>
<p>新增完後，在todos裡的每個物件都會有一個隨機id，作為區分資料用。</p>
<h2 id="child-指定路徑"><a href="#child-指定路徑" class="headerlink" title="child 指定路徑"></a>child 指定路徑</h2><p>在firebase裡指定路徑除了用 <code>.ref(&#39;路徑&#39;)</code>以外，也可以用 <code>.child()</code></p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*3brTEjA3oACFFsOxQJf6XQ.png"></p>
<p>上面代表先指定到ref()根目錄，在指定到根目錄下一層的todos資料。</p>
<h2 id="remove、child-移除資料"><a href="#remove、child-移除資料" class="headerlink" title="remove、child - 移除資料"></a>remove、child - 移除資料</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*gDRzebZUUhnE8ghhLlEvbw.png"></p>
<p>移除資料可以用remove()，上面例子中先指定todos裡的 -MpeDcD0TbFwIjQajj -資料，再用remove()做刪除。</p>
]]></content>
      <categories>
        <category>Firebase</category>
      </categories>
      <tags>
        <tag>Firebase</tag>
      </tags>
  </entry>
  <entry>
    <title>Firebase 資料庫 (3) 取得 網路應用程式</title>
    <url>/2024/04/23/2024-04-23-firebase-setup/</url>
    <content><![CDATA[<p>首先請點一下左上「專案總覽」返回專案首頁</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*yS9r1FTI0PTSFJvDDkRwNg.png"></p>
<p>選擇網頁應用程式 &lt;&#x2F;&gt;符號，來將 firebase 新增到網頁應用程式<br>註冊完畢後底下就會立刻出現 Firebase 的 SDK，分別是 npm 與 script，這邊請選擇 script 標籤，接著複製下「firebaseConfig」的部分。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = firebase.<span class="title function_">initializeApp</span>(&#123;</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;&lt;your-api-key&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">authDomain</span>: <span class="string">&#x27;&lt;your-auth-domain&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">databaseURL</span>: <span class="string">&#x27;&lt;your-database-url&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;&lt;your-cloud-firestore-project&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">storageBucket</span>: <span class="string">&#x27;&lt;your-storage-bucket&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">messagingSenderId</span>: <span class="string">&#x27;&lt;your-sender-id&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">appId</span>: <span class="string">&#x27;&lt;your-app-id&gt;&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>由於 Firebase 後來更新有兩個版本，本課程主要是以 Firebase v8 作為主要授課內容，但是官方 Firebase 所提供的是 Firebase 9，因此底下提供Firebase v8 的 CDN 以及準備好的 CodePen 給大家方便後續課程練習</p>
<p>Firebase V8：<a href="">https://codepen.io/hsiangfeng/pen/eYVwKqQ</a></p>
<p>這邊提供 <a href="https://firebase.google.com/docs/database/web/start?authuser=1&hl=zh-tw">Firebase 文件網址</a>，官方文件的閱讀方式主要也有區分 V8 V9，只需要點一下上方分類標籤就可以切換語法囉。</p>
<p>可以開一個html檔，在 head 標籤引入 script，來看database 是否能讀取了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://www.gstatic.com/firebasejs/8.9.1/firebase-app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://www.gstatic.com/firebasejs/8.9.1/firebase-database.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> config = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">apiKey</span>: <span class="string">&#x27;&lt;your-api-key&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">authDomain</span>: <span class="string">&#x27;&lt;your-auth-domain&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">databaseURL</span>: <span class="string">&#x27;&lt;your-database-url&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">projectId</span>: <span class="string">&#x27;&lt;your-cloud-firestore-project&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">storageBucket</span>: <span class="string">&#x27;&lt;your-storage-bucket&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">messagingSenderId</span>: <span class="string">&#x27;&lt;your-sender-id&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">appId</span>: <span class="string">&#x27;&lt;your-app-id&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    firebase.<span class="title function_">initializeApp</span>(config);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> database = firebase.<span class="title function_">database</span>();</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Firebase</category>
      </categories>
      <tags>
        <tag>Firebase</tag>
      </tags>
  </entry>
  <entry>
    <title>Firebase 資料庫 (7) 資料排序</title>
    <url>/2024/04/24/2024-04-24-firebase-order/</url>
    <content><![CDATA[<h2 id="資料排序"><a href="#資料排序" class="headerlink" title="資料排序"></a>資料排序</h2><p>在firebase中，如果想對資料作排序可以用 <code>orderByChild()</code>語法搭配 <code>forEch()</code>語法。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*6KW8RQdpyEMZqUAljK-bLg.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*Rvu0eLayL6Oq0YfUeKekTw.png"></p>
<p>我們有一筆people物件的資料，先讀取物件的路徑。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*r5g4ZluzPf8uBaqFK9r3-w.png"></p>
<p>在peopleRef路徑後先用 orderByChild()，決定排序屬性是height身高、old年齡或weight體重，再用once去讀出資料。<br>在 once 的 function 裡用 forEach 去將排序後的資料一一讀出，這邊的 forEach 是 firebase 的語法，不是 js 裡的語法。</p>
<h2 id="orderByChild-排序規則"><a href="#orderByChild-排序規則" class="headerlink" title="orderByChild 排序規則"></a>orderByChild 排序規則</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*-bZo1rwFvWKNgZeDebYikA.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*tBqWw0TWQzT99eKJOCNbKg.png"></p>
<p>假設今天 orderByChild 針對 height 屬性作排序，height 屬性的值有不同型別如 null、數字、字串 、物件等，排序規則如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">null &gt; false &gt; true &gt; 數字 &gt; 字串 &gt; 物件</span><br></pre></td></tr></table></figure>
<p>排序結果如下:</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*tg-jW512rdPciOfT8rF1Yg.png"></p>
]]></content>
      <categories>
        <category>Firebase</category>
      </categories>
      <tags>
        <tag>Firebase</tag>
      </tags>
  </entry>
  <entry>
    <title>Firebase 資料庫 (8) 資料搜尋區間與限制筆數</title>
    <url>/2024/04/24/2024-04-24-firebase-search/</url>
    <content><![CDATA[<h2 id="搜尋資料區間"><a href="#搜尋資料區間" class="headerlink" title="搜尋資料區間"></a>搜尋資料區間</h2><p>firebase 除了可以用 orderByChild 來排序資料以外，也可以加入搜尋區間的規則。</p>
<ol>
<li>startAt (‘值’) : 在 值 以上</li>
<li>endAt(‘值’) : 在 值 以下</li>
<li>equalTo(‘值’): 剛好等於值</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*SsUfAk9iWKLr4Zb24CGq8g.png" alt="選出體重介於3500–4500的資料"></p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*TMRdOAbyz2DKZuSlI_iXYA.png" alt="篩選出體重剛好是4000的資料。"></p>
<h2 id="限制筆數"><a href="#限制筆數" class="headerlink" title="限制筆數"></a>限制筆數</h2><p>假設今天想限制取出來資料的比數，可以用以下語法:</p>
<ol>
<li>limitToFirst(筆數): 從資料前面取出指定筆數資料。</li>
<li>limitToLast(筆數): 從資料後面取出指定筆數資料。</li>
</ol>
<p>今天有資料如下:</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*mCkSpixtI88Y91sLDxWz8Q.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*3u4-FI6oVQCH1Q0WzWFn2A.png"></p>
<p>上面的例子會先篩選出weight大於3500的資料，在用 limitToFirst(1) 限制資料筆數為1筆，撈出結果如下。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*xBf4MxCzrr94xIUmLilFvQ.png"></p>
]]></content>
      <categories>
        <category>Firebase</category>
      </categories>
      <tags>
        <tag>Firebase</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 時間處理</title>
    <url>/2024/04/24/2024-04-24-js-time/</url>
    <content><![CDATA[<p>在 JavaScript 中，操作時間通常涉及使用內置的 Date 物件和相關的方法。以下是一些常見的時間操作方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建一個表示當前時間的日期物件</span></span><br><span class="line"><span class="keyword">const</span> currentDate = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// Wed Apr 24 2024 20:55:58 GMT+0800 (台北標準時間) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得時間的各個部分</span></span><br><span class="line"><span class="keyword">const</span> year = currentDate.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="keyword">const</span> month = currentDate.<span class="title function_">getMonth</span>(); <span class="comment">// 0 表示 1 月，11 表示 12 月</span></span><br><span class="line"><span class="keyword">const</span> day = currentDate.<span class="title function_">getDate</span>(); <span class="comment">// 0 表示禮拜天， 1 代表禮拜一</span></span><br><span class="line"><span class="keyword">const</span> hours = currentDate.<span class="title function_">getHours</span>();</span><br><span class="line"><span class="keyword">const</span> minutes = currentDate.<span class="title function_">getMinutes</span>();</span><br><span class="line"><span class="keyword">const</span> seconds = currentDate.<span class="title function_">getSeconds</span>();</span><br><span class="line"><span class="keyword">const</span> milliseconds = currentDate.<span class="title function_">getMilliseconds</span>(); <span class="comment">// 毫秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 獲取時間戳記 1970/1/1 到現在的總秒數</span></span><br><span class="line"><span class="keyword">const</span> timestamp = currentDate.<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 timestamp 轉回日期</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1713963786660</span>)</span><br><span class="line"><span class="comment">// Wed Apr 24 2024 21:03:06 GMT+0800 (台北標準時間)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="獲取日期區間的時間戳"><a href="#獲取日期區間的時間戳" class="headerlink" title="獲取日期區間的時間戳"></a>獲取日期區間的時間戳</h2><p>要取得當天日期的最早和最晚的時間戳（timestamp），你可以使用 JavaScript 中的 Date 物件來實現。以下是一種方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 獲取當天日期的最早時間戳</span></span><br><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">today.<span class="title function_">setHours</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 設置時間為當天的午夜 00:00:00</span></span><br><span class="line"><span class="keyword">const</span> earliestTimestamp = today.<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 獲取當天日期的最晚時間戳</span></span><br><span class="line"><span class="keyword">const</span> endOfDay = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">endOfDay.<span class="title function_">setHours</span>(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999</span>); <span class="comment">// 設置時間為當天的午夜 23:59:59.999</span></span><br><span class="line"><span class="keyword">const</span> latestTimestamp = endOfDay.<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;當天日期的最早時間戳:&quot;</span>, earliestTimestamp);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;當天日期的最晚時間戳:&quot;</span>, latestTimestamp);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Firebase 資料庫 (5) 顯示資料</title>
    <url>/2024/04/24/2024-04-24-firebase-showdata/</url>
    <content><![CDATA[<h2 id="once-讀取資料-一次性"><a href="#once-讀取資料-一次性" class="headerlink" title="once 讀取資料(一次性)"></a>once 讀取資料(一次性)</h2><p>假設今天在firebase裡我們有一筆資料，想寫到網頁上</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*ClytmEDLd8qAgWmoFffsUg.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*vhHkCBqqdSCorEUf8nQCVg.png"></p>
<p>可以先用 ref指向資料的位置</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*gOomVoRZLg80TYhauZmLpA.png"></p>
<p>再利用.once的語法，這個語法可以一次性地讀出資料，並第一個參數指定’value’代表我要取值，在function裡的 snapshot參數就是值，如果要轉換成js可以處理的陣列或物件的話，要再加上.val()。</p>
<h2 id="on-讀取資料-隨時監聽"><a href="#on-讀取資料-隨時監聽" class="headerlink" title="on 讀取資料(隨時監聽)"></a>on 讀取資料(隨時監聽)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nameRef = firebase.<span class="title function_">database</span>().<span class="title function_">ref</span>(<span class="string">&#x27;myName&#x27;</span>);</span><br><span class="line">nameRef.<span class="title function_">set</span>(<span class="string">&#x27;mark&#x27;</span>);</span><br><span class="line">nameRef.<span class="title function_">on</span>(<span class="string">&#x27;value&#x27;</span>, <span class="keyword">function</span>(<span class="params">snapshot</span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#title&#x27;</span>).<span class="property">textContent</span> = snapshot.<span class="title function_">val</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>on和once一樣可以讀取firebase資料庫的資料，唯一的不同是once只會在載入時讀取一次，on則會即時監聽資料庫的更新。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*7vpxCj3XgRpN9-sFNz7FfA.png"></p>
<p>當資料庫的myName更新為 mark12</p>
<p><a href="https://cdn-images-1.medium.com/max/1000/1*_Ni9VnokoGqCEwyhJnULhQ.png">https://cdn-images-1.medium.com/max/1000/1*_Ni9VnokoGqCEwyhJnULhQ.png</a></p>
<p>網頁也會即時更新，適合做聊天室等功能。</p>
]]></content>
      <categories>
        <category>Firebase</category>
      </categories>
      <tags>
        <tag>Firebase</tag>
      </tags>
  </entry>
  <entry>
    <title>session 介紹(一) session 簡介</title>
    <url>/2024/04/27/2024-04-27-session/</url>
    <content><![CDATA[<h2 id="session-簡介"><a href="#session-簡介" class="headerlink" title="session 簡介"></a>session 簡介</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*zJ5gkavkKQNNVCUf1_JmFw.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*unFjm2vieGrglwfiimaD4g.png"></p>
<ul>
<li>實際運作</li>
</ul>
<p>Session 負責紀錄在 web server 上的使用者訊息。Session 機制會在一個用戶完成身分認證後，存下所需的用戶資料，接著產生一組對應的 id，存入 cookie 後傳回用戶端。</p>
<p>這個 id 要是獨特的，所以會使用 uuid 的機制，重複的機率非常非常低。</p>
<p>因此當下次用戶端發送請求時，如果帶有該 id 資訊，web server 就會認為該請求是來自該名使用者，達到驗證用戶的目的。這個時候防偽的機制就相當重要，如果伺服器端的實作有問題，再加上用戶端竄改 cookie，就有可能被偽造身分。</p>
<h2 id="開發環境設計"><a href="#開發環境設計" class="headerlink" title="開發環境設計"></a>開發環境設計</h2><p>安裝 express-session</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install express-session  --save</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs 載入 session</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;keyboard cat&#x27;</span>, <span class="comment">// 利用亂數編碼讓駭客不容易入侵session</span></span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">false</span>, <span class="comment">// 瀏覽器重新載入時，會再次寫入資料到nodeJS ，建議設為true</span></span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">true</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<p>安裝完畢後，再開啟瀏覽器，可以發現在瀏覽器的cookie裡，多了一組connect.sid</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*2otRPPdRkLyClziTSjKirg.png"></p>
<p>做到這裡，就做到了當有人打開瀏覽器時，後端就發一個號碼牌給你(cookie裡的 隨機id)，nodeJs上也有記憶體去紀錄這個id的資訊。</p>
<h2 id="寫入資料"><a href="#寫入資料" class="headerlink" title="寫入資料"></a>寫入資料</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*2AHc3Mt-exZXm51Z_-4DuA.png"></p>
<p>上面範例中，當使用者造訪 ‘&#x2F;‘頁面時， 可以先用req.session 看一下session，此時的seseion 應該是空的，因為還沒寫入資料。<br>再來可用req.session.username &#x3D; ‘tom’的方式寫入資料到 session，此時如果再次重新整理瀏覽器，就會發現 session.username &#x3D; ‘tom’ 的值被寫入了。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*-ajOJ5209ACEOwVtMd3GMA.png"></p>
<h2 id="結合表單設計"><a href="#結合表單設計" class="headerlink" title="結合表單設計"></a>結合表單設計</h2><p><img src="https://cdn-images-1.medium.com/max/1000/1*D9kt0HifNWpShcZd5PsRcw.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*ieFc1xuz1weHwvxMUARo0g.png"></p>
<p>我們也可以結合表單設計 post api，當使用者在表單上輸入資訊送出後，就會進到 router.post的api裡，此時會將值寫入session裡，當再次重新整理時，就可以將session的值讀出並寫入網頁。</p>
]]></content>
      <tags>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(15) CSURF - 阻擋跨站攻擊</title>
    <url>/2024/04/28/2024-04-28-node-csrf/</url>
    <content><![CDATA[<h2 id="跨站請求偽造-CSRF"><a href="#跨站請求偽造-CSRF" class="headerlink" title="跨站請求偽造(CSRF)"></a>跨站請求偽造(CSRF)</h2><p>跨站請求偽造（英語：Cross-site request forgery），是攻擊者通過一些技術手段欺騙使用者的瀏覽器去訪問一個自己曾經認證過的網站並執行一些操作（如發郵件，發訊息，甚至財產操作如轉帳和購買商品）。由於瀏覽器曾經認證過，所以被訪問的網站會認為是真正的使用者操作而去執行。這利用了web中使用者身分驗證的一個漏洞：簡單的身分驗證只能保證請求是發自某個使用者的瀏覽器，卻不能保證請求本身是使用者自願發出的。</p>
<ul>
<li>例子</li>
</ul>
<p>假如一家銀行用以執行轉帳操作的URL位址如下： <a href="https://bank.example.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName">https://bank.example.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName</a></p>
<p>那麼，一個惡意攻擊者可以在另一個網站上放置如下代碼： <code>&lt;img src=&quot;https://bank.example.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&quot; /&gt;</code></p>
<p>如果有賬戶名為Alice的使用者訪問了惡意站點，而她之前剛訪問過銀行不久，登錄資訊尚未過期，那麼她就會損失1000資金。</p>
<p>這種惡意的網址可以有很多種形式，藏身於網頁中的許多地方。此外，攻擊者也不需要控制放置惡意網址的網站。例如他可以將這種位址藏在論壇，部落格等任何使用者供應內容的網站中。這意味著如果伺服器端沒有合適的防禦措施的話，使用者即使訪問熟悉的可信網站也有受攻擊的危險。</p>
<h2 id="防禦措施"><a href="#防禦措施" class="headerlink" title="防禦措施"></a>防禦措施</h2><p>在nodejs專案，可以下載 <a href="https://www.npmjs.com/package/secure-csrf">secure-csrf</a> 這個套件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install csrf-tokens --save</span><br></pre></td></tr></table></figure>

<ol>
<li>引入 csrf ，等待promise回傳的 secure uuid</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express, &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">CSRF</span> <span class="keyword">from</span> <span class="string">&#x27;csrf-tokens&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span>(<span class="attr">req</span>: <span class="title class_">Request</span>, <span class="attr">res</span>: <span class="title class_">Response</span>, <span class="attr">next</span>: <span class="title class_">NextFunction</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> csrf = <span class="keyword">new</span> <span class="title function_">CSRF</span>();</span><br><span class="line">        <span class="keyword">const</span> secret = <span class="keyword">await</span> csrf.<span class="title function_">secret</span>();</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">next</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>產生 csrf token</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express, &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">CSRF</span> <span class="keyword">from</span> <span class="string">&#x27;csrf-tokens&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 產生 csrf 的 token 跟 secret</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">csrfProtection</span> = <span class="keyword">async</span>(<span class="params">req: Request, res: Response, next: NextFunction</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> csrf = <span class="keyword">new</span> <span class="title function_">CSRF</span>();</span><br><span class="line">      <span class="keyword">const</span> secret = <span class="keyword">await</span> csrf.<span class="title function_">secret</span>();</span><br><span class="line">      <span class="keyword">const</span> token = csrf.<span class="title function_">create</span>(secret);</span><br><span class="line">      req.<span class="property">body</span>.<span class="property">secret</span> = secret;</span><br><span class="line">      req.<span class="property">body</span>.<span class="property">token</span> = token;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">next</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將token ，secret 帶入需要保護的頁面，如表單頁面</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/form&#x27;</span>, csrfProtection, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;/form&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">secret</span>: req.<span class="property">body</span>.<span class="property">secret</span>,</span><br><span class="line">    <span class="attr">token</span>: req.<span class="property">body</span>.<span class="property">token</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<ol start="3">
<li>驗證 token</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express, &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">CSRF</span> <span class="keyword">from</span> <span class="string">&#x27;csrf-tokens&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span>(<span class="attr">req</span>: <span class="title class_">Request</span>, <span class="attr">res</span>: <span class="title class_">Response</span>, <span class="attr">next</span>: <span class="title class_">NextFunction</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> csrf = <span class="keyword">new</span> <span class="title function_">CSRF</span>();</span><br><span class="line">      <span class="keyword">const</span> secret = <span class="keyword">await</span> csrf.<span class="title function_">secret</span>();</span><br><span class="line">      csrf.<span class="title function_">verify</span>(req.<span class="property">session</span>.<span class="property">secret</span>, req.<span class="property">body</span>.<span class="property">token</span>);</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">next</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML Head標籤</title>
    <url>/2024/04/29/2024-04-29-html-head/</url>
    <content><![CDATA[<h2 id="head-表頭"><a href="#head-表頭" class="headerlink" title="head 表頭"></a>head 表頭</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/all.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>123456sss<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/all.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>:<br>將網頁格式指定為  UTF-8 編碼，在IE瀏覽器打中文時，若表頭沒加上這行，會變成亂碼。</p>
<p><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</code><br>content&#x3D;”IE&#x3D;edge” 告訴 IE 使用最新的標準模式來渲染頁面。</p>
<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code><br>指定了頁面的視窗（viewport）屬性，用於設定響應式網頁。</p>
<ul>
<li>width&#x3D;device-width 表示將頁面的寬度設置為裝置的寬度，這樣頁面將根據裝置的寬度來自動調整布局。</li>
<li>initial-scale&#x3D;1.0 表示初始縮放級別為 1.0，即不進行縮放。</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Express框架(16) 後端傳送提示訊息</title>
    <url>/2024/04/30/2024-04-30-node-flash/</url>
    <content><![CDATA[<h2 id="情形"><a href="#情形" class="headerlink" title="情形"></a>情形</h2><p>有時候會從後端傳送暫存的提示訊息給前端，比如前端姓名欄位沒填，傳送請填寫姓名的資訊給前端。此時可用 <code>connect-flash</code> 套件。</p>
<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save connect-flash</span><br></pre></td></tr></table></figure>

<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>因為 connect-flash 是將資料存在 session，所以express要先載入 cookieParser 跟 session</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> flash = <span class="built_in">require</span>(<span class="string">&#x27;connect-flash&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(cookieParser);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;keyboard cat&#x27;</span>, </span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">flash</span>());</span><br></pre></td></tr></table></figure>

<p>因為有設定 flash 這個 middleware，所有路由都可以使用 req.flash() 功能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 將資料存入 flash</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/flash&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">  <span class="comment">// Set a flash message by passing the key, followed by the value, to req.flash().</span></span><br><span class="line">  req.<span class="title function_">flash</span>(<span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;Flash is back!&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 flash 的資料渲染到頁面上</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">  <span class="comment">// Get an array of flash messages by passing the key to req.flash()</span></span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">messages</span>: req.<span class="title function_">flash</span>(<span class="string">&#x27;info&#x27;</span>) &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 核心篇 (8) 物件的原型鍊與繼承</title>
    <url>/2024/04/30/2024-04-30-prototype-chain/</url>
    <content><![CDATA[<h2 id="原型鍊"><a href="#原型鍊" class="headerlink" title="原型鍊"></a>原型鍊</h2><p>javascript是一門基於原形的物件導向語言，透過原形的繼承可以讓本來沒有某個屬性的物件去存取其他物件的屬性。</p>
<h2 id="指定原形關係"><a href="#指定原形關係" class="headerlink" title="指定原形關係"></a>指定原形關係</h2><p>在js裡，我們可以透過 Object.setPrototypeOf ，來指定物件間的原形關係</p>
<p><img src="https://miro.medium.com/v2/resize:fit:720/format:webp/1*BgXiOk3A6Q5_X4gN6oDxeg.png"></p>
<p>透過 setPrototypeOf， spiderman就繼承了superman的 superPower的屬性，透過 in 可以判斷 superPower屬性存在 spiderman裡。</p>
<p>但在原形繼承裡，同一個物件無法同時繼承兩個原形物件，假使再新增一個 lightman，並用setPrototypeOf指定屬性light給 spiderman，原本的superPower屬性就會消失。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:750/format:webp/1*dqunA4axz1fpjSRhpZicAg.png"></p>
<p>如果想讓spiderman同時繼承 superman跟 lightman的能力，可以利用原形鍊的觀念，當一個物件要去存取不存在的屬性時，會往原形物件去查找。</p>
<p>讓 spiderman 去繼承 superman，superman再去繼承 lightman，如此spiderman就同時繼承 superman跟 lightman的能力。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:750/format:webp/1*bGKUnyzQx5F9FdFsCRZerA.png"></p>
<p><a href="https://codepen.io/tim-chou/pen/WNOooBv?editors=1011">範例</a></p>
<h3 id="最頂層的原形物件-Object-prototype"><a href="#最頂層的原形物件-Object-prototype" class="headerlink" title="最頂層的原形物件: Object.prototype"></a>最頂層的原形物件: Object.prototype</h3><p>如原型鍊的觀念，當一個物件要去存取不存在的屬性時，會往原形物件去查找，那找到何時才會停止呢 ?</p>
<p>答案是 Object.prototype，最頂層的物件，也是所有物件的起源。也就是說Object.prototype 所有的方法，在javascript裡的所以所有物件都可以使用。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*_cOIW52aFJ1fMLnCFyMqfA.png"></p>
<h2 id="Object-create-繼承方法"><a href="#Object-create-繼承方法" class="headerlink" title="Object.create 繼承方法"></a>Object.create 繼承方法</h2><p>除了上面介紹的 Object. setPrototypeOf，來指定物件的原形以外，也可透過Object.create來指定原形關係。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:720/format:webp/1*abe-94jNq0DrTZ5kbtvXnw.png"></p>
<p>首先定義一個物件作為原形，然後透過Object.create建立一個新的物件，此時新物件的prototype就會是那個原形物件。</p>
]]></content>
      <categories>
        <category>JS 核心篇</category>
      </categories>
      <tags>
        <tag>JS 核心篇</tag>
      </tags>
  </entry>
  <entry>
    <title>vue (2) 資料加工與處理</title>
    <url>/2024/05/01/2024-05-01-vue-data-handling/</url>
    <content><![CDATA[<h2 id="Methods-方法"><a href="#Methods-方法" class="headerlink" title="Methods 方法"></a>Methods 方法</h2><p>當在模板上需要計算複雜的運算式時，可以先將資料用 methods 計算後再放到模板上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  總金額共: &#123;&#123; <span class="title function_">subtotal</span>() &#125;&#125; 元</span><br><span class="line">  總金額共: &#123;&#123; <span class="title function_">subtotal</span>() &#125;&#125; 元</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// vue3 寫法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> vm = <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">price</span>: <span class="number">500</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">quantity</span>: <span class="number">50</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">subtotal</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">price</span> * <span class="variable language_">this</span>.<span class="property">quantity</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  vm.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>幾個要注意的點是:</p>
<ol>
<li>Vue.js的實體裡，可以透過 this 指回Vue.js的實體，所以可以透過 this.price 指回 data 內 price 的資料。</li>
<li>在模板上呼叫 methods 方法時要加上小括號，如 <code>subtotal()</code></li>
<li>在Vue.js的實體裡呼叫 subtotal 時，透過  <code>this.subtotal()</code> 即可。</li>
</ol>
<h2 id="Computed-計算屬性"><a href="#Computed-計算屬性" class="headerlink" title="Computed 計算屬性"></a>Computed 計算屬性</h2><p>除了可用 methods 處理資料外，vue 也提供computed計算屬性。和 methods不同的是，在模板上套用時不須加上 ()。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  總金額共: &#123;&#123; subtotal &#125;&#125; 元</span><br><span class="line">  總金額共: &#123;&#123; subtotal &#125;&#125; 元</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// vue3 寫法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> vm = <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">price</span>: <span class="number">500</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">quantity</span>: <span class="number">50</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">subtotal</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">price</span> * <span class="variable language_">this</span>.<span class="property">quantity</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  vm.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="computed-注意事項"><a href="#computed-注意事項" class="headerlink" title="computed 注意事項"></a>computed 注意事項</h2><p>當在 computed 裡使用會改變原本陣列的方法時，如 reverse() and sort()，應該先將原始陣列解構後再使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">return</span> numbers.<span class="title function_">reverse</span>() <span class="comment">// 錯誤</span></span><br><span class="line">+ <span class="keyword">return</span> [...numbers].<span class="title function_">reverse</span>() <span class="comment">// 正確</span></span><br></pre></td></tr></table></figure>

<h2 id="computed-setter"><a href="#computed-setter" class="headerlink" title="computed setter"></a>computed setter</h2><p>一般來說，computed預設只能讀取資料，也就是只有getter功能，將資料讀取後運算完return新的資料。<br>但我們可以用物件的形式，加入setter功能，來修改資料。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*HL7DpvW-aC3DglwAKmk9tA.png"></p>
<h2 id="Computed-和-Methods-使用差異"><a href="#Computed-和-Methods-使用差異" class="headerlink" title="Computed 和 Methods 使用差異"></a>Computed 和 Methods 使用差異</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  總金額共: &#123;&#123; subtotalComputed &#125;&#125; 元</span><br><span class="line">  總金額共: &#123;&#123; subtotalComputed &#125;&#125; 元</span><br><span class="line">  總金額共: &#123;&#123; subtotalComputed &#125;&#125; 元</span><br><span class="line"></span><br><span class="line">  總金額共: &#123;&#123; <span class="title function_">subtotalMethod</span>() &#125;&#125; 元</span><br><span class="line">  總金額共: &#123;&#123; <span class="title function_">subtotalMethod</span>() &#125;&#125; 元</span><br><span class="line">  總金額共: &#123;&#123; <span class="title function_">subtotalMethod</span>() &#125;&#125; 元</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>Computed: 計算的資料會暫存，直到觀察的屬性被更新，才會重新計算</li>
<li>Methods: 每呼叫一次，就計算一次。</li>
</ul>
<p>所以上面模板 console.log 出來會是如下，Computed 只執行一次，methods執行三次:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Computed</span></span><br><span class="line"><span class="title class_">Method</span></span><br><span class="line"><span class="title class_">Method</span></span><br><span class="line"><span class="title class_">Method</span></span><br></pre></td></tr></table></figure>

<p>所以 Computed 會效能優於 methods，但如果需要帶入參數的情形，還是只能用 methods。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>(5) CSS基礎篇 Block 與 Inline</title>
    <url>/2024/05/02/2024-05-02-css-display/</url>
    <content><![CDATA[<h2 id="什麼是display-顯示模式"><a href="#什麼是display-顯示模式" class="headerlink" title="什麼是display(顯示模式)?"></a>什麼是display(顯示模式)?</h2><p>CSS中的display屬性用於指定元素的渲染方式，即指定元素在網頁中如何顯示。這個屬性控制元素是以何種方式佔據空間，以及如何與其它元素相互作用。</p>
<h2 id="Block-區塊元素"><a href="#Block-區塊元素" class="headerlink" title="Block 區塊元素"></a>Block 區塊元素</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>block 區塊元素有以下特點</p>
<ul>
<li>元素寬度預設會佔滿一整行，無法與其他元素並列</li>
<li>元素即使設置了寬度,仍然是獨占一行</li>
<li>可以設定高度和寬度</li>
<li>可以設置 margin 和 padding 属性</li>
</ul>
<p>常見的預設為 block 元素標籤有: div、ul li、p、h1</p>
<h2 id="Inline-行內元素"><a href="#Inline-行內元素" class="headerlink" title="Inline 行內元素"></a>Inline 行內元素</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>inline 元素有以下特點</p>
<ul>
<li>元素可在同一行內呈現，可與其他元素並列</li>
<li>無法調整元素的寬高，元素的寬高由它的內容撐開</li>
<li>設置上下 margin 無效，左右 margin 有效<br>設置上下 padding 無效，左右 padding 有效</li>
</ul>
<p>常見的預設為 inline 元素標籤有: span、a、input、img</p>
<h2 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a>inline-block</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>inline-block 元素有以下特點</p>
<ul>
<li>可與其他元素並列</li>
<li>可以設定高度和寬度</li>
<li>可以設定 margin&#x2F;padding</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>vue (4) 模板與樣式綁定</title>
    <url>/2024/05/02/2024-05-02-vue-plate/</url>
    <content><![CDATA[<h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><p>vue 除了使用 <code>&#123;&#123; &#125;&#125;</code> 作為模板外，也可以使用指令處理模板</p>
<p>以下寫法相同:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不同的是如果在 p 標籤內加入文字，v-text 指令渲染的會無視標籤內原本內容，而 <code>&#123;&#123; &#125;&#125;</code> 則會顯示  hello world</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125; world<span class="tag">&lt;/<span class="name">p</span>&gt;</span> // hello world</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;text&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">p</span>&gt;</span> // hello</span><br></pre></td></tr></table></figure>

<h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><p>v-html 可以用來插入 html 結構</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;text&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// vue3 寫法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">text</span>: <span class="string">&#x27;&lt;h1&gt;我是標題&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  vm.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="樣式綁定"><a href="#樣式綁定" class="headerlink" title="樣式綁定"></a>樣式綁定</h2><p>利用v-bind 動態綁定class樣式， 縮寫為 <code>:class=&quot;&quot;</code></p>
<p><img src="https://miro.medium.com/v2/resize:fit:786/format:webp/1*2VboefM8vfn_GWvUT3FGGw.png"><br><img src="https://miro.medium.com/v2/resize:fit:582/format:webp/1*IqUoc-GVKDulbjjUZOKZbw.png"></p>
<p>利用物件的形式，可以傳入多筆class名稱，當值為true時，就會加入該class。class 加上單引號時 class 是字串，會去讀取已經定義好的 CSS 樣式，沒有加上單引號則會去取得在 Vue 定義的 data 資料。</p>
<h3 id="傳入整包物件"><a href="#傳入整包物件" class="headerlink" title="傳入整包物件"></a>傳入整包物件</h3><p><img src="https://miro.medium.com/v2/resize:fit:494/format:webp/1*igxw4lgT7nWsIE7XX7NFLw.png"><br><img src="https://miro.medium.com/v2/resize:fit:610/format:webp/1*nqKj1izdB95cMSnAFzmxMA.png"><br><img src="https://miro.medium.com/v2/resize:fit:750/format:webp/1*bANGu-nuh9_6vYdhObNauQ.png" alt="點擊時，切換rotate的true或false"></p>
<h3 id="computed-綁定"><a href="#computed-綁定" class="headerlink" title="computed 綁定"></a>computed 綁定</h3><p>也可以與 computed 綁定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">isActive</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">error</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">classObject</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">active</span>: <span class="variable language_">this</span>.<span class="property">isActive</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">error</span>,</span><br><span class="line">      <span class="string">&#x27;text-danger&#x27;</span>: <span class="variable language_">this</span>.<span class="property">error</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">error</span>.<span class="property">type</span> === <span class="string">&#x27;fatal&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用陣列操作"><a href="#使用陣列操作" class="headerlink" title="使用陣列操作"></a>使用陣列操作</h3><p><img src="https://miro.medium.com/v2/resize:fit:364/format:webp/1*wjcGULDsBuyvHogsUPBARw.png"><br><img src="https://miro.medium.com/v2/resize:fit:466/format:webp/1*tMr9ORyGumjBkkZccz1VFA.png"><br><img src="https://miro.medium.com/v2/resize:fit:750/format:webp/1*PN8epT69Qe2phy-PisO9xg.png"></p>
<p>可以在input元素上綁定陣列，當為true時， value的裡的className會被加入陣列。</p>
<h3 id="綁定行內樣式"><a href="#綁定行內樣式" class="headerlink" title="綁定行內樣式"></a>綁定行內樣式</h3><p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*POG49nWTKmXd0PrdKr9AYg.png"></p>
<p><img src="https://miro.medium.com/v2/resize:fit:786/format:webp/1*oZ-mvnX9aCaimssZ52os0w.png"></p>
<p>本次章節介紹的 :style 這種方法，通常是要做某些需要判斷的效果時，</p>
<p>比如:某些商品標題需要使用到不同顏色時，就會使用 :style 這個語法，讓商品標題，顯示的艷色和原本設定不同。</p>
<h3 id="與元件綁定"><a href="#與元件綁定" class="headerlink" title="與元件綁定"></a>與元件綁定</h3><p>當在元件加上 class ，並且元件只有一個根元素時，classes 會被傳入元件的根元素，並與根元素原本class合併。</p>
<p>舉例有一個元件並且元件只有一個 p 元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 元件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">class</span>=<span class="string">&quot;baz boo&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 元件內部元素 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar&quot;</span>&gt;</span>Hi!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因為外層class被傳入內層p，最後渲染結果是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar baz boo&quot;</span>&gt;</span>Hi!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>當元件有多個根元素時，可以用 <code>$attrs</code>，指定傳入位置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyComponent template using $attrs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;$attrs.class&quot;</span>&gt;</span>Hi!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a child component<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">class</span>=<span class="string">&quot;baz&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>會被渲染成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;baz&quot;</span>&gt;</span>Hi!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a child component<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue (5) 事件處理</title>
    <url>/2024/05/02/2024-05-02-vue-event/</url>
    <content><![CDATA[<h2 id="事件綁定-v-on"><a href="#事件綁定-v-on" class="headerlink" title="事件綁定 v-on"></a>事件綁定 v-on</h2><p>在 vue 裡面唯一操作事件的指令是 <code>v-on</code>，用法為 <code>v-on:[事件名稱]=&quot;運算式&quot;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span> v-<span class="attr">on</span>:click=<span class="string">&quot;plus&quot;</span>&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// vue3 寫法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> vm = <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>: <span class="number">500</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">plus</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  vm.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><code>v-on</code> 的簡寫為 @</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span> @click=<span class="string">&quot;plus&quot;</span>&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="event-物件"><a href="#event-物件" class="headerlink" title="event 物件"></a>event 物件</h2><p>js 中當監聽事件發生，EventListener 會去建立一個事件物件(event object)，裡面包含與這個事件有關的資訊。</p>
<p>在 v-on 中，事件觸發時若沒有指定參數，預設會將event物件當作參數傳入:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span> v-<span class="attr">on</span>:click=<span class="string">&quot;plus&quot;</span>&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// vue3 寫法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> vm = <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">plus</span>(<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  vm.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>在 methods 需要傳入參數時，可在模板中傳入 $event 來指定 event</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span> v-<span class="attr">on</span>:click=<span class="string">&quot;plus(1, $event)&quot;</span>&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// vue3 寫法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> vm = <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">plus</span>(<span class="params">num, $event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  vm.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="表單事件"><a href="#表單事件" class="headerlink" title="表單事件"></a>表單事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h4&gt;input change 事件&lt;/h4&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;onChange&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>可以在input上綁定 change 事件，當input 離開焦點時觸發事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h4&gt;form submit 事件&lt;/h4&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;submitForm&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>送出表單<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>在 form 表單上可以綁定 submit 事件，當使用者不論是按button 或者在 input 框內按 enter 都可以觸發。要注意的是 在 submit 加上 .prevent 修飾符，避免form表單預設跳轉頁面的行為。</p>
<h2 id="動態事件"><a href="#動態事件" class="headerlink" title="動態事件"></a>動態事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js &#123; event: &#x27;click&#x27;  &#125;</span></span><br><span class="line">&lt;h3&gt;動態事件 []&lt;/h3&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; @[event]=&quot;dynamicEvent&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;event&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>可以用 @[]，的方式動態加入事件名稱</p>
<h2 id="無法綁定在模組的事件"><a href="#無法綁定在模組的事件" class="headerlink" title="無法綁定在模組的事件"></a>無法綁定在模組的事件</h2><p>像是 scroll 或 resize 要綁定window底下的事件，因為無法用v-on來做綁定，我們可以在mounted()的生命週期鉤子裡，自行去做addEventListener。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*ppp25hvvlj3AQkBoMefmTw.png"></p>
<p>但要記得元素銷毀前，在 beforeDestory去將事件解除綁定</p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*MOitAvkVlJEH2hWJVbPKFg.png"></p>
<h2 id="事件修飾符"><a href="#事件修飾符" class="headerlink" title="事件修飾符"></a>事件修飾符</h2><ul>
<li>.stop: 阻止事件的傳遞，會調用 e.stopPropagation();</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*M2YpyBZtwEXyNpptvn5TVw.png"></p>
<ul>
<li>.pervent: 阻止預設事件，如阻止a連結的跳轉，表單傳送等。</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*hIkEbS52ZyJE5ETeQS15uA.png"></p>
<ul>
<li>.capture: 將事件偵聽改為捕獲模式，由外而內觸發</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*LLGDsOzF4HzGhB83M5iGSw.png"></p>
<ul>
<li>.self: 只有在e.target 是元素本身時，才會觸發</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*1b70S_m-yEk2fkj8ht2qiQ.png"></p>
<ul>
<li>.once: 事件只會觸發一次</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*HpR7tr_u7_p60xLOfizpbA.png"></p>
<h2 id="按鍵修飾符"><a href="#按鍵修飾符" class="headerlink" title="按鍵修飾符"></a>按鍵修飾符</h2><p><code>.enter, .tab, .delete, .esc, .space, .up, .down, .left, .right</code></p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*1QPcCQnZ8INQs0kTVTd4Ow.png"></p>
<h3 id="組合按鍵修飾符"><a href="#組合按鍵修飾符" class="headerlink" title="組合按鍵修飾符"></a>組合按鍵修飾符</h3><p>同時按下多個按鍵時才觸發 ， ex : shift + enter</p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*pHDLXUGnElYpUTV0skHMpw.png"></p>
<h3 id="特定按鍵觸發"><a href="#特定按鍵觸發" class="headerlink" title="特定按鍵觸發"></a>特定按鍵觸發</h3><p>只有按到特定按鍵時觸發，如按到 h時觸發</p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*SxgJFxGJGaAFzwwM98wxuQ.png"></p>
<h2 id="滑鼠修飾符"><a href="#滑鼠修飾符" class="headerlink" title="滑鼠修飾符"></a>滑鼠修飾符</h2><p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*FZe-BrfRgUet-jokBHdLLg.png"><br><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*ed7y0pVsHNIsK7zUlrPl3A.png"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue (3) 屬性綁定與表單操作</title>
    <url>/2024/05/02/2024-05-03-vue-directive/</url>
    <content><![CDATA[<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>Vue 裡提供了 v- 開頭的指令，可以套用在 html 上，當與指令搭配的值改變時，元素標籤的狀態也會跟著改變。</p>
<h2 id="v-bind-屬性綁定"><a href="#v-bind-屬性綁定" class="headerlink" title="v-bind 屬性綁定"></a>v-bind 屬性綁定</h2><p>v-bind 指令可以將 data 內的資料與 html 做綁定，常見的標籤屬性如 a 連結的 href 和 圖片的 src 都可以綁定<br>用法如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;customId&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>實際在瀏覽器渲染時會變成:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;item-id-1&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>v-bind 指令的簡寫為 <code>:</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:id</span>=<span class="string">&quot;customId&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>當 data 內的資料為 null 或 undefined 時，屬性會從標籤移除。</p>
<h2 id="Boolean-值綁定"><a href="#Boolean-值綁定" class="headerlink" title="Boolean 值綁定"></a>Boolean 值綁定</h2><p>v-bind 綁定的值如果是 boolean 時，當值為  truthy value 或是空字串時，屬性都會被渲染</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="動態指令"><a href="#動態指令" class="headerlink" title="動態指令"></a>動態指令</h2><p>可以用 [] 動態帶入指令的名稱。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- shorthand --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-model-表單綁定"><a href="#v-model-表單綁定" class="headerlink" title="v-model 表單綁定"></a>v-model 表單綁定</h2><p>常見的表單元素如 <code>&lt;select&gt; &lt;input&gt;</code> 等，可以透過 v-model 來做資料的雙向綁定，v-model 會根據不同表單類別來更新元素內容。</p>
<h3 id="input-文字框"><a href="#input-文字框" class="headerlink" title="input 文字框"></a>input 文字框</h3><p>在常見的 input 加上 v-model 後，此時輸入框會自動綁定 input 事件。當輸入框的文字被更改，會自動更新data內資料。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;edit me&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// vue3 寫法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  vm.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>v-model 其實就是語法糖，做的就是監聽 input 的 value，當value更改時觸發input事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">input</span>=<span class="string">&quot;event =&gt; text = event.target.value&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="select操作"><a href="#select操作" class="headerlink" title="select操作"></a>select操作</h3><p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*xrOqe84wqQInvBRcpV_IEg.png"><br><img src="https://miro.medium.com/v2/resize:fit:604/format:webp/1*OpRPvvV7Bn3o_-w3jCA9xA.png"></p>
<p>利用在select 標籤上加上v-model，可將option的值寫入變數內。</p>
<p>也可用 v-for 繪製 select 裡的 option</p>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*FO6LK3IlSyitQTAMNLC3CQ.png"></p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*IhZsOUO10nS1WFWg_oPORg.png"></p>
<h3 id="select多選方法"><a href="#select多選方法" class="headerlink" title="select多選方法"></a>select多選方法</h3><p><img src="https://miro.medium.com/v2/resize:fit:572/format:webp/1*qKRGDbICZJasWdhDne5ETw.png"></p>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*rJ6cVTLJJzUe0rwNT4_fPQ.png"></p>
<p>利用在 select 標籤中加入 mutiple屬性，就可以多選，此時v-model會將多筆資料寫入空陣列裡。</p>
<h3 id="checkbox-單選框"><a href="#checkbox-單選框" class="headerlink" title="checkbox 單選框"></a>checkbox 單選框</h3><p>checkbox 單選框搭配 true-value、false-value 可以直接將值寫到綁定的變數，如下為 checkAnswer2</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>checkbox 單選延伸<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>小明，你是吃飽沒？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; checkAnswer2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;check2&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;checkAnswer2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">true-value</span>=<span class="string">&quot;吃飽了&quot;</span> <span class="attr">false-value</span>=<span class="string">&quot;還沒&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;check2&quot;</span>&gt;</span>小明回覆<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="checkbox-複選框"><a href="#checkbox-複選框" class="headerlink" title="checkbox 複選框"></a>checkbox 複選框</h3><p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*97jnNjMymYbcWcXoZHS9hg.png"></p>
<p><img src="https://miro.medium.com/v2/resize:fit:532/format:webp/1*a6mUEzh4fFpJhQb7F5l7-g.png"></p>
<p>利用v-model將 value寫入 checkAnswer陣列裡，當被勾選時就加入陣列，取消勾選時value移除陣列。</p>
<h3 id="radio-單選框"><a href="#radio-單選框" class="headerlink" title="radio 單選框"></a>radio 單選框</h3><p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*CxnLrcfgrnb6_2mdHYScAw.png"></p>
<p><img src="https://miro.medium.com/v2/resize:fit:556/format:webp/1*SXeW5UYLbT6hcTL51ic0Ow.png"></p>
<p>利用v-model將 radio 的 value 寫入 radioAnswer。</p>
<h2 id="v-model修飾符"><a href="#v-model修飾符" class="headerlink" title="v-model修飾符"></a>v-model修飾符</h2><ul>
<li>v-model.lazy: 當input輸入完文字後，才會將值顯示。</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*OkR_BJTJ1jnLmmymo3rgeg.png"><br><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*fEYfFJwc1MVDSq_OM9-6ZQ.gif"></p>
<ul>
<li>v-model.number: 將值轉為數字型別</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*lQpSfwvelQSht2zk83u9xA.png"></p>
<ul>
<li>v-model.trim: 將前後多餘的空白刪除</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*MAV67_em8CmFY05vVDtnFQ.png"></p>
<p><a href="https://codepen.io/tim-chou/pen/wvoyKxN">表單範例</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue (6) 條件判斷與列表渲染</title>
    <url>/2024/05/03/2024-05-03-vue-if-else/</url>
    <content><![CDATA[<h2 id="條件判斷-v-if-v-show"><a href="#條件判斷-v-if-v-show" class="headerlink" title="條件判斷 v-if v-show"></a>條件判斷 v-if v-show</h2><p>若要依據資料顯示或隱藏元素，vue 提供了 v-if v-show 兩種做法:</p>
<h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>綁定的值為 truthy 則顯示，falsy 則隱藏。用的是 display: none 的方式來隱藏元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>同樣控制元素出現與否，可搭配 v-else-if、v-else 來判斷</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;count === 0&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;count &lt; 5&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如上依據條件來決定顯示 A 或 B 或 C。<br>若想一次判斷多個元素顯示與否，可在外層加上<code>&lt;template&gt;</code>包起來。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;count === 0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-v-if-或-v-show"><a href="#使用-v-if-或-v-show" class="headerlink" title="使用 v-if 或 v-show"></a>使用 v-if 或 v-show</h3><p>當判斷式結果經常更動時，推薦用 v-show，因為元素僅用 display 在切換，節省效能。<br>當判斷式的結果幾乎不變時，推薦用 v-if，因為 v-if 是將元素刪除後重新掛載，不適合用在經常切換狀態的情形。</p>
<h2 id="v-for-列表渲染"><a href="#v-for-列表渲染" class="headerlink" title="v-for 列表渲染"></a>v-for 列表渲染</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>v-for 指令會以 item in items 的語法進行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in foods&quot;</span>&gt;</span>&#123;&#123; index &#125;&#125; / &#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> vm = <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">foods</span>: [ <span class="string">&#x27;ramen&#x27;</span>, <span class="string">&#x27;hamburger&#x27;</span>, <span class="string">&#x27;rice&#x27;</span>, <span class="string">&#x27;meat&#x27;</span> ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  vm.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>上面列表會渲染出以下列表，其中 item 為陣列內容，index 則是索引</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">0 / ramen</span><br><span class="line">1 / hamburger</span><br><span class="line">2 / rice</span><br><span class="line">3 / meet</span><br></pre></td></tr></table></figure>

<h3 id="數字範圍"><a href="#數字範圍" class="headerlink" title="數字範圍"></a>數字範圍</h3><p>除了陣列與物件外，也可以在數字範圍內跑回圈</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">&quot;page in 10&quot;</span>&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure>

<p>如上會印出 1 到 10 的數字</p>
<h3 id="v-for-與-template"><a href="#v-for-與-template" class="headerlink" title="v-for 與 template"></a>v-for 與 template</h3><p>如果希望一次渲染多個 dom ，可在外層加上<code>&lt;template&gt;</code>包起來。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template v-<span class="keyword">for</span>=<span class="string">&quot;item in links&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>divider<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; item.age &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="v-for-的排序與過濾"><a href="#v-for-的排序與過濾" class="headerlink" title="v-for 的排序與過濾"></a>v-for 的排序與過濾</h3><p>若想在渲染列表時，進行排序或搜尋過濾時，v-for 本身雖沒有提供相關功能，但我們能將原始陣列先用 computed 篩選後，在去跑篩選後的陣列即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;num in bigNum&quot;</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> vm = <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">num</span>: [<span class="number">300</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">560</span>, <span class="number">666</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">bigNum</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">num</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">num</span> =&gt;</span> num &gt; <span class="number">500</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  vm.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="v-for-與-key"><a href="#v-for-與-key" class="headerlink" title="v-for 與 key"></a>v-for 與 key</h3><p>vue 是用 virtual dom 的方式更新畫面，virtual dom 是一個物件會記錄當前元件的狀態，當畫面有更新時，會去比較更新前後 virtual dom 的差異，並只更新有差異的資料。</p>
<p>換句話說當一個 dom 的資料沒有更新時，vue 會沿用這個 dom，可看以下例子:</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*L4PPCQaIrSqZt7XE1SzIkg.gif"></p>
<p>當 list 內資料順序更動時，div 結構沒有更動，只有文字資料做更新，input 則維持原來位置。</p>
<p>解決方法是在加上唯一值的 key，確保畫面重新渲染:</p>
<p><code>&lt;li v-for=&quot;item in bigNum&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt;</code></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue (7) vue 元件的生命週期</title>
    <url>/2024/05/04/2024-05-04-vue-lifecircle/</url>
    <content><![CDATA[<h2 id="生命週期"><a href="#生命週期" class="headerlink" title="生命週期"></a>生命週期</h2><p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*v0EMufIEqpt5XczaeS-psA.png"></p>
<p>Vue 的實體物件從建立、掛載、更新、銷毀的一連串過程稱為生命週期。在這個過程中，vue 提供了開發者在這些週期階段做對應處理的「鉤子函式」，介紹如下</p>
<ul>
<li><a href="https://vuejs.org/api/options-lifecycle.html">beforeCreated</a>:<br>Vue實體被建立，狀態和事件尚未初始化。</li>
<li><a href="https://vuejs.org/api/options-lifecycle.html#created">created</a>:<br>Vue實體被建立，狀態和事件初始化完成(可使用 data、props、computed等屬性)</li>
<li></li>
<li><a href="https://vuejs.org/api/options-lifecycle.html#mounted">mounted</a>:<br>Vue實體與模板(Dom節點)掛載完成</li>
<li><a href="https://vuejs.org/api/options-lifecycle.html#beforeupdate">beforeUpdated</a>:<br>狀態被更動，畫面更新前</li>
<li><a href="https://vuejs.org/api/options-lifecycle.html#updated">updated</a>:<br>狀態被更動，畫面也更新完成</li>
<li>beforeUnmounted: 元件銷毀前，還能取得data資料</li>
<li>unmounted: 元件已銷毀，不能取得data資料</li>
</ul>
<p>使用方式為，在vue實體加入生命週期鉤子函式，這樣vue在進入不同週期時，會觸發對應函式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">foods</span>: [ <span class="string">&#x27;ramen&#x27;</span>, <span class="string">&#x27;hamburger&#x27;</span>, <span class="string">&#x27;rice&#x27;</span>, <span class="string">&#x27;meat&#x27;</span> ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;unmounted&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  vm.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep alive"></a>keep alive</h2><p>如果希望元件在使用 v-if 進行切換時，能保有資料狀態時，可以在元件外層加上 keep alive，避免重新渲染。這在需要保留狀態（例如表單輸入、滾動位置等）的情況下非常有用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-if</span>=<span class="string">&quot;isShowing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 keep-alive; 時，有兩個額外的生命週期鉤子可供使用：</p>
<ul>
<li>activated: 當元件被激活時調用。</li>
<li>deactivated: 當元件被停用時調用。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是被快取的元件！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">activated</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;元件被激活&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">deactivated</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;元件被停用&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="include-屬性"><a href="#include-屬性" class="headerlink" title="include 屬性"></a>include 屬性</h3><p><code>&lt;keep-alive&gt;</code> 組件有兩個屬性：include 和 exclude，這些屬性用來控制哪些組件應該被緩存，哪些不應該被緩存。</p>
<p>include 屬性用來指定只有哪些組件應該被緩存。它可以是一個逗號分隔的字符串、正則表達式或一個陣列。</p>
<ul>
<li>逗號分隔的字符串：列出應該被緩存的組件名稱。</li>
<li>正則表達式：匹配應該被緩存的組件名稱。</li>
<li>陣列：列出應該被緩存的組件名稱。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=<span class="string">&quot;ComponentA,ComponentB&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>

<h3 id="exclude-屬性"><a href="#exclude-屬性" class="headerlink" title="exclude 屬性"></a>exclude 屬性</h3><p>exclude 屬性用來指定哪些組件不應該被緩存。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive exclude=<span class="string">&quot;ComponentC&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>


<h2 id="狀態更新與畫面的同步"><a href="#狀態更新與畫面的同步" class="headerlink" title="狀態更新與畫面的同步"></a>狀態更新與畫面的同步</h2><p>假設想在 資料更新後立刻去對 dom 進行操作，會無法法成功。響應式資料更新後，Vue 會先同步更新相依數據，再以非同步的方式去更新 DOM。換句話說，vue 會等所有資料都更新完後，才一口氣更新 dom。</p>
<p>這樣的好處是可以節省效能，如果開發者短時間內修改了好幾次的資料，其實 Vue 只需要渲染最終的結果，就能省去中間一直重新渲染 DOM 的效能。</p>
<p>所以 Vue 提供了 nextTick 這個 API，會是在 DOM 更新渲染完成後呼叫。</p>
<ul>
<li>使用 nextTick 時機: 當需要確認資料更新後，對dom進行操作時。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt; &#123;&#123; message &#125;&#125; &lt;/div&gt;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;原始值&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">editText</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;修改后的值1&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;修改后的值2&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;修改后的值3&#x27;</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$el</span>.<span class="property">textContent</span>) <span class="comment">// 这时候想获取页面最新的DOM节点，却发现获取到的是旧值</span></span><br><span class="line">      <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$el</span>.<span class="property">textContent</span>) <span class="comment">// 修改后的值3</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Button 按鈕設計</title>
    <url>/2024/05/05/2024-05-05-css-button/</url>
    <content><![CDATA[<h2 id="按鈕設計"><a href="#按鈕設計" class="headerlink" title="按鈕設計"></a>按鈕設計</h2><p>本單元參考 Pure.css 對按鈕的設計，來解說 css 按鈕設計上要注意的細節</p>
<p>按鈕基礎設定，如下圖。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*7ECXOQhqPGqnidOSzqaIlg.png"></p>
<ul>
<li>display:inline-block 讓按鈕能並排同時設定大小</li>
<li>white-space: nowrap 文字不換行。</li>
<li>text-align : center 文字置中</li>
<li>cursor: pointer 顯示滑鼠手指頭</li>
<li>urser-select : none 使用者不能選取按鈕文字</li>
</ul>
<h3 id="按鈕基礎樣式"><a href="#按鈕基礎樣式" class="headerlink" title="按鈕基礎樣式"></a>按鈕基礎樣式</h3><p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*1FjphYG9AKapFNeBjlVe1w.png"></p>
<p>設定文字大小、 padding、文字顏色、背景顏色、border-radius圓角設定</p>
<p>padding 使用em來設定，可以根據文字大小自動調整內距。</p>
<ul>
<li>按鈕 hover active樣式</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*yYjcH9hdxAeTHoRH548fCw.png"></p>
<ul>
<li>按鈕無效設定</li>
</ul>
<p>當今天想讓使用者無法點選按鈕時，像是表單沒填完等情況 可以用以下設定</p>
<p>加上 cursor:not-allowed 和 pointer-events:none 讓使用者無法點選</p>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*7zdBtJHTHJYRx1bcWnFMTA.png"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>(1) CSS響應式設計</title>
    <url>/2024/05/05/2024-05-05-css-rwd/</url>
    <content><![CDATA[<h2 id="CSS權重"><a href="#CSS權重" class="headerlink" title="CSS權重"></a>CSS權重</h2><p>CSS權重（specificity）是一個用來確定當多個CSS規則適用於同一個HTML元素時，哪一個規則的樣式將會被應用的概念。權重是由選擇器的特定性來確定的，而特定性則是由選擇器中使用的不同類型和數量的標記、類別和ID來計算的。</p>
<p>以下是一些權重的例子和解釋：</p>
<ul>
<li>元素選擇器：這是最低權重的選擇器，它只是一個HTML元素的名稱，例如p或div。它的權重是 1分。</li>
<li>類別選擇器：這是指定了一個元素的類別的選擇器，例如.class。它的權重是10分。</li>
<li>ID選擇器：  這是指定了一個元素的唯一ID的選擇器，例如#id。它的權重是 100 分。</li>
<li>內聯樣式： 這是直接在HTML元素中使用style屬性指定的樣式。它的特定性是1000 分。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 元素選擇器 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 類別選擇器 */</span></span><br><span class="line"><span class="selector-class">.intro</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ID選擇器 */</span></span><br><span class="line"><span class="selector-id">#main-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 內聯樣式 */</span></span><br><span class="line">&lt;<span class="selector-tag">p</span> style=&quot;<span class="attribute">color</span>: red;&quot;&gt;This is <span class="selector-tag">a</span> paragraph.&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure>

<p>當多個規則適用於同一個HTML元素時，CSS解析器將根據這些規則的權重來決定最終樣式。一般來說，權重越高的規則將被優先應用。如果兩個規則的權重相同，則後面出現的規則將優先應用，就是先看權重，再看先後順序。</p>
<h2 id="media-quary-語法"><a href="#media-quary-語法" class="headerlink" title="media quary 語法"></a>media quary 語法</h2><p> media quary 語法會根據設備的屏幕大小、類型、解析度或其他媒體特性來應用不同的樣式。這使得網站能夠在不同的裝置上提供最佳的使用體驗，包括桌面電腦、平板電腦、手機和印刷媒體等。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> 媒體類型 <span class="keyword">and</span> (媒體特性) &#123;</span><br><span class="line">  <span class="comment">/* 樣式規則 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在這個語法中，@media是CSS中用於定義媒體查詢的關鍵字，媒體類型是指定媒體類型的可選參數，例如screen（屏幕）或print（打印），媒體特性則是用於指定條件的表達式，例如 max-width: 600px（最大寬度600像素）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 先寫 PC 版型 在寫手機板型型 */</span></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ipad 直式下變更樣式 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* iphone11 直式下變更樣式 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">375px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="響應式-container-設計"><a href="#響應式-container-設計" class="headerlink" title="響應式 container 設計"></a>響應式 container 設計</h2><p>當需要一個固定寬度置中的容器時，可以加上 max-width 來設計。讓容器在手機板時自適應寬度，桌機板時則維持最大寬度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">960px</span>; // 最大寬度<span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="響應式圖片設計"><a href="#響應式圖片設計" class="headerlink" title="響應式圖片設計"></a>響應式圖片設計</h2><p>在圖片加上 max-width，確保圖片寬度大於容器時，寬度會自適應成100%，不會超過父層造成跑版，圖片寬度小於容器時，則維持原本寬度。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">	<span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">height</span>: auto;</span><br><span class="line">	<span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="兩欄式-RWD-實作"><a href="#兩欄式-RWD-實作" class="headerlink" title="兩欄式 RWD 實作"></a>兩欄式 RWD 實作</h2><p>使用 flex 實作 兩欄式 RWD，外層用flex使內層水平排列，內層兩欄設定寬度百分比，兩欄寬度加上gap 總共不能超過100%</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span>456<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-row</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">45%</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">2%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">58%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS響應式</tag>
      </tags>
  </entry>
  <entry>
    <title>(15) SCSS練功坊-元件模組化技巧</title>
    <url>/2024/05/07/2024-05-07-scss-btn-module/</url>
    <content><![CDATA[<h2 id="元件模組化技巧"><a href="#元件模組化技巧" class="headerlink" title="元件模組化技巧"></a>元件模組化技巧</h2><p>本篇講解 scss 元件如何模組化過程，以 button 元件為例:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先可以設定 .btn 的基礎樣式</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="comment">// 當元素是inline-block時 vertical-align:middle 可以使其垂直對齊。</span></span><br><span class="line">  <span class="attribute">vertical-align</span>: middle; </span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.375rem</span> <span class="number">0.75rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  user-select: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.375rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 設定顏色按鈕模組</span></span><br><span class="line"><span class="selector-class">.btn-primary</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#007bff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加大小按鈕模組</span></span><br><span class="line"><span class="selector-class">.btn-lg</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.25rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.3rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap (2) SCSS 客製化-變數更改</title>
    <url>/2024/05/15/2024-05-15-bootstrap-variables-2/</url>
    <content><![CDATA[<h2 id="Variable-defaults"><a href="#Variable-defaults" class="headerlink" title="Variable defaults"></a>Variable defaults</h2><p>在 bootstrap 裡的每個 variable 都有加上 !default 標籤，讓我們在自己的 scss 檔案裡能覆蓋這些樣式</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Required</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/functions&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客製化樣式要在 functions 之後，variables之前</span></span><br><span class="line"><span class="variable">$body-bg</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="variable">$body-color</span>: <span class="number">#111</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Required</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/variables&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/variables-dark&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/maps&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/mixins&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/root&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="網站主色更改"><a href="#網站主色更改" class="headerlink" title="網站主色更改"></a>網站主色更改</h2><p>在 bootstrap 資料夾裡 可以找到 __variable.scss 檔案，在裏頭可以修改變數來客製化</p>
<p>__variable.scss 檔案從上到下的順序為 色系 &gt; Options(預設樣式)&gt; Spacing(間隔)&gt; Body &gt; link (連結) &gt; breakpoints(斷點 ˇ)</p>
<p>在 __variable.scss 檔案 找到$theme-colors 來更改顏色</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$theme-colors</span>: (</span><br><span class="line">  <span class="string">&quot;primary&quot;</span>: <span class="number">#ffdf65</span>,</span><br><span class="line">  <span class="string">&quot;secondary&quot;</span>: <span class="variable">$secondary</span>,</span><br><span class="line">  <span class="string">&quot;success&quot;</span>: <span class="variable">$success</span>,</span><br><span class="line">) !default;</span><br></pre></td></tr></table></figure>

<p>要新增色系直接加在 $theme-colors 裡面即可</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$theme-colors</span>: (</span><br><span class="line">  <span class="string">&quot;primary&quot;</span>: <span class="number">#ffdf65</span>,</span><br><span class="line">  <span class="string">&quot;secondary&quot;</span>: <span class="variable">$secondary</span>,</span><br><span class="line">  <span class="string">&quot;success&quot;</span>: <span class="variable">$success</span>,</span><br><span class="line">  <span class="string">&quot;success2&quot;</span>: #ddff666,</span><br><span class="line">) !default;</span><br></pre></td></tr></table></figure>

<h2 id="options-預設樣式更改"><a href="#options-預設樣式更改" class="headerlink" title="options 預設樣式更改"></a>options 預設樣式更改</h2><p>在變數的 Options 區域可以更改全站設定</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$enable-caret</span>: true !default;</span><br><span class="line"><span class="variable">$enable-rounded</span>: true !default; <span class="comment">// 是否啟用元素的圓角</span></span><br><span class="line"><span class="variable">$enable-shadows</span>: false !default; <span class="comment">// 是否啟用元素的陰影</span></span><br><span class="line"><span class="variable">$enable-gradients</span>: false !default; <span class="comment">// 是否啟用元素的漸變背景</span></span><br><span class="line"><span class="variable">$enable-transitions</span>: true !default; <span class="comment">// 是否啟用 CSS 過渡效果</span></span><br><span class="line"><span class="variable">$enable-reduced-motion</span>: true !default;</span><br></pre></td></tr></table></figure>

<h2 id="Spacing-更改間距"><a href="#Spacing-更改間距" class="headerlink" title="Spacing 更改間距"></a>Spacing 更改間距</h2><p>在變數的 spacer 區域可以更改距離設定</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$spacer</span>: <span class="number">1rem</span> !default;</span><br><span class="line"><span class="variable">$spacers</span>: (</span><br><span class="line">  <span class="number">0</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="variable">$spacer</span> * <span class="number">0.25</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="variable">$spacer</span> * <span class="number">0.5</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="variable">$spacer</span>,</span><br><span class="line">  <span class="number">4</span>: <span class="variable">$spacer</span> * <span class="number">1.5</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="variable">$spacer</span> * <span class="number">3</span>,</span><br><span class="line">) !default;</span><br></pre></td></tr></table></figure>

<p>更改後跟距離有關係的 class 都會吃到效果，如 p-3 、mb-2 等</p>
<h2 id="body-更改全站樣式"><a href="#body-更改全站樣式" class="headerlink" title="body 更改全站樣式"></a>body 更改全站樣式</h2><p>body 區域可以更改全站預設樣式</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$body-text-align</span>: null !default;</span><br><span class="line"><span class="variable">$body-color</span>: <span class="variable">$gray-900</span> !default; <span class="comment">// 全站文字顏色</span></span><br><span class="line"><span class="variable">$body-bg</span>: <span class="variable">$white</span> !default; <span class="comment">// 全站背景顏色</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$body-secondary-color</span>: rgba(<span class="variable">$body-color</span>, <span class="number">0.75</span>) !default;</span><br><span class="line"><span class="variable">$body-secondary-bg</span>: <span class="variable">$gray-200</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="variable">$body-tertiary-color</span>: rgba(<span class="variable">$body-color</span>, <span class="number">0.5</span>) !default;</span><br><span class="line"><span class="variable">$body-tertiary-bg</span>: <span class="variable">$gray-100</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="variable">$body-emphasis-color</span>: <span class="variable">$black</span> !default;</span><br></pre></td></tr></table></figure>

<h2 id="文字大小設定"><a href="#文字大小設定" class="headerlink" title="文字大小設定"></a>文字大小設定</h2><p>文字的通用樣式預設無法響應式變化</p>
<p>需要更改 responsive 屬性，修改方式可參考 Bootstrap - Utilities API</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$utilities</span>: map-merge(</span><br><span class="line">  <span class="variable">$utilities</span>,</span><br><span class="line">  (</span><br><span class="line">    <span class="string">&quot;font-size&quot;</span>: map-merge(</span><br><span class="line">        map-get(<span class="variable">$utilities</span>, <span class="string">&quot;font-size&quot;</span>),</span><br><span class="line">        (</span><br><span class="line">          responsive: true,</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>然後在 關掉 RFS 功能</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$enable-rfs</span>: false !default;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$font-sizes</span>: (</span><br><span class="line">  <span class="number">1</span>: <span class="variable">$h1-font-size</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="variable">$h2-font-size</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="variable">$h3-font-size</span>,</span><br><span class="line">  <span class="number">4</span>: <span class="variable">$h4-font-size</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="variable">$h5-font-size</span>,</span><br><span class="line">  <span class="number">6</span>: <span class="variable">$h6-font-size</span>,</span><br><span class="line">) !default;</span><br></pre></td></tr></table></figure>

<h2 id="清除文字標籤下方空間"><a href="#清除文字標籤下方空間" class="headerlink" title="清除文字標籤下方空間"></a>清除文字標籤下方空間</h2><ul>
<li><code>&lt;h1&gt;~&lt;h6&gt;</code> 標籤：<code>$headings-margin-bottom</code></li>
<li><code>&lt;p&gt;</code>：<code>$paragraph-margin-bottom</code></li>
<li>字重：<code>$font-weight-base</code></li>
<li>行高：<code>$line-height-base</code></li>
</ul>
<h2 id="link-更改連結樣式"><a href="#link-更改連結樣式" class="headerlink" title="link 更改連結樣式"></a>link 更改連結樣式</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$link-color</span>: <span class="variable">$primary</span> !default; <span class="comment">//更改a連結顏色</span></span><br><span class="line"><span class="variable">$link-decoration</span>: underline !default; <span class="comment">// 更改a連結下底線</span></span><br><span class="line"><span class="variable">$link-shade-percentage</span>: <span class="number">20%</span> !default;</span><br><span class="line"><span class="variable">$link-hover-color</span>: shift-color(<span class="variable">$link-color</span>, <span class="variable">$link-shade-percentage</span>) !default;</span><br><span class="line"><span class="variable">$link-hover-decoration</span>: null !default;</span><br><span class="line"></span><br><span class="line"><span class="variable">$stretched-link-pseudo-element</span>: after !default;</span><br><span class="line"><span class="variable">$stretched-link-z-index</span>: <span class="number">1</span> !default;</span><br></pre></td></tr></table></figure>

<h2 id="修改元件樣式"><a href="#修改元件樣式" class="headerlink" title="修改元件樣式"></a>修改元件樣式</h2><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><ul>
<li>字重：<code>$btn-font-weight</code></li>
<li>間距：<code>$btn-padding-y</code>、<code>$btn-padding-x</code></li>
<li>圓角：<code>$btn-border-radius</code></li>
<li>disabled<ul>
<li><code>$btn-disabled-opacity</code></li>
</ul>
</li>
</ul>
<h3 id="表單"><a href="#表單" class="headerlink" title="表單"></a>表單</h3><ul>
<li>input:<ul>
<li>padding: <code>$input-btn-padding-y</code>、<code>$input-btn-padding-x</code></li>
<li>字重：<code>$input-font-weight</code></li>
<li>提示字顏色：<code>$input-placeholder-color</code></li>
<li>背景色：<code>$input-bg</code></li>
<li>圓角：<code>$input-border-radius</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>vue (8) Watch 監控變數</title>
    <url>/2024/05/17/2024-05-17-vue-watch/</url>
    <content><![CDATA[<h2 id="watch-操作方法"><a href="#watch-操作方法" class="headerlink" title="watch 操作方法"></a>watch 操作方法</h2><p><img src="https://miro.medium.com/v2/resize:fit:570/format:webp/1*XwrgXykbFxqGryA7siT_0A.png"></p>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*xdwgQiuFJgyAr0eGgnaLxw.png"></p>
<p>當watch 監控的變數產生變化時，執行裡頭的 function。</p>
<p>上圖例子: 當trigger被改為true時，觸發 watch裡的function，過3秒後trigger會被改為 false；</p>
<p>一般來說，當我們是要資料連動觸發一個行為，例如打api，等非同步事件時，或呼叫別的函示來處理等，要用watch來處理會比較好。</p>
<h2 id="watch-範例"><a href="#watch-範例" class="headerlink" title="watch 範例:"></a>watch 範例:</h2><p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*y-rM-MaSjDCEFZtv40HVCQ.png"></p>
<p>當 w 資料改變時，觸發computed裡的 width，當width有改變時，會被watch監聽，而去處發一個行為，也就是updateCanvas()</p>
<h2 id="watch-監測物件"><a href="#watch-監測物件" class="headerlink" title="watch 監測物件"></a>watch 監測物件</h2><p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*i4ag9iQ5kx6QAq3JO8GAJA.png"></p>
<p><img src="https://miro.medium.com/v2/resize:fit:408/format:webp/1*8EHFagMWeVY8gXVvFT0TFw.png"></p>
<p>我們可以對單一變數進行觀測，也可以觀測物件裡的值。</p>
<ol>
<li><p>觀測單一變數時，直接寫變數名稱:</p>
<p>參數裡 val代表新的值，oldVal代表舊的值</p>
</li>
<li><p>觀測物件裡的單一值時，要用 [‘obj.num’] 取得物件裡的值做觀測，當值改</p>
<p>變時，就執行函式裡的內容。</p>
</li>
<li><p>要觀察整個物件時，要用下圖最後一種寫法，handler就是要執行的函示，</p>
<p>deep:true，代表我要觀察得很深，就是整包物件。</p>
</li>
</ol>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*Tp-8ccO296Xe8geL4gd3Mg.png"></p>
<ol start="4">
<li>要觀察陣列裡物件時，也要使用deep的方式。</li>
</ol>
<p><img src="https://miro.medium.com/v2/resize:fit:720/format:webp/1*1l3mH9xqav2rtcKAPWObXw.png"></p>
<p><img src="https://miro.medium.com/v2/resize:fit:786/format:webp/1*amT3cagKUgjYm4z4s0q7uw.png"></p>
<h2 id="立刻執行-watch"><a href="#立刻執行-watch" class="headerlink" title="立刻執行 watch"></a><a href="https://vuejs.org/guide/essentials/watchers.html#eager-watchers">立刻執行 watch</a></h2><p>一般 watch 會等觀測的值變動時才會觸發裏頭的函式，如果想在元件載入就執行函式<br>可以加上 immediate</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="attr">question</span>: &#123;</span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">newQuestion</span>) &#123;</span><br><span class="line">      <span class="comment">// this will be run immediately on component creation.</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// force eager callback execution</span></span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="watch-和-computed-不同"><a href="#watch-和-computed-不同" class="headerlink" title="watch 和 computed 不同"></a>watch 和 computed 不同</h2><ul>
<li><p>Watch<br>監聽單一 “變數” 觸發事件，該函式可同時操作多個變數</p>
</li>
<li><p>Computed<br>監聽多個變數觸發事件，會產生一個值</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例子：監聽單一變數並更新多個變數</span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="title function_">productName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result3</span> = <span class="string">`媽媽買了 <span class="subst">$&#123;<span class="variable language_">this</span>.productName&#125;</span>，總共花費 <span class="subst">$&#123;<span class="variable language_">this</span>.productPrice&#125;</span> 元，另外這 <span class="subst">$&#123;<span class="variable language_">this</span>.productVegan ? <span class="string">&#x27;是&#x27;</span> : <span class="string">&#x27;不是&#x27;</span>&#125;</span> 素食的`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">productPrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result3</span> = <span class="string">`媽媽買了 <span class="subst">$&#123;<span class="variable language_">this</span>.productName&#125;</span>，總共花費 <span class="subst">$&#123;<span class="variable language_">this</span>.productPrice&#125;</span> 元，另外這 <span class="subst">$&#123;<span class="variable language_">this</span>.productVegan ? <span class="string">&#x27;是&#x27;</span> : <span class="string">&#x27;不是&#x27;</span>&#125;</span> 素食的`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">productVegan</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result3</span> = <span class="string">`媽媽買了 <span class="subst">$&#123;<span class="variable language_">this</span>.productName&#125;</span>，總共花費 <span class="subst">$&#123;<span class="variable language_">this</span>.productPrice&#125;</span> 元，另外這 <span class="subst">$&#123;<span class="variable language_">this</span>.productVegan ? <span class="string">&#x27;是&#x27;</span> : <span class="string">&#x27;不是&#x27;</span>&#125;</span> 素食的`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分別監聽 productName、productPrice、productVegan 來產生結果</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">result2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`媽媽買了 <span class="subst">$&#123;<span class="variable language_">this</span>.productName&#125;</span>，總共花費 <span class="subst">$&#123;<span class="variable language_">this</span>.productPrice&#125;</span> 元，另外這 <span class="subst">$&#123;<span class="variable language_">this</span>.productVegan ? <span class="string">&#x27;是&#x27;</span> : <span class="string">&#x27;不是&#x27;</span>&#125;</span> 素食的`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 同時監聽 productName、productPrice、productVegan 來產生結果</span></span><br></pre></td></tr></table></figure>

<h2 id="this-watch-方法"><a href="#this-watch-方法" class="headerlink" title="this.$watch() 方法"></a>this.$watch() 方法</h2><p>有些情況下，我們想依照需求決定是否建立wathcer時，可以用 this.$watch() 方式建立 watcher</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$watch(<span class="string">&#x27;question&#x27;</span>, <span class="function">(<span class="params">newQuestion</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap (1) SCSS 客製化-基礎環境建立</title>
    <url>/2024/05/15/2024-05-15-bootstrap-variables/</url>
    <content><![CDATA[<h2 id="基礎環境建立"><a href="#基礎環境建立" class="headerlink" title="基礎環境建立"></a>基礎環境建立</h2><p>首先開一個資料夾，裡面有 index.html，和一個 scss 資料夾，裏頭有三隻 scss 檔案，</p>
<p>scss 則透過 vscode 內建插件 live scsss complie 進行編譯。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*ljXEd-fRUB83xzOT2jmdSA.png"></p>
<h2 id="下載-Bootstrap"><a href="#下載-Bootstrap" class="headerlink" title="下載 Bootstrap"></a>下載 Bootstrap</h2><ol>
<li><p>來到 <a href="https://getbootstrap.com/docs/5.3/getting-started/download/">bootstrap 官網</a> 下載 bootstrap</p>
<p>選擇 source code 下載</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*hWjzmqta0Yq-KkkYho1KuA.png"></p>
</li>
<li><p>下載解壓縮後，在資料夾內找到 scss 資料夾，改名為 bootstrap 後，複製到一份自己的專案</p>
</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*OZLwWy0IKndZz9MiusJDXw.png"></p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*KQSWVUTCbvmLI0OI8Y43YA.png"></p>
<ol start="3">
<li>在 all.scss 中 import bootstrap</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// all.scss</span><br><span class="line">@import &#x27;./bootstrap/bootstrap.scss&#x27;;</span><br><span class="line">@import &#x27;./faq&#x27;;</span><br><span class="line">@import &#x27;./index&#x27;;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在 index.html 中 css 的連結要選擇加入 bootstrap 編譯後的檔案</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hant-TW&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style/all.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>我是按鈕<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/Ja5djoR.png"></p>
<ol start="6">
<li>到這邊就將 bootstrap 引入完成囉</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*GLy0I1Kvjl613M-R2tCFng.png"></p>
<h2 id="NPM-與-SCSS-下載方式"><a href="#NPM-與-SCSS-下載方式" class="headerlink" title="NPM 與 SCSS 下載方式"></a>NPM 與 SCSS 下載方式</h2><p>在專案中使用 npm 安裝 bootstrap</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install bootstrap@<span class="number">5.3</span><span class="number">.3</span></span><br></pre></td></tr></table></figure>

<p>安裝完後我們的專案中 node_modules 資料夾會有 bootstrap</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">your-project/</span><br><span class="line">├── scss/</span><br><span class="line">│   └── all.scss</span><br><span class="line">└── node_modules/</span><br><span class="line">│   └── bootstrap/</span><br><span class="line">│       ├── js/</span><br><span class="line">│       └── scss/</span><br><span class="line">└── index.html</span><br></pre></td></tr></table></figure>

<p>在自己專案的 all.scss 中引入</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Custom.scss</span></span><br><span class="line"><span class="comment">// Option B: Include parts of Bootstrap</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Include functions first (so you can manipulate colors, SVGs, calc, etc)</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/functions&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Include any default variable overrides here</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客製化用的 variables</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./helpers/variables&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Include remainder of required Bootstrap stylesheets (including any separate color mode stylesheets)</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/variables&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/variables-dark&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Include remainder of required parts</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/maps&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/mixins&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/root&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. Optionally include any other parts as needed</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/utilities&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/reboot&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/type&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/images&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/containers&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/grid&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/helpers&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. Optionally include utilities API last to generate classes based on the Sass map in `_utilities.scss`</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/utilities/api&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>在 scss 資料夾中新增 helpers 資料夾，將 node_modules 裡的 bootstrap&#x2F;scss&#x2F;variables 檔案複製一份放入。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*olXn8F_ZcW5yTtl4GCGdkA.png"></p>
]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>vue (9) vue 元件概念</title>
    <url>/2024/05/18/2024-05-18-vue-component/</url>
    <content><![CDATA[<h2 id="vue-元件概念"><a href="#vue-元件概念" class="headerlink" title="vue 元件概念"></a>vue 元件概念</h2><p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*kmzaHJCrVVVgrTwGexvSJA.png"></p>
<p>每個 Vue.js 的應用程式都是由vue的建構式建構的實體，在實體上，我們可以掛上不同的元件。 元件除了單一個呈現以外，也可以元件包元件。使用元件的好處是，每個元件都可以重複的使用，且是獨立的運作，便於程式碼的管理。</p>
<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*9pqERAQgRjIFVkW8Zqafzw.png"></p>
<p>像上圖中，三個元件的 myData都是獨立的，裡面的值沒有任何關聯。</p>
<h2 id="Component-全域註冊"><a href="#Component-全域註冊" class="headerlink" title="Component(全域註冊)"></a>Component(全域註冊)</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">text</span>: <span class="string">&#x27;外部元件文字&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">component</span>(<span class="string">&#x27;alert&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">text</span>: <span class="string">&#x27;內部文字&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">`&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &#123;&#123; text &#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;`</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  app.<span class="title function_">component</span>(<span class="string">&#x27;alert2&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">text</span>: <span class="string">&#x27;內部文字&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">`&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &#123;&#123; text &#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;`</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>元件需要在 createApp 後，mount 前進行定義</li>
<li>元件需指定一個名稱</li>
<li>元件結構與最外層的根元件結構無異（除了增加 Template 的片段）</li>
<li>元件另有 prop, emits 等資料傳遞及事件傳遞</li>
</ul>
<p>全域註冊的元件可以在 Vue.createApp 後接上 .component 方法來註冊，並在 app.mount(‘#app’); 之前可以掛在多個全域元件，只要注意元件的名稱要不同。</p>
<h3 id="全域註冊優缺點"><a href="#全域註冊優缺點" class="headerlink" title="全域註冊優缺點"></a><a href="https://vuejs.org/guide/components/registration.html#local-registration">全域註冊優缺點</a></h3><ul>
<li>優點: 能在 app 內的全部元件內使用，比較方便。</li>
<li>缺點: <ol>
<li>若元件被註冊，但完全沒使用，仍會被打包到專案(也就是沒有tree shaking)。</li>
<li>讓元件間彼此依賴的關係不清楚，大型專案會較難維護。</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 模板上引入元件</span><br><span class="line"><span class="tag">&lt;<span class="name">alert</span>&gt;</span><span class="tag">&lt;/<span class="name">alert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Component-區域註冊"><a href="#Component-區域註冊" class="headerlink" title="Component(區域註冊)"></a>Component(區域註冊)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> alert3 = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;內部文字3&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123; text &#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;外部元件文字&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    alert3</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>區域註冊的元件使用一個物件來建立，並在要引入的 component 中 加入 components 選項帶入元件名稱。區域註冊的元件只有在註冊的元件內可以使用。</p>
<h2 id="元件樣板及綁定方式"><a href="#元件樣板及綁定方式" class="headerlink" title="元件樣板及綁定方式"></a>元件樣板及綁定方式</h2><p>元件的 template 除了上面介紹的 直接寫在元件的 template 內以外，也可以使用</p>
<p>X-template建立模板:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/x-template&quot;</span> id=<span class="string">&quot;alert-template&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-primary&quot;</span> <span class="attr">role</span>=<span class="string">&quot;alert&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    x-template 所建立的元件</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在元件內帶入 text/x-template</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;alert2&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;#alert-template&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="元件註冊名稱"><a href="#元件註冊名稱" class="headerlink" title="元件註冊名稱"></a>元件註冊名稱</h2><p>當使用 SFC(single file component)或 string template 時，建議使用 PascalCase 來註冊元件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(</span><br><span class="line">  <span class="comment">// the registered name</span></span><br><span class="line">  <span class="string">&#x27;MyComponent&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>當元件以 PascalCase 註冊後，在 template 上可以使用</p>
<ol>
<li><MyComponent> : PascalCase</li>
<li><my-component>:  kebab-case</li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue (11) vue emit 外層發出事件</title>
    <url>/2024/05/18/2024-05-18-vue-emit/</url>
    <content><![CDATA[<h2 id="emit-說明"><a href="#emit-說明" class="headerlink" title="emit 說明"></a>emit 說明</h2><p>在 Vue.js 中，$emit 方法用於在子組件中向父組件發送自定義事件。這是一種子組件與父組件通信的常用方式。子組件使用 $emit 發出事件，父組件則使用 v-on 或 @ 指令來監聽這些事件並執行相應的處理邏輯。</p>
<h3 id="使用-emit-發送事件"><a href="#使用-emit-發送事件" class="headerlink" title="使用 $emit 發送事件"></a>使用 $emit 發送事件</h3><p>當子組件需要告知父組件某些狀態或行為時，可以在子組件中使用 $emit 方法來發送事件。$emit 方法接受兩個參數：</p>
<ul>
<li>事件名（必需）：一個字符串，表示事件的名稱。</li>
<li>傳遞的參數（可選）：可以是任意類型的數據，作為事件的附加信息。</li>
</ul>
<p>範例<br>假設我們有一個 ChildComponent 組件，它需要在按鈕被點擊時通知父組件。這可以通過 $emit 方法來實現：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;notifyParent&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">notifyParent</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;child-clicked&#x27;</span>, <span class="string">&#x27;Button was clicked!&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>父組件監聽事件</p>
<p>父組件可以使用 v-on 或 @ 指令來監聽子組件發出的事件，並在事件被觸發時執行相應的處理函數。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ChildComponent</span> @<span class="attr">child-clicked</span>=<span class="string">&quot;handleChildClick&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">ChildComponent</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleChildClick</span>(<span class="params">message</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// Output: Button was clicked!</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="emit-命名規範"><a href="#emit-命名規範" class="headerlink" title="$emit 命名規範"></a>$emit 命名規範</h2><p>使用小寫字母和短橫線（kebab-case）：</p>
<p>自定義事件名稱應使用小寫字母和短橫線（kebab-case）。這與 HTML 屬性命名規範保持一致，並且在模板中使用時更具可讀性。<br>例如：user-clicked、item-selected、form-submitted。</p>
<h2 id="emit-宣告"><a href="#emit-宣告" class="headerlink" title="emit 宣告"></a>emit 宣告</h2><p>在 component 內可以用 emits: 來宣告這個元件使用的 emit，開發時更了解元件該如何運作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;inFocus&#x27;</span>, <span class="string">&#x27;submit&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="emit-驗證"><a href="#emit-驗證" class="headerlink" title="$emit 驗證"></a>$emit 驗證</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;button-counter2&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">emits</span>: &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> num !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;add 事件參數型別須為number&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button type=&quot;button&quot; @click=&quot;$emit(&#x27;add&#x27;, &#x27;1&#x27;)&quot;&gt;Emit 驗證是否為數值&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在內層元件定義 emits 來並帶入箭頭函式驗證型別。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue (10) vue props 外層傳入資料</title>
    <url>/2024/05/18/2024-05-18-vue-props/</url>
    <content><![CDATA[<h2 id="Props-說明"><a href="#Props-說明" class="headerlink" title="Props 說明"></a>Props 說明</h2><p>當外部元件想將資料傳入內部元件時，可以用 props</p>
<p>在元件上使用 v-bind 動態將外層資料傳入 photo 元件內</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;photo :url=<span class="string">&quot;imgUrl&quot;</span>&gt;&lt;/photo&gt;</span><br></pre></td></tr></table></figure>

<p>在內元件使用 props 屬性來接收資料，這邊我們使用陣列帶入 props 名稱。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;photo&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;img :src=&quot;url&quot; class=&quot;img-thumbnail&quot; alt&gt;`</span>,</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;url&#x27;</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>沒有使用 v-bind 帶入的 props 都會被視為字串</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">title</span>=<span class="string">&quot;My journey with Vue&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="單向資料流的概念"><a href="#單向資料流的概念" class="headerlink" title="單向資料流的概念"></a>單向資料流的概念</h2><p>在 Vue.js 中，props（屬性）是父組件向子組件傳遞數據的主要方式。這個過程遵循單向資料流的原則，即數據只能從父組件傳遞到子組件，而不能反向傳遞。</p>
<ol>
<li>數據源於父組件：父組件通過 props 將數據傳遞給子組件。</li>
<li>子組件接收數據：子組件接收這些 props 並將其作為自己的本地數據來使用。</li>
<li>禁止修改 props：子組件不能直接修改從父組件接收到的 props。如果子組件需要修改數據，它應該通過向父組件發出事件請求父組件來改變數據，從而保持數據流的單向性。</li>
</ol>
<p>為什麼使用單向資料流</p>
<ol>
<li>數據管理簡單：單向資料流使得數據流動方向清晰可見，易於追蹤和管理。</li>
<li>狀態同步：父組件是數據的唯一來源，避免了多個組件之間的數據同步問題。</li>
<li>易於調試：因為數據流向單一且明確，調試起來更為簡單。</li>
</ol>
<h3 id="想修改props的解法"><a href="#想修改props的解法" class="headerlink" title="想修改props的解法"></a><a href="https://vuejs.org/guide/components/props.html#one-way-data-flow">想修改props的解法</a></h3><p>有兩種情況會想直接修改 porps 的值:</p>
<ol>
<li>當 props 被傳入當作元件初始值時，這種情形應該在子元件內用 data 去接收 props，避免直接修改 props。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;initialCounter&#x27;</span>],</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// counter only uses this.initialCounter as the initial value;</span></span><br><span class="line">      <span class="comment">// it is disconnected from future prop updates.</span></span><br><span class="line">      <span class="attr">counter</span>: <span class="variable language_">this</span>.<span class="property">initialCounter</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>傳入的 props 需要被加工處理時，可以用 computed 處理 props</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;size&#x27;</span>],</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// computed property that auto-updates when the prop changes</span></span><br><span class="line">    <span class="title function_">normalizedSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">size</span>.<span class="title function_">trim</span>().<span class="title function_">toLowerCase</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="props-命名規則"><a href="#props-命名規則" class="headerlink" title="props 命名規則"></a>props 命名規則</h2><ul>
<li>在 JavaScript 中使用駝峰命名法（camelCase）。</li>
<li>在模板（HTML）中使用短橫線命名法（kebab-case）。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 JavaScript 中</span></span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">userName</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 在模板中 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">:user-name</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="props-的型別"><a href="#props-的型別" class="headerlink" title="props 的型別"></a>props 的型別</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">props-type</span> <span class="attr">money</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">props-type</span>&gt;</span> // 字串型別</span><br><span class="line"><span class="tag">&lt;<span class="name">props-type</span> <span class="attr">:money</span>=<span class="string">&quot;money&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">props-type</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>當沒有使用 v-bind的方式傳入值時，傳入的一律為字串型別。若用v-bind 傳入時，則看傳入的變數是什麼型別。</p>
<ul>
<li>型別檢查</li>
</ul>
<p>在內部元件可以對傳入的 props 做型別檢查。</p>
<h3 id="基本類型檢查"><a href="#基本類型檢查" class="headerlink" title="基本類型檢查"></a>基本類型檢查</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">userName</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">userAge</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">isVisible</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  <span class="attr">items</span>: <span class="title class_">Array</span>,</span><br><span class="line">  <span class="attr">userData</span>: <span class="title class_">Object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="更詳細的類型檢查"><a href="#更詳細的類型檢查" class="headerlink" title="更詳細的類型檢查"></a>更詳細的類型檢查</h3><p>使用對象語法來提供更詳細的配置，例如，指定 prop 是否是必需的，並提供默認值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">userName</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">userAge</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">25</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">isVisible</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">items</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">    <span class="title function_">default</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">userData</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">    <span class="title function_">default</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Custom validator function</span></span><br><span class="line">  <span class="comment">// full props passed as 2nd argument in 3.4+</span></span><br><span class="line">  <span class="attr">propG</span>: &#123;</span><br><span class="line">    <span class="title function_">validator</span>(<span class="params">value, props</span>) &#123;</span><br><span class="line">      <span class="comment">// The value must match one of these strings</span></span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].<span class="title function_">includes</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多種類型檢查"><a href="#多種類型檢查" class="headerlink" title="多種類型檢查"></a>多種類型檢查</h3><p>有時候，一個 prop 可以接受多種不同類型的值，這時可以使用數組來指定多種類型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">value</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Boolean-Casting"><a href="#Boolean-Casting" class="headerlink" title="Boolean Casting"></a>Boolean Casting</h3><p>當 props 為 Boolean 時，會有不同的運行方式如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">disabled</span>: <span class="title class_">Boolean</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在畫面上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- equivalent of passing :disabled=&quot;true&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- equivalent of passing :disabled=&quot;false&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap (3) Breakpoints 與 container</title>
    <url>/2024/05/19/2024-05-19-bootstrap-customize-1/</url>
    <content><![CDATA[<h2 id="Breakpoints-講解"><a href="#Breakpoints-講解" class="headerlink" title="Breakpoints 講解"></a>Breakpoints 講解</h2><p>Bootstrap 在斷點的設計上始以手機優先的方式來設計。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Class</th>
<th>裝置尺寸</th>
<th>裝置</th>
</tr>
</thead>
<tbody><tr>
<td>Extra small</td>
<td>None</td>
<td>&lt;576px</td>
<td></td>
</tr>
<tr>
<td>small</td>
<td>sm</td>
<td>≥576px</td>
<td>手機橫向</td>
</tr>
<tr>
<td>Medium</td>
<td>md</td>
<td>≥768px</td>
<td>ipad直向</td>
</tr>
<tr>
<td>Large</td>
<td>lg</td>
<td>≥992px</td>
<td>桌機、ipad橫向、ipad pro直向</td>
</tr>
<tr>
<td>Extra large</td>
<td>xl</td>
<td>≥1200px</td>
<td>ipad pro橫向</td>
</tr>
<tr>
<td>Extra extra large</td>
<td>xxl</td>
<td>≥1400px</td>
<td></td>
</tr>
</tbody></table>
<p>當螢幕尺寸大於等於 576px 時 ，斷點 sm 就會啟用，大於等於 768px 時， 斷點 md 就會啟用。</p>
<h2 id="container"><a href="#container" class="headerlink" title="container"></a>container</h2><p>Bootstrap 的 container 是一個固定寬度且水平置中的容器。</p>
<p><img src="/../images/bootstrap-container.png"></p>
<p>預設 container 在 ≥768px 寬度為 720px，≥992px時 寬度為 720px 960px以此類推，目的是在左右各留有空間，以免太過壅擠。</p>
<p>若要滿版的 container 可以設定 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>vue (12) vue slot 插槽</title>
    <url>/2024/05/21/2024-05-21-vue-slot/</url>
    <content><![CDATA[<h2 id="slot-插槽"><a href="#slot-插槽" class="headerlink" title="slot 插槽"></a>slot 插槽</h2><p>Vue 元件裡的 slot插槽，讓我們可以在元件模板裡替換部分內容。以下介紹用法。</p>
<ul>
<li>沒有插槽的情況:</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*KtpgXCrhj_yMinFc0s3zlg.png"></p>
<p>vue元件內，如果沒有slot 插槽，則插入的標籤不會被顯示。</p>
<ul>
<li>單一插槽的情況</li>
</ul>
<p><img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*JG5zSGYtBc52DMj-CB4Dzg.png"><br><img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*nYEt8G_0FTjebSHoz3D3SA.png"></p>
<p>在元件內 加入<code>&lt;slot&gt;&lt;/slot&gt;</code>插槽，則 p 段落可被插入模板中。</p>
<ul>
<li>具名插槽:</li>
</ul>
<p>當我們的模板裡，有多個地方要替換內容時，可以使用具名插槽。</p>
<p>在外層用 v-slot: 指定插入的位置，default為預設插入位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般寫法</span></span><br><span class="line">&lt;card2&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span>我喜歡這張卡片<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">  &lt;!--  預設請加入 <span class="keyword">default</span>  --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span>這是卡片 2 號<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span>這是卡片腳<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/card2&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// # 縮寫</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">card2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span>我喜歡這張卡片<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!--  預設請加入 default  --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span>這是卡片 2 號<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span>這是卡片腳<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">card2</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div class=&quot;card&quot; style=&quot;width: 18rem;&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;card-header&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name=&quot;header&quot;&gt;元件 Header&lt;/slot&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;card-body&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;slot&gt;這段是預設的文字&lt;/slot&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;card-footer&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name=&quot;footer&quot;&gt;元件 Footer&lt;/slot&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span></span><br></pre></td></tr></table></figure>

<p>在元件內部 用 name 標示指定插槽位置，沒有加name則為預設插入位置。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue (13) mitt 跨元件資料傳遞</title>
    <url>/2024/05/21/2024-05-21-vue-mitt/</url>
    <content><![CDATA[<h2 id="mitt-傳遞資料"><a href="#mitt-傳遞資料" class="headerlink" title="mitt 傳遞資料"></a>mitt 傳遞資料</h2><p>當元件資料是內外曾在傳遞時，會使用 props 跟 emit，但如果是兩個不同的元件傳遞資料時，可以使用 mitt套件。</p>
<p>概念圖：</p>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20211004/201183479Qh0pKnAlN.png"></p>
<h2 id="套件安裝"><a href="#套件安裝" class="headerlink" title="套件安裝"></a>套件安裝</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save mitt</span><br></pre></td></tr></table></figure>

<p>引入套件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="title function_">mitt</span>();</span><br></pre></td></tr></table></figure>

<p>在要發出資料的元件內，用 emitter.emit(‘自訂名稱’, 資料) 來發出資料</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">product</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;蛋餅&#x27;</span>,</span><br><span class="line">      <span class="attr">price</span>: <span class="number">30</span>,</span><br><span class="line">      <span class="attr">vegan</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">sendData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    emitter.<span class="title function_">emit</span>(<span class="string">&#x27;send-product&#x27;</span>, <span class="variable language_">this</span>.<span class="property">product</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>在要接收資料的元件內，在生命週期 created 內用 emitter.on 監聽事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  emitter.<span class="title function_">on</span>(<span class="string">&#x27;send-product&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">item</span> = data;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite (1) 安裝</title>
    <url>/2024/05/25/2024-05-25-vite-1/</url>
    <content><![CDATA[<h2 id="什麼是-vite"><a href="#什麼是-vite" class="headerlink" title="什麼是 vite"></a>什麼是 vite</h2><p><img src="/../images/vite-1.png"></p>
<p>Vite 是一個由 Evan You（Vue.js 的創建者）開發的前端構建工具，可以將scss、vue、ejs 等檔案編譯成網頁能夠讀取的 html、js、css。Vite 使用原生的 ES 模塊功能，並且只在需要的時候進行編譯和轉換。這與傳統的打包工具（如 Webpack）不同，後者通常需要預先打包整個應用。</p>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p><a href="https://vitejs.dev/guide/">vite官網</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure>

<p>輸入指令後會跳出幾個選項，包括資料夾名稱、使用的框架、語言等</p>
<p><img src="/../images/vite-2.png"></p>
<p>選好後按指令安裝運行專案即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vite-project  // 移動到資料夾</span><br><span class="line">npm install     // 下載套件</span><br><span class="line">npm run dev     // 運行專案</span><br></pre></td></tr></table></figure>

<h2 id="專案結構說明"><a href="#專案結構說明" class="headerlink" title="專案結構說明"></a>專案結構說明</h2><p><img src="/../images/vite-3.png"></p>
<ul>
<li>node_module 資料夾:</li>
</ul>
<p>透過 npm install 下載道專案的套件會放在這，不會進入版本控制。</p>
<ul>
<li>public 資料夾:</li>
</ul>
<p>存放靜態資源文件、public 資料夾中的所有文件會被直接複製到最終構建的輸出目錄（通常是 dist），並且它們的文件名和結構保持不變，不會經過 Vite 的打包或處理。適合用來存放那些不需要經過打包處理的靜態文件，如圖片、favicon。</p>
<ul>
<li>src 資料夾:</li>
</ul>
<p>主要開發區域，這裡的檔案都會透過與 main.js 這支進入點產生關聯來被編譯。</p>
<h2 id="用-create-vue-建立專案"><a href="#用-create-vue-建立專案" class="headerlink" title="用 create-vue 建立專案"></a>用 create-vue 建立專案</h2><p>若要加入 vue-router、penia 等 vue 專案常用套件，可以在開始時選擇 create-vue</p>
<p><img src="/../images/vite-4.png"></p>
<p>接下來按照需求選擇要安裝的套件後，npm run dev 運行專案即可。</p>
<p><img src="/../images/vite-5.png"></p>
]]></content>
      <categories>
        <category>vite</category>
      </categories>
      <tags>
        <tag>vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite (3) 部屬 vite 專案</title>
    <url>/2024/05/26/2024-05-26-vite-git/</url>
    <content><![CDATA[<h2 id="github-pages"><a href="#github-pages" class="headerlink" title="github pages"></a>github pages</h2><p>先將專案用 <code>npm run build</code> 編譯後，上傳到 github上。</p>
<p><img src="/../images/vite-11.png"></p>
<p>之後的詳細步驟參考<a href="https://dev.to/dwtoledo/deploying-a-vite-app-on-github-pages-using-github-actions-with-github-secrets-1hn0">此文章</a></p>
]]></content>
      <categories>
        <category>vite</category>
      </categories>
      <tags>
        <tag>vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite (2) 編譯專案</title>
    <url>/2024/05/26/2024-05-26-vite-1/</url>
    <content><![CDATA[<h2 id="編譯專案"><a href="#編譯專案" class="headerlink" title="編譯專案"></a>編譯專案</h2><p>當成專案完成後，可以用 <code>npm run build</code> 來編譯專案，編譯完成會放在 dist 資料夾</p>
<p><img src="/../images/vite-6.png"></p>
<h2 id="專案路徑調整"><a href="#專案路徑調整" class="headerlink" title="專案路徑調整"></a>專案路徑調整</h2><p>如果直接將 dist 資料夾裡的 html 用 live-server 的方式開啟</p>
<p><img src="/../images/vite-7.png"></p>
<p>會出現找不到網頁的情形</p>
<p><img src="/../images/vite-8.png"></p>
<p>因為目前 router 的設計不是瀏覽器可以運行的 router，我們可以回到專案router 的 index.html</p>
<p><img src="/../images/vite-9.png"></p>
<p>將 方法替換為 <code>createWebHashHistory</code>，這會將路由模式 切換成 hash 模式，也就是由前端控制的路由</p>
<p><a href="https://book.vue.tw/CH4/4-2-route-settings.html">路由模式說明</a></p>
<p>設定後重新 <code>npm run build</code> 來編譯專案，此時再去將 dist 資料夾裡的 html 用 live-server 的方式開啟也不會產生錯誤了。</p>
<h2 id="環境變數設定"><a href="#環境變數設定" class="headerlink" title="環境變數設定"></a>環境變數設定</h2><p><img src="/../images/vite-10.png"></p>
<p>因為專案開發時的 api 路徑會和正式產品的 api 路徑不同，所以不會將 api 路徑寫死在專案裡，而是透過環境變數切換。</p>
<ul>
<li><p>通用的環境變數:</p>
<p>在專案根目錄建立 .env 檔案，使用 VITE_ 建立環境變數</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VITE_PATH=https://randomuser.me/api/</span><br></pre></td></tr></table></figure>

<p>在vue元件中用 import.meta 引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_PATH</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>開發用的環境變數:</p>
<p>在專案根目錄建立 .env.development 檔案，這隻檔案的變數只有在開發時能讀取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VITE_TEXT=這是開發中環境</span><br></pre></td></tr></table></figure>
</li>
<li><p>產品用的環境變數</p>
<p>在專案根目錄建立 .env.production 檔案，這隻檔案的變數只有 npm run build 後的產品中能讀取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VITE_TEXT=這是產品中環境</span><br></pre></td></tr></table></figure></li>
</ul>
<p>如上都有 VITE_TEXT 這個變數，開發時會讀取到 ‘這是開發中環境’，編譯後則會讀到 ‘這是產品中環境’。</p>
]]></content>
      <categories>
        <category>vite</category>
      </categories>
      <tags>
        <tag>vite</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router (1) 前端路由與後端路由</title>
    <url>/2022/09/21/2024-06-04-vue-router-0/</url>
    <content><![CDATA[<h2 id="SSR-server-side-render-伺服器端渲染"><a href="#SSR-server-side-render-伺服器端渲染" class="headerlink" title="SSR (server side render) 伺服器端渲染"></a>SSR (server side render) 伺服器端渲染</h2><p><img src="https://static.coderbridge.com/img/techbridge/images/huli/split/server.png"></p>
<p>SSR (Server-Side Rendering，伺服器端渲染) 表示伺服器收到前端的請求之後，伺服器會向 model(資料庫)要對應的資料，把資料帶給 view。view 再回傳一份完整的 HTML 檔案（這個動作就叫做 render），而瀏覽器拿到之後，只要顯示出來就好。</p>
<h2 id="CSR-client-side-render-客戶端渲染"><a href="#CSR-client-side-render-客戶端渲染" class="headerlink" title="CSR (client side render) 客戶端渲染"></a>CSR (client side render) 客戶端渲染</h2><p><img src="/../images/js/vue/vue-1.png"></p>
<p>client side render 指的就是當前端拿到資料以後，才用 JavaScript 動態的把那些內容填到網頁上面。</p>
<p>CSR 的 HTML 只需要一個簡單的根節點：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>至於節點內的資料，會由 JavaScript 打 api 去跟資料庫要資料後，渲染到畫面上。</p>
<p>當在 csr 渲染的網站，我用右鍵 -&gt; 檢視原始碼，會發現幾乎是空的：</p>
<p><img src="https://static.coderbridge.com/img/techbridge/images/huli/split/ele2.png"></p>
<p>因為我們是在執行期間「動態」去跟後端伺服器拿資料，再動態產生你看到的那些元素，而那些元素原本不存在 index.html 裡面。</p>
<h3 id="前後端分離"><a href="#前後端分離" class="headerlink" title="前後端分離"></a>前後端分離</h3><p>使用 csr 渲染的情況下，後端只要專注於處理資料庫的資料和制定 API 文件，提供前端需要的資料就好。<br>前端工程師利用 ajax 從後端拿資料，並且在自己這邊用 JavaScript 動態產生內容。</p>
<h2 id="後端路由"><a href="#後端路由" class="headerlink" title="後端路由"></a>後端路由</h2><p>網站的伺服器會依照網址的結構，跟資料庫撈資料後，回傳對應的內容給瀏覽器渲染，這樣的機制稱為「網站路由」，管理網站路由的程式稱為 router。</p>
<h2 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h2><p>在使用 csr 渲染時，因為只有 index.html 檔案，就必須由前端進行路由管理。因為前端只有一個檔案，所以網址可能像是這樣：<a href="https://example.com/index.html%E3%80%82%E4%BB%A5vue-router%E7%9A%84%E5%85%A9%E7%A8%AE%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F%E4%BE%86%E8%A7%A3%E8%AA%AA">https://example.com/index.html。以vue-router的兩種路由模式來解說</a>:</p>
<h3 id="Hash-模式"><a href="#Hash-模式" class="headerlink" title="Hash 模式"></a>Hash 模式</h3><p>在 hash 模式中，URL 的路徑會包含一個 # 符號。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//example.com/#/about</span></span><br></pre></td></tr></table></figure>

<p>在這個 URL 中，#&#x2F;about 是 Vue Router 管理的部分，hash 原本在網頁中是代表「錨點」的意思，舉例說明:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/#app</span><br></pre></td></tr></table></figure>

<p>當瀏覽器開啟以上網址時，會自動捲動到 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 錨點元素的位置。</p>
<p>hash 模式利用 URL 的 hash（#）部分來模擬一個完整的 URL，當 hash 改變時，頁面不會重新加載，同時也會增加一筆紀錄到瀏覽歷史裡，我們可以透過「上一頁」、「下一頁」來切換不同錨點位置。這使得單頁應用（SPA）能夠在不重新加載頁面的情況下進行導航。</p>
<p>優點:</p>
<ol>
<li>簡單易用：不需要服務器配置，直接在 URL 中使用 # 符號即可，URL 變更不會發送請求到服務器。</li>
<li>廣泛的瀏覽器支持：所有瀏覽器，包括舊版本的瀏覽器，都支持 hash 模式。</li>
<li>方便開發和測試：由於不需要服務器配置，開發和測試環境下更簡單便捷。</li>
</ol>
<p>缺點:</p>
<ol>
<li>不美觀的 URL：URL 包含 # 符號，例 <a href="http://example.com/#/about%EF%BC%8C%E4%B8%8D%E5%A4%A0%E6%B8%85%E6%99%B0%E5%92%8C%E5%B0%88%E6%A5%AD%E3%80%82">http://example.com/#/about，不夠清晰和專業。</a></li>
<li>SEO 不友好：搜索引擎一般不會索引 # 之後的部分，對 SEO 不利。</li>
</ol>
<h3 id="History-Api-模式"><a href="#History-Api-模式" class="headerlink" title="History Api 模式"></a>History Api 模式</h3><p>Vue Router 的 history 模式是 Vue.js 應用程式的另一種路由模式，與 hash 模式不同，history 模式利用了 HTML5 的 History API 來實現無刷新導航，提供更美觀且更符合傳統網站的 URL 格式。</p>
<p>在 history 模式中，URL 不會包含 # 符號。例如：˙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/about</span><br></pre></td></tr></table></figure>

<p>History API 通過 pushState 和 replaceState 提供了一種無需刷新頁面即可改變 URL 和管理歷史記錄的方法。</p>
<p>優點:</p>
<ol>
<li>美觀的 URL：URL 不包含 # 符號，更清晰和專業，例如 <a href="http://example.com/about%EF%BC%8C%E5%B0%8D">http://example.com/about，對</a> SEO 更友好。</li>
<li>SEO 優化：搜索引擎可以抓取和索引這些 URL，有助於提高網站的搜索引擎排名。</li>
</ol>
<p>缺點:</p>
<ol>
<li><p>後端需相對應的配置: 沒有後端的配置，使用者直接輸入網址，就會被導到 404 error 頁面。因此在後端的配置必須加上「如果 URL 匹配不到靜態資源，就全都導到 index 頁面」的程式。</p>
</li>
<li><p>不支援舊瀏覽器：對於不支援 HTML5 History API 的舊瀏覽器無法使用。</p>
</li>
<li><p>初始加載時間較長：由於需要服務器處理 URL，初次加載時間可能比 hash 模式長。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap (4) 格線系統</title>
    <url>/2024/06/04/2024-06-04-bootstrap-grid/</url>
    <content><![CDATA[<h2 id="格線基礎解說"><a href="#格線基礎解說" class="headerlink" title="格線基礎解說"></a>格線基礎解說</h2><p><img src="/../images/bootstrap/bootstrap-col-6.png"></p>
<p>Bootstrap 格線系統採用12欄的設計，因為12是最多數的公倍數。</p>
<ul>
<li>total width: container 總寬度</li>
<li>column width: 每欄寬度</li>
<li>gutter width: 欄與欄間距。</li>
</ul>
<p>Bootstrap 格線系統是應用 flexbox 來排版，讓內部的 col 能夠水平排列。<br>使用上最外層一定會有一個 container，再來是 row，再來是 col。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      Column</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      Column</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      Column</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面是一個水平置中的三欄欄寬範例，功能說明如下:</p>
<ul>
<li>container: 水平置中容器，並在左右留有padding。</li>
<li>row: 設定 flex 讓 col 能水平排列，並設有左右負值的 margin 讓 左右的 col 能貼齊 container。</li>
<li>col: 每欄左右設有 padding來製造欄與欄的間距，預設是12欄來做設計。</li>
</ul>
<p><img src="/../images/bootstrap-col.png"></p>
<h2 id="自動格線系統"><a href="#自動格線系統" class="headerlink" title="自動格線系統"></a>自動格線系統</h2><p>在 row 裡面直接使用 .col 來設計，每欄會自動分配欄寬。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 三欄式版面設計</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      1 of 3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      2 of 3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      3 of 3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自動格線也可以搭配固定寬度的 col，如下 col-6 固定50%寬度，其餘欄位自動分配寬度。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      1 of 3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">      2 of 3 (wider)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      3 of 3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="本身內容寬度的-col"><a href="#本身內容寬度的-col" class="headerlink" title="本身內容寬度的 col"></a>本身內容寬度的 col</h3><p>如果想讓 col 的寬度是依照本身元素內容的寬度的話，可以設定 <code>col-&#123;breakpoint&#125;-auto</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      1 of 3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-auto&quot;</span>&gt;</span></span><br><span class="line">      Variable width content</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col col-lg-2&quot;</span>&gt;</span></span><br><span class="line">      3 of 3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../images/bootstrap-col-2.png"></p>
<h2 id="響應式設計"><a href="#響應式設計" class="headerlink" title="響應式設計"></a>響應式設計</h2><p>col 的設計也支援響應式斷點</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Stack the columns on mobile by making one full-width and the other half-width --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span>.col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6 col-md-4&quot;</span>&gt;</span>.col-6 .col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 手機版為兩欄 50%寬度， 平板為三欄 33% 寬度 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6 col-md-4&quot;</span>&gt;</span>.col-6 .col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6 col-md-4&quot;</span>&gt;</span>.col-6 .col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6 col-md-4&quot;</span>&gt;</span>.col-6 .col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 永遠都是 50% 寬度 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span>.col-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span>.col-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">di</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="row-columns"><a href="#row-columns" class="headerlink" title="row-columns"></a>row-columns</h2><p>除了在 col 上設定欄寬以外，另一種做法是在 row 上用 <code>row-cols-*</code>設定欄數。</p>
<p>手機版為1欄滿版，手機橫向為 2 欄、平板以上為四欄</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row row-cols-1 row-cols-sm-2 row-cols-md-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>Column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>Column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>Column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>Column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="巢狀格線"><a href="#巢狀格線" class="headerlink" title="巢狀格線"></a>巢狀格線</h2><p>在 col 內也可以用 row 新開一個內部的格線系統。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-3&quot;</span>&gt;</span></span><br><span class="line">      Level 1: .col-sm-3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-9&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-8 col-sm-6&quot;</span>&gt;</span></span><br><span class="line">          Level 2: .col-8 .col-sm-6</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4 col-sm-6&quot;</span>&gt;</span></span><br><span class="line">          Level 2: .col-4 .col-sm-6</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="scss-客製化格線"><a href="#scss-客製化格線" class="headerlink" title="scss 客製化格線"></a>scss 客製化格線</h2><p>透過修改 bootstrap 的 scss 可以客製化格線系統。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$grid-columns</span>: <span class="number">12</span> !default; <span class="comment">// 預設欄數為12欄</span></span><br><span class="line"><span class="variable">$grid-gutter-width</span>: <span class="number">1.5rem</span> !default; <span class="comment">// 預設欄間距</span></span><br><span class="line"><span class="variable">$grid-row-columns</span>: <span class="number">6</span> !default; <span class="comment">// 使用 .row-cols-* 時最多欄數限制</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap (5) 格線系統排列</title>
    <url>/2024/06/05/2024-06-05-bootstrap-grid-align/</url>
    <content><![CDATA[<h2 id="垂直對齊方法"><a href="#垂直對齊方法" class="headerlink" title="垂直對齊方法"></a>垂直對齊方法</h2><p>在 .row 上用  <code>align-items-*</code> 垂直對齊元素</p>
<h3 id="往上對齊"><a href="#往上對齊" class="headerlink" title="往上對齊"></a>往上對齊</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row align-items-start&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      One of three columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      One of three columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      One of three columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="垂直對齊"><a href="#垂直對齊" class="headerlink" title="垂直對齊"></a>垂直對齊</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row align-items-center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      One of three columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      One of three columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      One of three columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="往下對齊"><a href="#往下對齊" class="headerlink" title="往下對齊"></a>往下對齊</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row align-items-end&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      One of three columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      One of three columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      One of three columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="對齊單一子元素"><a href="#對齊單一子元素" class="headerlink" title="對齊單一子元素"></a>對齊單一子元素</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col align-self-start&quot;</span>&gt;</span></span><br><span class="line">      One of three columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col align-self-center&quot;</span>&gt;</span></span><br><span class="line">      One of three columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col align-self-end&quot;</span>&gt;</span></span><br><span class="line">      One of three columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="水平對齊"><a href="#水平對齊" class="headerlink" title="水平對齊"></a>水平對齊</h2><p>在 .row 上用  <code>justify-content-*</code> 水平對齊元素</p>
<p><img src="/../images/bootstrap-col-3.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row justify-content-start&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">      One of two columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">      One of two columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row justify-content-center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">      One of two columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">      One of two columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row justify-content-end&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">      One of two columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">      One of two columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row justify-content-around&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">      One of two columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">      One of two columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row justify-content-between&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">      One of two columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">      One of two columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row justify-content-evenly&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">      One of two columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">      One of two columns</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="column-斷行"><a href="#column-斷行" class="headerlink" title="column 斷行"></a>column 斷行</h2><p>當你想讓 col 斷行到下一行，又不想加入新的一列 .row 時，可以在 col 跟 col 間用 w-100的div</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6 col-sm-3&quot;</span>&gt;</span>.col-6 .col-sm-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6 col-sm-3&quot;</span>&gt;</span>.col-6 .col-sm-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Force next columns to break to new line --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w-100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6 col-sm-3&quot;</span>&gt;</span>.col-6 .col-sm-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6 col-sm-3&quot;</span>&gt;</span>.col-6 .col-sm-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><p>在 col 使用 .order-* 來控制 col 顯示順序，預設提供 order 1 - 5 可以設定。<br>order 值越小的會往前排。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      First in DOM, no order applied</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col order-5&quot;</span>&gt;</span></span><br><span class="line">      Second in DOM, with a larger order</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col order-1&quot;</span>&gt;</span></span><br><span class="line">      Third in DOM, with an order of 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>.order-first: 會套用 order: -1，讓元素排到最前面。</li>
<li>.order-last : 會套用 order: 6，讓元素排到最後面。</li>
</ul>
<h2 id="Offsetting-推移-col"><a href="#Offsetting-推移-col" class="headerlink" title="Offsetting 推移 col"></a>Offsetting 推移 col</h2><p>在 col 上用 offset-*，讓 col 增加 margin-left 向左推移。<br>舉例: .offset-md-4 會向左推移四個單位</p>
<p><img src="/../images/bootstrap-col-4.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 offset-md-4&quot;</span>&gt;</span>.col-md-4 .offset-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 offset-md-3&quot;</span>&gt;</span>.col-md-3 .offset-md-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 offset-md-3&quot;</span>&gt;</span>.col-md-3 .offset-md-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6 offset-md-3&quot;</span>&gt;</span>.col-md-6 .offset-md-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="row-以外使用-col"><a href="#row-以外使用-col" class="headerlink" title="row 以外使用 col"></a>row 以外使用 col</h2><p>.col-* 也可以在 row 以外使用來設定元素的寬度，當在row 以外使用時，col 內不會有預設的padding。</p>
<p><img src="/../images/bootstrap/bootstrap-col-5.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3 p-3 mb-2&quot;</span>&gt;</span></span><br><span class="line">  .col-3: width of 25%</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-9 p-3&quot;</span>&gt;</span></span><br><span class="line">  .col-sm-9: width of 75% above sm breakpoint</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="gutter"><a href="#gutter" class="headerlink" title="gutter"></a>gutter</h2><p><img src="/../images/bootstrap/bootstrap-col-7.png"></p>
<p>gutter 是指每欄 col 間的間距，是由每欄左右兩邊的padding形成，預設值是 1.5rem (24px)。</p>
<h3 id="水平-gutter"><a href="#水平-gutter" class="headerlink" title="水平 gutter"></a>水平 gutter</h3><p>在 row 上使用 <code>.gx-*</code> 來調整欄間距。當加大了欄間距，可能需要在 contianer 增加 padding，以免出現水平溢出(x軸)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container px-4 text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row flex-row-reverse gx-5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-3&quot;</span>&gt;</span>Custom column padding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-3&quot;</span>&gt;</span>Custom column padding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或是在 container 上增加 overflow-hidden 也可以</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container overflow-hidden text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row gx-5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-3&quot;</span>&gt;</span>Custom column padding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-3&quot;</span>&gt;</span>Custom column padding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="垂直-gutter"><a href="#垂直-gutter" class="headerlink" title="垂直 gutter"></a>垂直 gutter</h3><p>在 row 上使用 <code>.gy-*</code> 來調整垂直欄間距。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container overflow-hidden text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row gy-5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-3&quot;</span>&gt;</span>Custom column padding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-3&quot;</span>&gt;</span>Custom column padding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-3&quot;</span>&gt;</span>Custom column padding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-3&quot;</span>&gt;</span>Custom column padding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="垂直與水平-gutter"><a href="#垂直與水平-gutter" class="headerlink" title="垂直與水平 gutter"></a>垂直與水平 gutter</h3><p>在 row 上使用 <code>.g-*</code> 來同時調整垂直與水平欄間距。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row g-2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-3&quot;</span>&gt;</span>Custom column padding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-3&quot;</span>&gt;</span>Custom column padding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-3&quot;</span>&gt;</span>Custom column padding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-3&quot;</span>&gt;</span>Custom column padding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="No-gutters"><a href="#No-gutters" class="headerlink" title="No gutters"></a>No gutters</h2><p>在 row 上使用 <code>.g-0</code> 來同時將欄間距歸零。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row g-0 text-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6 col-md-8&quot;</span>&gt;</span>.col-sm-6 .col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6 col-md-4&quot;</span>&gt;</span>.col-6 .col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap (8) Image 圖片與大小控制</title>
    <url>/2024/06/06/2024-06-06-bootstrap-image/</url>
    <content><![CDATA[<p><a href="https://youtu.be/_SSPsPmz9U0?list=PLqivELodHt3jq3oWBZfdhMu0GE7774HBW">教學應片</a></p>
<h2 id="響應式圖片"><a href="#響應式圖片" class="headerlink" title="響應式圖片"></a>響應式圖片</h2><p>在 img 加上 <code>.img-fluid</code>，會加上 <code>max-width: 100%;  height: auto;</code> 屬性，讓圖片自適應父層寬度。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-fluid&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="邊框圖片"><a href="#邊框圖片" class="headerlink" title="邊框圖片"></a>邊框圖片</h2><p>在 img 加上 <code>.img-thumbnail</code>，替圖片加上 1px border 。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-thumbnail&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="w-100"><a href="#w-100" class="headerlink" title="w-100"></a>w-100</h2><p>在 img 加上 <code>.w-100</code>， 會加上 <code>width: 100%;</code> 讓圖片填滿父層寬度</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;w-100&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="圖片區"><a href="#圖片區" class="headerlink" title="圖片區"></a>圖片區</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span> <span class="attr">class</span>=<span class="string">&quot;figure&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;figure-img img-fluid rounded&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">figcaption</span> <span class="attr">class</span>=<span class="string">&quot;figure-caption&quot;</span>&gt;</span>A caption for the above image.<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>當想要加上圖片的說明文字時，可以在 img 下用 figcaption 包住 說明文字，外層則用 figure</p>
]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap (7) Typography 文字設定</title>
    <url>/2024/06/06/2024-06-06-bootstrap-text/</url>
    <content><![CDATA[<h2 id="標題-class"><a href="#標題-class" class="headerlink" title="標題 class"></a>標題 class</h2><p>當我們想設定文字大小為標題的大小，卻無法使用標題標籤時使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;h1&quot;</span>&gt;</span>h1. Bootstrap heading<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;h2&quot;</span>&gt;</span>h2. Bootstrap heading<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;h3&quot;</span>&gt;</span>h3. Bootstrap heading<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;h4&quot;</span>&gt;</span>h4. Bootstrap heading<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;h5&quot;</span>&gt;</span>h5. Bootstrap heading<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;h6&quot;</span>&gt;</span>h6. Bootstrap heading<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Display-文字"><a href="#Display-文字" class="headerlink" title="Display 文字"></a>Display 文字</h2><p>當想要字體更大，粗細更細的文字時，使用 <code>display-*</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;display-1&quot;</span>&gt;</span>Display 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;display-2&quot;</span>&gt;</span>Display 2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;display-3&quot;</span>&gt;</span>Display 3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;display-4&quot;</span>&gt;</span>Display 4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;display-5&quot;</span>&gt;</span>Display 5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;display-6&quot;</span>&gt;</span>Display 6<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$display-font-sizes</span>: (</span><br><span class="line">  <span class="number">1</span>: <span class="number">5rem</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">4.5rem</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="number">4rem</span>,</span><br><span class="line">  <span class="number">4</span>: <span class="number">3.5rem</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="number">3rem</span>,</span><br><span class="line">  <span class="number">6</span>: <span class="number">2.5rem</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="行內文字元素"><a href="#行內文字元素" class="headerlink" title="行內文字元素"></a>行內文字元素</h2><p><img src="/../images/bootstrap/bootstrap-text-1.png"><br><img src="/../images/bootstrap/bootstrap-text-2.png"></p>
<ul>
<li><code>&lt;mark&gt;</code>: 替元素加上黃底凸顯， 相對的class為 <code>.mark</code></li>
<li><code>&lt;small&gt;</code>: 表示網頁細則內容，如 copyright。 相對的class為 <code>.small</code></li>
<li><code>&lt;s&gt;</code>: 表示不再準確的資訊，會在文字加上 刪除線。</li>
</ul>
<h2 id="取消列表樣式"><a href="#取消列表樣式" class="headerlink" title="取消列表樣式"></a>取消列表樣式</h2><p>當要取消列表預設樣式，在 ul 或 ol 加上 <code>.list-unstyled</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-unstyled&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>This is a list.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>This may still come in handy in some situations.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap (6) reboot 基礎樣式</title>
    <url>/2024/06/06/2024-06-06-bootstrap-reboot/</url>
    <content><![CDATA[<h2 id="Reboot"><a href="#Reboot" class="headerlink" title="Reboot"></a>Reboot</h2><p>bootstrap 是使用 normalize css 為基底來寫全站樣式，會給網站預設樣式， Normalize 並未將所有 HTML 標籤的預設樣式清除，像是文字標籤下方都保有留白，<ol>、<ul> 留有編號和圓點樣式。</p>
<ul>
<li><p>使用 rems 取代 ems</p>
</li>
<li><p>取消元素 margin-top</p>
</li>
<li><p>文字設定相關設定，盡量使用 inherit。</p>
</li>
<li><p>針對 HTML 標籤自定義樣式</p>
</li>
</ul>
<p>Bootstrap 已經有寫入以下樣式，不用另外撰寫<br>修改盒模型計算方式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*,</span><br><span class="line">*<span class="selector-pseudo">::before</span>,</span><br><span class="line">*<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="body-設定"><a href="#body-設定" class="headerlink" title="body 設定"></a>body 設定</h3><p>以下是 bootstrap 對 body 的基本設定，可用變數的部分放在 <code>_root.scss</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// ._reboot<span class="selector-class">.scss</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="built_in">var</span>(--bs-body-font-family);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#dee216</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bs-body-bg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="頁面設定"><a href="#頁面設定" class="headerlink" title="頁面設定"></a>頁面設定</h3><ol>
<li>border-box: 設定 _, _::before, *::after 全部元素為 border-box。</li>
<li>body 上設定 文字大小 1rem。</li>
<li>背景色彩預設為 #fff 白色。</li>
</ol>
<h3 id="字體設定"><a href="#字體設定" class="headerlink" title="字體設定"></a>字體設定</h3><p>使用 system ui 字體，讓字體在每個裝置都能很好呈現。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$font-family-sans-serif</span>:</span><br><span class="line">  // Cross-platform generic font family (default user interface font)</span><br><span class="line">  system-ui,</span><br><span class="line">  // Safari for macOS and iOS (San Francisco)</span><br><span class="line">  -apple-system, // Windows</span><br><span class="line">  <span class="string">&quot;Segoe UI&quot;</span>,</span><br><span class="line">  // Android</span><br><span class="line">  Roboto, // older macOS and iOS</span><br><span class="line">  <span class="string">&quot;Helvetica Neue&quot;</span>,</span><br><span class="line">  // Linux</span><br><span class="line">  <span class="string">&quot;Noto Sans&quot;</span>, <span class="string">&quot;Liberation Sans&quot;</span>, // Basic web fallback</span><br><span class="line">  Arial,</span><br><span class="line">  // Sans serif fallback</span><br><span class="line">  sans-serif, // Emoji fonts</span><br><span class="line">  <span class="string">&quot;Apple Color Emoji&quot;</span>, <span class="string">&quot;Segoe UI Emoji&quot;</span>, <span class="string">&quot;Segoe UI Symbol&quot;</span>, <span class="string">&quot;Noto Color Emoji&quot;</span> !default;</span><br></pre></td></tr></table></figure>

<h3 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h3><p><code>&lt;h1&gt;~&lt;h6&gt;</code> 標題取消 margin-top，並加上 <code>margin-bottom: .5rem</code>，<code>line-height: 1.2;</code></p>
<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p><code>&lt;p&gt;&lt;/p&gt;</code> 段落取消 margin-top，並加上 <code>margin-bottom: 1rem</code></p>
<h3 id="連結-Links"><a href="#連結-Links" class="headerlink" title="連結 Links"></a>連結 Links</h3><p><code>&lt;a href=&quot;#&quot;&gt;This is an example link&lt;/a&gt;</code> 連結預設有下底線，和藍色文字顏色。</p>
<h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><p><code>&lt;ul&gt;, &lt;ol&gt;, and &lt;dl&gt;</code> 列表取消 margin-top，並加上<code>margin-bottom: 1rem</code>。<br>並且在 <code>&lt;ul&gt;, &lt;ol&gt;</code> 加上左邊的 padding-left。</p>
<h3 id="cursor-pointer"><a href="#cursor-pointer" class="headerlink" title="cursor-pointer"></a>cursor-pointer</h3><p>若要在元素上加入 cursor-pointer，加上 <code>role=&quot;button&quot; </code>即可。</p>
<p><code>&lt;span role=&quot;button&quot; tabindex=&quot;0&quot;&gt;Non-button element button&lt;/span&gt;</code></p>
]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>(6) CSS基礎篇 盒模型</title>
    <url>/2024/06/08/2024-06-08-css-box-sizing/</url>
    <content><![CDATA[<h2 id="盒模型介紹"><a href="#盒模型介紹" class="headerlink" title="盒模型介紹"></a>盒模型介紹</h2><p><img src="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model/box-model.png"></p>
<p>瀏覽器引擎在佈局文檔 (document) 時，會根據 CSS 的 Box Model 把每個元素視為長方形狀的 Box，這個 Box 是由內容 (content)、內距 (padding)、邊框 (border) 和外距 (margin) 所組成。</p>
<ul>
<li><p>內容(content)：元素的實際內容，如文本、圖片等。內容區域的尺寸由width和height屬性定義。</p>
</li>
<li><p>內邊距(padding)：內容與邊框之間的空白區域。內邊距的尺寸可以通過padding屬性設置。</p>
</li>
<li><p>邊框(border)：圍繞內容和內邊距的邊框。邊框的寬度、樣式和顏色可以分別通過border-width、border-style和border-color屬性設置。</p>
</li>
<li><p>外邊距(margin)：元素與相鄰元素之間的空白區域。外邊距的尺寸可以通過margin屬性設置。</p>
</li>
</ul>
<p>這四個部分組合起來形成一個元素在網頁中的總空間，占據的空間大小計算如下：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">元素的總寬度 = 內容寬度 + 左右內邊距 + 左右邊框寬度 + 左右外邊距</span><br><span class="line">元素的總高度 = 內容高度 + 上下內邊距 + 上下邊框寬度 + 上下外邊距</span><br></pre></td></tr></table></figure>

<h2 id="盒模型的兩種模式"><a href="#盒模型的兩種模式" class="headerlink" title="盒模型的兩種模式"></a>盒模型的兩種模式</h2><h3 id="content-box"><a href="#content-box" class="headerlink" title="content box"></a>content box</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>content-box 是網頁預設的尺寸計算方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">計算方式為: 內容(width,height) + padding + border</span><br></pre></td></tr></table></figure>

<h3 id="border-box"><a href="#border-box" class="headerlink" title="border box"></a>border box</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在這種模型下，width和height包括內容、內邊距和邊框的尺寸，但不包括外邊距。可以通過設置box-sizing: border-box;來使用替代盒模型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">計算方式為: 內容(width,height) ，padding 和 border包含在內容裡。</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(7) CSS基礎篇 Float</title>
    <url>/2024/06/08/2024-06-08-css-float/</url>
    <content><![CDATA[<h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><p>在 CSS 中，float 屬性用於讓元素在容器中浮動，從而實現文字環繞等佈局效果。這個屬性在設計響應式和流動佈局時非常有用。以下是 float 屬性的詳細解說：</p>
<p>float 屬性的值:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">none：預設值。元素不浮動，會根據正常的文檔流來佈局。</span><br><span class="line">left：元素向左浮動，元素後面的內容將會環繞在其右側。</span><br><span class="line">right：元素向右浮動，元素後面的內容將會環繞在其左側。</span><br><span class="line">inherit：繼承父元素的 float 屬性值。</span><br></pre></td></tr></table></figure>

<p><img src="https://codepen.io/jskrtivy-the-animator/pen/GRavNmv" alt="float 文繞圖範例"></p>
<h2 id="清除浮動"><a href="#清除浮動" class="headerlink" title="清除浮動"></a>清除浮動</h2><p>因為當元素設定浮動後會浮起來，導致父層容器抓不到高度。清除浮動 (clear float) 可以 清除某元素前面的浮動，也就是說若我們在浮動元素後面加一個負責清除浮動狀態的元素，即可以解決因浮動而產生的問題。</p>
<ul>
<li>語法</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">clear</span>: left; <span class="comment">/* 只清除前面為 float: left 的浮動 */</span></span><br><span class="line"><span class="attribute">clear</span>: right; <span class="comment">/* 只清除前面為 float: right 的浮動 */</span></span><br><span class="line"><span class="attribute">clear</span>: both; <span class="comment">/* 清除前面所有浮動 */</span></span><br></pre></td></tr></table></figure>

<p>清除浮動的方法：</p>
<ol>
<li>在所有浮動元素後新增一個空白的區塊元素，並加入 clear float 屬性</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box left&quot;</span>&gt;</span>這是一個左浮動的盒子。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box right&quot;</span>&gt;</span>這是一個右浮動的盒子。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear: both;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一段文字，將會環繞在浮動元素的周圍。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在父元素中新增一個 after 偽元素並加入 clear float 屬性</li>
</ol>
<p>若父元素中浮動元素後沒有其他子元素，則可以利用偽元素來加入清除浮動，其實原理是一樣的，只是不用另外在寫一個空的元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container clearfix&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap (10) utilities 通用類別</title>
    <url>/2024/06/12/2024-06-12-bootstrap-utilities/</url>
    <content><![CDATA[<h2 id="複製變數"><a href="#複製變數" class="headerlink" title="複製變數"></a>複製變數</h2><p><img src="/../images/bootstrap/bootstrap-col-8.png"></p>
<p>首先到 node_modules裡找到 utilities.scss 檔案複製一份。</p>
<p>在專案內的 scss 內將複製的檔案貼上。</p>
<h2 id="更改變數設定"><a href="#更改變數設定" class="headerlink" title="更改變數設定"></a>更改變數設定</h2><p>在變數內即可新增，或調整原有 utilities 內容。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$utilities</span>: () !default;</span><br><span class="line"><span class="variable">$utilities</span>: map-merge(</span><br><span class="line">  <span class="variable">$utilities</span>,</span><br><span class="line">  (</span><br><span class="line">    </span><br><span class="line">    <span class="string">&quot;align&quot;</span>: (</span><br><span class="line">      property: vertical-align,</span><br><span class="line">      class: align,</span><br><span class="line">      values: baseline top middle bottom text-bottom text-top</span><br><span class="line">    ),</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="引入變數"><a href="#引入變數" class="headerlink" title="引入變數"></a>引入變數</h2><p>在 all.scss 內引入，記得引入順序是在 bootstrap 原本的 utilities 檔後面</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;bootstrap/scss/maps&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;bootstrap/scss/mixins&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;bootstrap/scss/root&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;bootstrap/scss/utilities&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面放入自訂utilities</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./bootstrap-custom/utilities&#x27;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;bootstrap/scss/utilities/api&#x27;</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap (9) Table 表格</title>
    <url>/2024/06/11/2024-06-11-bootstrap-text/</url>
    <content><![CDATA[<h2 id="表格概述"><a href="#表格概述" class="headerlink" title="表格概述"></a>表格概述</h2><p>要使用表格樣式，可以在 table 標籤加上 .tabel 樣式。</p>
<ul>
<li>thead: thead表頭內請用 th 標籤，並加上 scope&#x3D;”col” 代表這一欄。</li>
<li>tbody: tbody內請用 th 標籤，並加上 scope&#x3D;”col” 代表這一列。</li>
</ul>
<p><img src="/../images/bootstrap/bootstrap-table-1.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>First<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>Last<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>Handle<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mark<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Otto<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>@mdo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jacob<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Thornton<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>@fat<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Larry the Bird<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>@twitter<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="套用主題色彩"><a href="#套用主題色彩" class="headerlink" title="套用主題色彩"></a>套用主題色彩</h2><p>可以在整個表格、單列、單格加上主題色彩的表格 如 table-primary</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- On tables --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table-primary&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table-secondary&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- On rows --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;table-primary&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;table-secondary&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- On cells (`td` or `th`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;table-primary&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;table-secondary&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="內容垂直對齊"><a href="#內容垂直對齊" class="headerlink" title="內容垂直對齊"></a>內容垂直對齊</h2><p>可以在 table 讓使用 </p>
<ul>
<li>align-middle: 讓表格內容垂直中</li>
<li>align-top: 讓表格內容往上對齊</li>
<li>align-bottom: 讓表格內容往下對齊</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-responsive&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table align-middle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;align-bottom&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;align-top&quot;</span>&gt;</span>This cell is aligned to the top.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="響應式表格"><a href="#響應式表格" class="headerlink" title="響應式表格"></a>響應式表格</h2><p>在 tabel 外加上 <code>.table-responsive</code>， 可以讓表格在小吋螢幕上出現橫向捲動(overflow-x: scroll)，避免出現x軸破版。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-responsive&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>(0-3) CSS基礎篇 文字粗細 (Font weight)</title>
    <url>/2022/06/20/2024-06-18-css-font-weight/</url>
    <content><![CDATA[<h2 id="Font-weight"><a href="#Font-weight" class="headerlink" title="Font weight"></a>Font weight</h2><p>在 CSS 中，設定文字粗細的方法主要是使用 font-weight 屬性。這個屬性允許你設定文字的粗細程度，有幾種常見的使用方式：</p>
<p>使用關鍵字：可以使用預設的關鍵字來設定文字粗細，如 normal 和 bold。<br>使用數值：可以使用數值來設定更細緻的粗細程度，範圍從 100 到 900，數值越大，文字越粗。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bold-text</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.thin-text</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>關鍵字與數值之間的對應關係如下：</p>
<table>
<thead>
<tr>
<th>關鍵字</th>
<th>數值</th>
</tr>
</thead>
<tbody><tr>
<td><code>thin</code></td>
<td>100</td>
</tr>
<tr>
<td><code>extra-light</code></td>
<td>200</td>
</tr>
<tr>
<td><code>light</code></td>
<td>300</td>
</tr>
<tr>
<td><code>normal</code></td>
<td>400</td>
</tr>
<tr>
<td><code>medium</code></td>
<td>500</td>
</tr>
<tr>
<td><code>semi-bold</code></td>
<td>600</td>
</tr>
<tr>
<td><code>bold</code></td>
<td>700</td>
</tr>
<tr>
<td><code>extra-bold</code></td>
<td>800</td>
</tr>
<tr>
<td><code>black</code></td>
<td>900</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap (11) Form 表單</title>
    <url>/2024/06/18/2024-06-18-bootstrap-form/</url>
    <content><![CDATA[<h2 id="表單基礎觀念"><a href="#表單基礎觀念" class="headerlink" title="表單基礎觀念"></a>表單基礎觀念</h2><p>確保在輸入框上使用正確的 type 屬性（例如，email 用於電子郵件地址或 number 用於數字信息），以利用較新的輸入控制，如電子郵件驗證、號碼選擇等。相關內容可參考 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">連結</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">aria-describedby</span>=<span class="string">&quot;emailHelp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;emailHelp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-text&quot;</span>&gt;</span></span><br><span class="line">    We&#x27;ll never share your email with anyone else.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>基礎注意事項</p>
<ul>
<li>form-control: 加在 input 標籤上</li>
<li>form-label: 加在 form-label 標籤上</li>
<li>form-text: 加在輔助說明文字上，id 和 aria-describedby對應</li>
<li>label for 與 input id 要相對應</li>
<li>確保 button 有正確套用 type(預設值為 submit)</li>
</ul>
<h2 id="禁用表單"><a href="#禁用表單" class="headerlink" title="禁用表單"></a>禁用表單</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Disabled fieldset example<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;disabledTextInput&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Disabled input<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;disabledTextInput&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Disabled input&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;disabledSelect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Disabled select menu<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;disabledSelect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-select&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>Disabled select<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;disabledFieldsetCheck&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;disabledFieldsetCheck&quot;</span>&gt;</span></span><br><span class="line">          Can&#x27;t check this</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">disabled</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>全部表單禁用: 在外層 <code>fieldset</code> 標籤加上 disabled</li>
<li>個別表單元素禁用: 在單個 input、select、button 加上 disabled</li>
</ul>
<h2 id="form-control"><a href="#form-control" class="headerlink" title="form-control"></a>form-control</h2><p>可以在 input 和 textarea 標籤加上 form-control 樣式。<a href="https://getbootstrap.com/docs/5.3/forms/form-control/">連結</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleFormControlInput1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleFormControlInput1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;name@example.com&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleFormControlTextarea1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Example textarea<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleFormControlTextarea1&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><p>加上 <code>.form-control-lg</code> <code>.form-control-sm</code> 調整 input 大小 <a href="https://getbootstrap.com/docs/5.3/forms/form-control/#sizing">連結</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control form-control-lg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;.form-control-lg&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;.form-control-lg example&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Default input&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;default input example&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control form-control-sm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;.form-control-sm&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;.form-control-sm example&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="禁用"><a href="#禁用" class="headerlink" title="禁用"></a>禁用</h3><p>在 Bootstrap 中，disabled 和 readonly 都是用來限制用戶對表單元素的操作，但它們之間有一些重要的差異。以下是兩者的詳細對比<a href="https://getbootstrap.com/docs/5.3/forms/form-control/#disabled">連結</a>：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th><code>disabled</code></th>
<th><code>readonly</code></th>
</tr>
</thead>
<tbody><tr>
<td>適用元素</td>
<td><code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code>, 等</td>
<td><code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code></td>
</tr>
<tr>
<td>用戶輸入</td>
<td>用戶無法與元素互動</td>
<td>用戶無法修改元素值</td>
</tr>
<tr>
<td>樣式</td>
<td>通常會使元素變灰，表示不可用</td>
<td>樣式不變，但內容不可編輯</td>
</tr>
<tr>
<td>表單提交</td>
<td>該元素的值不會被提交</td>
<td>該元素的值會被提交</td>
</tr>
<tr>
<td>可點擊性</td>
<td>元素完全不可點擊</td>
<td>元素仍然可點擊和聚焦（如果使用 JS）</td>
</tr>
<tr>
<td>ARIA 支持</td>
<td>使用 <code>aria-disabled=&quot;true&quot;</code> 提供可訪性支持</td>
<td>無專門的 ARIA 屬性</td>
</tr>
</tbody></table>
<p>如果想要 <code>&lt;input readonly&gt;</code> 外觀能呈現單純文字樣式時，加上 <code>form-control-plaintext</code>。</p>
<h3 id="檔案"><a href="#檔案" class="headerlink" title="檔案"></a>檔案</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;formFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Default file input example<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;formFile&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在檔案的 input 上一樣可以加上 form-control，只是要注意要選對 <code>type=&quot;file&quot;</code></p>
<h3 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h3><p>在 input 設定 <code>type=&quot;color&quot;</code>，並在 input 加上 <code>form-control-color</code>，就可使用顏色選取器。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleColorInput&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Color picker<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control form-control-color&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleColorInput&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#563d7c&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Choose your color&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="form-select"><a href="#form-select" class="headerlink" title="form-select"></a>form-select</h2><p>在 seclet 元素上套用 <code>form-select</code>，即可加上樣式。<a href="https://getbootstrap.com/docs/5.3/forms/select/">連結</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-select&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Default select example&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>Open this select menu<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="尺寸-1"><a href="#尺寸-1" class="headerlink" title="尺寸"></a>尺寸</h3><p>為元素加上 .form-select-{ sm, lg } 調整尺寸</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-select form-select-lg mb-3&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Large select example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>Open this select menu<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-select form-select-sm&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Small select example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>Open this select menu<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="多選"><a href="#多選" class="headerlink" title="多選"></a>多選</h3><p>在 select 加上 <code>multiple</code>，即可多選</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-select&quot;</span> <span class="attr">multiple</span> <span class="attr">aria-label</span>=<span class="string">&quot;multiple select example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>Open this select menu<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加上 size 限制一次顯示選項數量</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-select&quot;</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;size 3 select example&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>Open this select menu<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="radio-和-checkbox"><a href="#radio-和-checkbox" class="headerlink" title="radio 和 checkbox"></a>radio 和 checkbox</h2><ul>
<li>radio: 多個選項中選擇一個</li>
<li>checkbox: 多選</li>
</ul>
<h3 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flexCheckDefault&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;flexCheckDefault&quot;</span>&gt;</span></span><br><span class="line">    Default checkbox</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>結構上外層會有 <code>form-check</code>，內層 input 加上 <code>form-check-input</code>，內層 label 加上 <code>form-check-label</code>。</p>
<h3 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;flexRadioDefault&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flexRadioDefault1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;flexRadioDefault1&quot;</span>&gt;</span></span><br><span class="line">    Default radio</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;flexRadioDefault&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flexRadioDefault2&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;flexRadioDefault2&quot;</span>&gt;</span></span><br><span class="line">    Default checked radio</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>結構上外層會有 <code>form-check</code>，內層 input 加上 <code>form-check-input</code>，內層 label 加上 <code>form-check-label</code>。<br>因為 radio 是單一選項，要加上相同的 name，將選項組成同一群組。</p>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>在 input 加上 <code>form-switch</code>，可以有滑動切換效果 <a href="https://getbootstrap.com/docs/5.3/forms/checks-radios/#switches">連結</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-switch&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flexSwitchCheckDefault&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;flexSwitchCheckDefault&quot;</span>&gt;</span></span><br><span class="line">    Default switch checkbox input</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="行內樣式"><a href="#行內樣式" class="headerlink" title="行內樣式"></a>行內樣式</h3><p>原本 radio、checkbox 都是由上往下排列，要將選項轉成同一排，<br>可以加上 .form-check-inline 使其轉換成單行 <a href="https://getbootstrap.com/docs/5.3/forms/checks-radios/#inline">連結</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inlineCheckbox1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;inlineCheckbox1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inlineCheckbox2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;inlineCheckbox2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inlineCheckbox3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option3&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;inlineCheckbox3&quot;</span>&gt;</span>3 (disabled)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p>在 input 加上 form-range ，即可套用 range 樣式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;customRange1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Example range<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-range&quot;</span> <span class="attr">id</span>=<span class="string">&quot;customRange1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="最小與最大值"><a href="#最小與最大值" class="headerlink" title="最小與最大值"></a>最小與最大值</h3><p>在 input 套用 min 加上最小值， max 加上最大值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;customRange2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Example range<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-range&quot;</span> <span class="attr">id</span>=<span class="string">&quot;customRange2&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">max</span>=<span class="string">&quot;10000&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="每次跳動值"><a href="#每次跳動值" class="headerlink" title="每次跳動值"></a>每次跳動值</h3><p>如果希望每次調整能以固定數值增減，可以加上 step</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;customRange3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Example range<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-range&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> 練習 <span class="attr">id</span>=<span class="string">&quot;customRange3&quot;</span> <span class="attr">step</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>(0-6) CSS基礎篇 文字行高 (Line height)</title>
    <url>/2022/06/20/2024-06-18-line-height/</url>
    <content><![CDATA[<h2 id="行高設定概念"><a href="#行高設定概念" class="headerlink" title="行高設定概念"></a>行高設定概念</h2><p>line-height 用來設文字行高，主要以數值設定為主，如 px 、em 、%。</p>
<p>假設文字設定為 20px ，行高設定為 60px，此時整行的空間為 60px，文字20px 則會在行中垂直居中。<br>表示一行的文字高度佔據 60px，兩行則是 120px。</p>
<h2 id="像素-px"><a href="#像素-px" class="headerlink" title="像素(px)"></a>像素(px)</h2><p>使用 px 設定行高，會使行空間設定為固定像素值，缺點是當文字大小改變時，可能產生字級大於行高的情形。<br>一般專案不會使用像素，而是相對單位。</p>
<h2 id="相對單位"><a href="#相對單位" class="headerlink" title="相對單位"></a>相對單位</h2><p>可以使用 %(百分比)、em、數字，來設定行高。當設定行高為 300%、3em、3 時，文字若為 20px 則行高換算為 60px。<br>好處是文字大小改變時，行高會自動改變。</p>
<p>一般建議採用 純數字的方式設定。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(0-4) CSS基礎篇 文字樣式 (Font Style)</title>
    <url>/2022/06/20/2024-06-18-font-style/</url>
    <content><![CDATA[<h2 id="Font-Style"><a href="#Font-Style" class="headerlink" title="Font Style"></a>Font Style</h2><p>font-style 屬性用於設置文字的字體樣式。<br>可以設定的值如下: </p>
<ul>
<li>normal: 無斜體</li>
<li>italic: 仿斜體</li>
<li>oblique: 斜角字</li>
<li>inherit</li>
<li>initial</li>
<li>unset</li>
</ul>
<h2 id="italic-與-oblique-區別"><a href="#italic-與-oblique-區別" class="headerlink" title="italic 與 oblique 區別"></a>italic 與 oblique 區別</h2><ul>
<li><p>italic: 指的是仿斜體字，有些字型本身就有斜體設定，但有些沒有。當文字沒有斜體設定時，瀏覽器會將字體轉成斜體外觀。</p>
</li>
<li><p>oblique: 斜角字是羅馬字的一種，本身在設計時期就有傾斜角度。</p>
</li>
</ul>
<p>不過目前網頁上不管是設定 italic 或 oblique 外觀都差不多。</p>
<h2 id="em-與-i"><a href="#em-與-i" class="headerlink" title="em 與 i"></a>em 與 i</h2><p>html 的 <code>&lt;em&gt;</code> 與 <code>&lt;i&gt;</code> 預設外觀都是斜體，採用的是 font-style: italic。</p>
<p><code>&lt;em&gt;</code>: 強調斜體的語意<br><code>&lt;i&gt;</code>: 單純描述外觀是斜體，沒有語意。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(0-7) CSS基礎篇 文字色彩 (color)</title>
    <url>/2022/06/20/2024-06-18-text-color/</url>
    <content><![CDATA[<h2 id="文字色彩設定"><a href="#文字色彩設定" class="headerlink" title="文字色彩設定"></a>文字色彩設定</h2><p>文字色彩設定方式如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.color-primary</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以設定的值有</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span>: red; // 關鍵字</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#ff0000</span>; <span class="comment">/* 使用十六进制颜色码 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">/* 使用RGB颜色值 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>); <span class="comment">/* 使用RGBA颜色值，最后一个参数是透明度（0-1之间） */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100%</span>, <span class="number">50%</span>); <span class="comment">/* 使用HSL颜色值 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">100%</span>, <span class="number">50%</span>, <span class="number">0.5</span>); <span class="comment">/* 使用HSLA颜色值，最后一个参数是透明度（0-1之间） */</span></span><br></pre></td></tr></table></figure>

<h2 id="RGB-與-RGBA-色彩"><a href="#RGB-與-RGBA-色彩" class="headerlink" title="RGB 與 RGBA 色彩"></a>RGB 與 RGBA 色彩</h2><p>CSS 中的 RGB 和 RGBA 用來定義顏色。它們都使用紅色（Red）、綠色（Green）和藍色（Blue）三種顏色的組合來表示一種顏色。區別在於 RGBA 還包括一個透明度（Alpha）參數。</p>
<h3 id="RGB（Red-Green-Blue）"><a href="#RGB（Red-Green-Blue）" class="headerlink" title="RGB（Red, Green, Blue）"></a>RGB（Red, Green, Blue）</h3><p>RGB 顏色值表示一種顏色的紅色、綠色和藍色組成部分。每一部分的值範圍在 0 到 255 之間。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="built_in">rgb</span>(red, green, blue);</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">/* 紅色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>); <span class="comment">/* 綠色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>); <span class="comment">/* 藍色 */</span></span><br><span class="line"></span><br><span class="line">// 也可使用 % 百分比</span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">100%</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">/* 紅色 */</span></span><br></pre></td></tr></table></figure>

<h3 id="RGBA（Red-Green-Blue-Alpha）"><a href="#RGBA（Red-Green-Blue-Alpha）" class="headerlink" title="RGBA（Red, Green, Blue, Alpha）"></a>RGBA（Red, Green, Blue, Alpha）</h3><p>RGBA 是在 RGB 基礎上添加了 Alpha 透明度參數。Alpha 的值範圍是 0 到 1，其中 0 表示完全透明，1 表示完全不透明。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>); <span class="comment">/* 半透明紅色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.3</span>); <span class="comment">/* 30% 透明度的綠色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0.1</span>); <span class="comment">/* 10% 透明度的藍色 */</span></span><br></pre></td></tr></table></figure>

<h2 id="HSL-和-HSLA-色彩"><a href="#HSL-和-HSLA-色彩" class="headerlink" title="HSL 和 HSLA 色彩"></a>HSL 和 HSLA 色彩</h2><p>CSS 中的 HSL 和 HSLA 用來定義顏色。HSL 代表色相（Hue）、飽和度（Saturation）和亮度（Lightness）。<br>而 HSLA 在此基礎上還包含了透明度（Alpha），Alpha 的值範圍是 0 到 1，其中 0 表示完全透明，1 表示完全不透明。。</p>
<ul>
<li><p>Hue（色相）：顏色的種類，值的範圍是 0 到 360 度。0 度是紅色，120 度是綠色，240 度是藍色。</p>
</li>
<li><p>Saturation（飽和度）：顏色的鮮豔程度，值的範圍是 0% 到 100%。0% 是灰色，100% 是全彩色。</p>
</li>
<li><p>Lightness（亮度）：顏色的明暗程度，值的範圍是 0% 到 100%。0% 是黑色，100% 是白色。</p>
</li>
</ul>
<p><img src="/../images/css/hsl.png"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100%</span>, <span class="number">50%</span>); <span class="comment">/* 紅色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">120</span>, <span class="number">100%</span>, <span class="number">50%</span>); <span class="comment">/* 綠色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">240</span>, <span class="number">100%</span>, <span class="number">50%</span>); <span class="comment">/* 藍色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">60</span>, <span class="number">100%</span>, <span class="number">50%</span>); <span class="comment">/* 黃色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">180</span>, <span class="number">100%</span>, <span class="number">50%</span>); <span class="comment">/* 青色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">300</span>, <span class="number">100%</span>, <span class="number">50%</span>); <span class="comment">/* 洋紅 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">75%</span>); <span class="comment">/* 淺灰色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">0%</span>); <span class="comment">/* 黑色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">100%</span>); <span class="comment">/* 白色 */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">100%</span>, <span class="number">50%</span>, <span class="number">0.5</span>); <span class="comment">/* 半透明紅色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsla</span>(<span class="number">120</span>, <span class="number">100%</span>, <span class="number">50%</span>, <span class="number">0.3</span>); <span class="comment">/* 30% 透明度的綠色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsla</span>(<span class="number">240</span>, <span class="number">100%</span>, <span class="number">50%</span>, <span class="number">0.1</span>); <span class="comment">/* 10% 透明度的藍色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">0%</span>, <span class="number">0</span>); <span class="comment">/* 完全透明 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">100%</span>, <span class="number">1</span>); <span class="comment">/* 不透明的白色 */</span></span><br></pre></td></tr></table></figure>

<h2 id="關鍵字"><a href="#關鍵字" class="headerlink" title="關鍵字"></a>關鍵字</h2><p>顏色設定也可以用<a href="https://zh.wikipedia.org/zh-tw/%E7%BD%91%E9%A1%B5%E9%A2%9C%E8%89%B2#%E9%A2%9C%E8%89%B2%E5%90%8D%E7%A7%B0">關鍵字</a>，另外常見的還有<br>transparent (透明)，跟 currentColor。</p>
<p>currentColor 指的是目前的文字色彩，假如父層有設定文字色彩，使用這個關鍵字就能讓設定的css屬性套用父層文字色彩。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#3498db</span>; <span class="comment">/* 藍色 */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid currentColor; <span class="comment">/* 邊框顏色與文字顏色一致 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: currentColor; <span class="comment">/* 背景顏色與文字顏色一致 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(0-2) CSS基礎篇 文字大小 (Font Sizes)</title>
    <url>/2022/06/20/2024-06-18-text-setting/</url>
    <content><![CDATA[<h2 id="文字大小-Font-Sizes"><a href="#文字大小-Font-Sizes" class="headerlink" title="文字大小 (Font Sizes)"></a>文字大小 (Font Sizes)</h2><p>Font Sizes 設定方法如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Font Sizes 可以設定的值</p>
<ul>
<li>關鍵字:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-size</span>: xx-small;</span><br><span class="line"><span class="attribute">font-size</span>: x-small;</span><br><span class="line"><span class="attribute">font-size</span>: small;</span><br><span class="line"><span class="attribute">font-size</span>: medium;</span><br><span class="line"><span class="attribute">font-size</span>: large;</span><br><span class="line"><span class="attribute">font-size</span>: x-large;</span><br><span class="line"><span class="attribute">font-size</span>: xx-large;</span><br><span class="line"><span class="attribute">font-size</span>: xxx-large;</span><br></pre></td></tr></table></figure>

<ul>
<li>絕對單位:</li>
</ul>
<p>「絕對尺寸單位」是使用 font-size 是最常見的數值單位，絕對尺寸單位表示「不會因為其他元素樣式而變動」的單位，font-size 支援下列絕對尺寸單位：</p>
<p><img src="/../images/css/font-size.png"></p>
<ul>
<li>相對單位:</li>
</ul>
<p>相對單位使字體大小能夠根據外部條件（如父元素的字體大小或根元素的字體大小）進行調整</p>
<ol>
<li><p>em: 基於父元素的字體大小。例如，如果父元素的字體大小是 16px，那麼 1em 就等於 16px。</p>
</li>
<li><p>rem: 基於根元素（即 <code>&lt;html&gt;</code>）的字體大小。例如，如果根元素的字體大小是 16px，那麼 1rem 就等於 16px。</p>
</li>
<li><p>% (百分比): 百分比基於父元素的字體大小。例如，如果父元素的字體大小是 16px，那麼 100% 就等於 16px。</p>
</li>
<li><p>vw: 相對於視口寬度的百分比。例如，1vw 等於視口寬度的 1%。</p>
</li>
<li><p>vh: 相對於視口高度的百分比。例如，1vh 等於視口高度的 1%。</p>
</li>
<li><p>vmin 和 vmax: vmin 是視口寬度和高度中較小的那個的百分比，而 vmax 則是較大的那個。例如，如果視口寬度是 1000px，高度是 800px，那麼 1vmin 是 8px，1vmax 是 10px。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(0-9) CSS基礎篇 文字對齊 (text-align)</title>
    <url>/2024/06/19/2024-06-19-css-text-align/</url>
    <content><![CDATA[<h2 id="text-align-說明"><a href="#text-align-說明" class="headerlink" title="text-align 說明"></a>text-align 說明</h2><p>text-align 用於設定文字的水平對齊方式。</p>
<ul>
<li>left: 將文本對齊到容器的左邊緣（默認對齊方式）。</li>
<li>right: 將文本對齊到容器的右邊緣。</li>
<li>center: 將文本居中對齊。</li>
<li>justify: 將文本對齊到容器的兩邊緣（即左右對齊），使每一行的文字間距相等。</li>
<li>start: 根據文本的書寫方向，將文本對齊到開始邊緣（對左到右的文本為左對齊，對右到左的文本為右對齊）。</li>
<li>end: 根據文本的書寫方向，將文本對齊到結束邊緣（對左到右的文本為右對齊，對右到左的文本為左對齊）。</li>
<li>inherit: 繼承父元素的 text-align 屬性值。</li>
</ul>
<h2 id="text-align-last"><a href="#text-align-last" class="headerlink" title="text-align last"></a>text-align last</h2><p>text-align-last 可以設定最後一行的文字對齊。利用 text-align-last 搭配 justify ，可以將單行文字左右對齊。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">60px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">text-align-last</span>: justify;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/jskrtivy-the-animator/pen/gOJvorz">範例</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(0-5) CSS基礎篇 文字裝飾 (Text decoration)</title>
    <url>/2022/06/20/2024-06-19-css-text-deco/</url>
    <content><![CDATA[<h2 id="text-decoration-規則"><a href="#text-decoration-規則" class="headerlink" title="text decoration 規則"></a>text decoration 規則</h2><p> text decoration 用於設定文字的裝飾效果，可以設定的值如下:</p>
<ul>
<li>none：無任何裝飾。</li>
<li>underline：下底線。</li>
<li>overline：上底線。</li>
<li>line-through：中線、刪除線。</li>
<li>inherit：繼承父元素的 text-decoration 屬性。</li>
</ul>
<h2 id="text-decoration-組成"><a href="#text-decoration-組成" class="headerlink" title="text decoration 組成"></a>text decoration 組成</h2><p> text decoration 實際上由五個屬性組成:</p>
<ul>
<li>text-decoration-thickness: 線段尺寸</li>
<li>text-decoration-style: 線段樣式</li>
<li>text-decoration-color: 線段色彩</li>
<li>text-decoration-line: 線段位置</li>
<li>text-underline-offset: 線段偏移距離</li>
</ul>
<p> 實際上可以如此使用:</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>-thickness: <span class="number">1px</span>;</span><br><span class="line"><span class="attribute">text-decoration-style</span>: dotted;</span><br><span class="line"><span class="attribute">text-decoration-color</span>: red;</span><br><span class="line"><span class="attribute">text-decoration-line</span>: underline;</span><br></pre></td></tr></table></figure>

<p> 或是縮寫:</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>: <span class="number">1px</span> dotted red underline;</span><br></pre></td></tr></table></figure>

<p> text-underline-offset 基本上是設定底線與文字的距離，只針對底線(underline)有效果。<br> 設定正數值可以增加底線與文字距離。<br> 設定負數值則使底線往文字上方移動。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(0-10) CSS基礎篇 letter spacing</title>
    <url>/2024/06/19/2024-06-19-letter-spacing/</url>
    <content><![CDATA[<h2 id="基礎設定"><a href="#基礎設定" class="headerlink" title="基礎設定"></a>基礎設定</h2><p>letter spacing 用來設定每個字母間的距離。可以設定的值包括 px、em、rem、cm 等。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 設定 <span class="number">2</span> 個字元間距</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.increased-spacing</span> &#123;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他增加文字距離的屬性包括</p>
<ul>
<li>letter-spacing: 每個字母間的距離</li>
<li>word-spacing: 每個單字間的距離</li>
<li>white-space: 每個空白字元距離</li>
</ul>
<h2 id="word-spacing-用法"><a href="#word-spacing-用法" class="headerlink" title="word-spacing 用法"></a>word-spacing 用法</h2><p>word-spacing 用來處理每個單字間空白的距離，中文不太用得上，但在英文上就可以看出差異。<br>利用這點，可以將 inline-block 排版產生的 4~5px 的空白處理掉。</p>
<p>&#96;&#96;&#96; css<br>.list {<br>  word-spacing: -4px;<br>}<br>.list li {<br>  display: inline-block;<br>  padding: 5px 10px;<br>}</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(0-8) CSS基礎篇 文字縮排 (text-indent)</title>
    <url>/2024/06/19/2024-06-19-text-indent/</url>
    <content><![CDATA[<h2 id="基本設定"><a href="#基本設定" class="headerlink" title="基本設定"></a>基本設定</h2><p>text-indent 是 CSS 屬性之一，用於設定文字的首行縮排，設定的值以數值為主，也可以用百分比或關鍵字。</p>
<p>可以設定的值包括: px、em、rem、cm 、% 等</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 首行縮排兩個字大小</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/jskrtivy-the-animator/pen/vYwdWPm">範例參考</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(9) CSS 基礎篇 Border</title>
    <url>/2024/06/22/2024-06-22-background/</url>
    <content><![CDATA[<h2 id="border-與-outline"><a href="#border-與-outline" class="headerlink" title="border 與 outline"></a>border 與 outline</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line"><span class="attribute">outline</span>: <span class="number">1px</span> solid red;</span><br></pre></td></tr></table></figure>

<p>border 和 outline 都是由「線條寬度、線條樣式、線條色彩」所組成，差異為</p>
<ul>
<li>border: 設定物件的邊框線，會佔據空間，可設定圓角</li>
<li>outline: 設定物件的外框線、不佔據空間、不能設定圓角</li>
</ul>
<h2 id="使用時機"><a href="#使用時機" class="headerlink" title="使用時機"></a>使用時機</h2><p>因為 border 可以設定圓角，專案較常用。outline 則是在表單輸入框被 focus 時出現的外框線。</p>
<h2 id="border-相關屬性"><a href="#border-相關屬性" class="headerlink" title="border 相關屬性"></a>border 相關屬性</h2><p>border 與 outline 也可分別為四邊設定不同的值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid red;</span><br><span class="line"><span class="attribute">border-right</span>: <span class="number">1px</span> solid red;</span><br><span class="line"><span class="attribute">border-bottom</span>: <span class="number">1px</span> solid red;</span><br><span class="line"><span class="attribute">border-left</span>: <span class="number">1px</span> solid red;</span><br></pre></td></tr></table></figure>

<h2 id="單一屬性四個值設定"><a href="#單一屬性四個值設定" class="headerlink" title="單一屬性四個值設定"></a>單一屬性四個值設定</h2><p>因為 border 有四個邊，也可對單一值設定四個編的值，四個值依序是 上右下左 來設定。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-width</span>: <span class="number">1px</span> <span class="number">2px</span> <span class="number">1px</span> <span class="number">2px</span>;</span><br><span class="line"><span class="attribute">border-style</span>: solid solid solid solid;</span><br><span class="line"><span class="attribute">border-color</span>: blue blue blue blue;</span><br></pre></td></tr></table></figure>

<p>四個值的寫法也可以改成一到四個值的寫法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 四個值分別指定 </span><br><span class="line"><span class="attribute">border-width</span>: 上 右 下 左</span><br><span class="line"></span><br><span class="line">// 三個值 </span><br><span class="line">border-width: 上 左右 下</span><br><span class="line"></span><br><span class="line">// 兩個值</span><br><span class="line">border-width: 上下 左右</span><br><span class="line"></span><br><span class="line">// 一個值</span><br><span class="line">border-width: [上右下左]</span><br></pre></td></tr></table></figure>

<h2 id="border-style"><a href="#border-style" class="headerlink" title="border style"></a>border style</h2><p> border-style 可以設定的值有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset</span><br></pre></td></tr></table></figure>

<p><img src="/../images/css/border.png"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(8) CSS 基礎篇 List-style</title>
    <url>/2024/06/22/2024-06-22-list-style/</url>
    <content><![CDATA[<h2 id="基礎用法"><a href="#基礎用法" class="headerlink" title="基礎用法"></a>基礎用法</h2><p>可以使用 list-style 設定清單前方的圖示，可以接受 1-3 個值，語法如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">list-style</span>: circle outside <span class="built_in">url</span>(<span class="string">&#x27;gold-fish.png&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>list-style 是簡寫寫法，是以下三個屬性簡寫</p>
<ul>
<li>list-style-type: 清單符號樣式</li>
<li>list-style-position: 清單符號位置</li>
<li>list-style-image: 清單符號圖片</li>
</ul>
<h2 id="list-style-type"><a href="#list-style-type" class="headerlink" title="list-style-type"></a>list-style-type</h2><p>list-style-type 用來設定清單前置圖示，可以設定的值有</p>
<ul>
<li>none: 沒有符號</li>
<li>disc: 實心圓形 (預設值)</li>
<li>decimal: (1、2、3)</li>
<li>cjk-ideographic: (一、二、三)</li>
<li>decimal-leading-zero: (01, 02, 03)</li>
<li>lower-alpha: (a, b, c)</li>
<li>upper-alpha: (A, B, C)</li>
</ul>
<p>其他還有很多值，可以參考 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type#cjk-ideographic">MDN</a></p>
<h2 id="實際專案會用到的屬性"><a href="#實際專案會用到的屬性" class="headerlink" title="實際專案會用到的屬性"></a>實際專案會用到的屬性</h2><p>實際專案上會因設計需求清除清單符號，如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">list-style</span>: none; //簡寫寫法</span><br><span class="line"></span><br><span class="line"><span class="attribute">list-style-type</span>: none; //  單一屬性寫法</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(10) CSS 基礎篇 Width 和 Height</title>
    <url>/2024/06/22/2024-06-22-width-height/</url>
    <content><![CDATA[<h2 id="基礎介紹"><a href="#基礎介紹" class="headerlink" title="基礎介紹"></a>基礎介紹</h2><p>Width 和 Height 主要用來設定物件的寬和高，可以設定的值包刮</p>
<table>
<thead>
<tr>
<th>單位類型</th>
<th>單位</th>
<th>描述</th>
<th>範例</th>
</tr>
</thead>
<tbody><tr>
<td>絕對長度</td>
<td><code>px</code></td>
<td>像素</td>
<td><code>width: 100px;</code></td>
</tr>
<tr>
<td>絕對長度</td>
<td><code>cm</code></td>
<td>厘米</td>
<td><code>width: 10cm;</code></td>
</tr>
<tr>
<td>絕對長度</td>
<td><code>mm</code></td>
<td>毫米</td>
<td><code>width: 100mm;</code></td>
</tr>
<tr>
<td>絕對長度</td>
<td><code>in</code></td>
<td>英寸</td>
<td><code>width: 2in;</code></td>
</tr>
<tr>
<td>絕對長度</td>
<td><code>pt</code></td>
<td>點（1pt &#x3D; 1&#x2F;72 英寸）</td>
<td><code>width: 72pt;</code></td>
</tr>
<tr>
<td>絕對長度</td>
<td><code>pc</code></td>
<td>派卡（1pc &#x3D; 12pt）</td>
<td><code>width: 6pc;</code></td>
</tr>
<tr>
<td>相對長度</td>
<td><code>%</code></td>
<td>相對於包含塊的百分比</td>
<td><code>width: 50%;</code></td>
</tr>
<tr>
<td>相對長度</td>
<td><code>em</code></td>
<td>相對於元素的字體尺寸</td>
<td><code>width: 10em;</code></td>
</tr>
<tr>
<td>相對長度</td>
<td><code>rem</code></td>
<td>相對於根元素的字體尺寸</td>
<td><code>width: 10rem;</code></td>
</tr>
<tr>
<td>相對長度</td>
<td><code>vw</code></td>
<td>視口寬度的百分比</td>
<td><code>width: 50vw;</code></td>
</tr>
<tr>
<td>相對長度</td>
<td><code>vh</code></td>
<td>視口高度的百分比</td>
<td><code>width: 50vh;</code></td>
</tr>
<tr>
<td>相對長度</td>
<td><code>vmin</code></td>
<td>視口寬度和高度中較小值的百分比</td>
<td><code>width: 50vmin;</code></td>
</tr>
<tr>
<td>相對長度</td>
<td><code>vmax</code></td>
<td>視口寬度和高度中較大值的百分比</td>
<td><code>width: 50vmax;</code></td>
</tr>
<tr>
<td>相對長度</td>
<td><code>ch</code></td>
<td>0 的寬度</td>
<td><code>width: 20ch;</code></td>
</tr>
<tr>
<td>相對長度</td>
<td><code>ex</code></td>
<td>x 的高度</td>
<td><code>width: 5ex;</code></td>
</tr>
<tr>
<td>相對長度</td>
<td><code>lh</code></td>
<td>行高</td>
<td><code>width: 2lh;</code></td>
</tr>
</tbody></table>
<h2 id="為何設定寬高無效"><a href="#為何設定寬高無效" class="headerlink" title="為何設定寬高無效"></a>為何設定寬高無效</h2><p>設定寬高時，要注意物件不能是 inline 元素，linline 以外的 「block、inline-block、flex-item、table」都能設定寬高。</p>
<h2 id="寬高可運用空間"><a href="#寬高可運用空間" class="headerlink" title="寬高可運用空間"></a>寬高可運用空間</h2><p>預設設定寬高是內容可運用空間，也就是 content-box 的寬高，如果另設定寬高的話，物件尺寸會往外增加。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">20px</span> solid <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面物件總佔據寬度為， width 200 + padding(左右) 20 + border(左右) 20 &#x3D; 280px</p>
<h3 id="寬度-auto-是什麼"><a href="#寬度-auto-是什麼" class="headerlink" title="寬度 auto 是什麼"></a>寬度 auto 是什麼</h3><p>當設定寬度值為 auto 時，和設關鍵字 「avaliable」一樣，會扣除 margin、padding、border的寬度，讓內容不超出父容器。所以需要滿版畫面時，有時候設定 auto 比設定 100% 更好用。</p>
<p><img src="/../images/css/w-auto.png"></p>
<p>上圖兩個區塊一個是 width: auto，一個是 width:100%，兩個區塊都設定 margin-left: 20px。可以看到 width:auto的區塊自動扣除 margin 的寬度，width:100% 則沒扣除導致超出父層寬度。</p>
<h3 id="寬高-100-的範圍"><a href="#寬高-100-的範圍" class="headerlink" title="寬高 100% 的範圍"></a>寬高 100% 的範圍</h3><p>當設定物件為寬 100% 時，該物件寬度會等於父層內容的可運用空間，也就是 padding 以內的空間</p>
<p><img src="/../images/css/width.png"></p>
<p>如上圖 子層設定寬度 100%，會佔滿父層的 padding 以內的空間。</p>
<p>當父層為 width: 600px; padding: 20px; 時，子層 100% 就是 600 - 20 -20 &#x3D; 560px</p>
<h3 id="寬-100vw-的範圍"><a href="#寬-100vw-的範圍" class="headerlink" title="寬 100vw 的範圍"></a>寬 100vw 的範圍</h3><p>當一個物件設定 width: 100vw 時，指的是左邊緣到右邊緣，不包含卷軸寬度。也就是說當你視窗出現卷軸時，寬度會因為卷軸的關係，導致過寬出現橫向卷軸。</p>
<p>但設定 width: 100%，就不會有這個問題，因為寬度是父層的可用空間，非視窗寬度。</p>
<h2 id="關鍵字運用"><a href="#關鍵字運用" class="headerlink" title="關鍵字運用"></a>關鍵字運用</h2><p>寬度可設定的關鍵字有</p>
<ul>
<li>avaliable</li>
<li>fit-content</li>
<li>min-content</li>
<li>max-content</li>
</ul>
<h3 id="available"><a href="#available" class="headerlink" title="available"></a>available</h3><p>和設關鍵字 「auto」一樣，會扣除 margin、padding、border的寬度，讓內容不超出父容器。</p>
<h3 id="fit-content"><a href="#fit-content" class="headerlink" title="fit-content"></a>fit-content</h3><p>當內容文字過少時，寬度會自動符合內容資料的寬度，當寬度多到要折行時，則呈現和 「availble 」一樣效果</p>
<p><img src="/../images/css/css-fitcontent.png"></p>
<h3 id="min-content"><a href="#min-content" class="headerlink" title="min-content"></a>min-content</h3><p>min-content 會以最小字作為物件的寬度，中文而言，就是一個字的寬度，會以一個字來換行。英文字是以多個字母為一個單字，所以會以最長的那個單字來換行。</p>
<p><img src="/../images/css/w-min-content.png"></p>
<h3 id="max-content"><a href="#max-content" class="headerlink" title="max-content"></a>max-content</h3><p>min-content 會以「最大內容寬度」呈現，當內容只有幾個字，寬度就是內容的數量。但若內容多到要換行，它就不會讓你換行，內容有多長，寬度就多長。</p>
<p><img src="/../images/css/max-content.png"></p>
<h2 id="min-width、max-width"><a href="#min-width、max-width" class="headerlink" title="min-width、max-width"></a>min-width、max-width</h2><p>當設定 min-width 、min-height，表示限制最小寬度、高度分別是多少。<br>設定 max-width、 max-height 則是最大寬度、高度的限制。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// <span class="selector-class">.box</span> 最小寬度為 <span class="number">200px</span> ，最大寬度為 <span class="number">600px</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="同時設定-min-width、width"><a href="#同時設定-min-width、width" class="headerlink" title="同時設定 min-width、width"></a>同時設定 min-width、width</h3><p>當同時設定 min-width、width時，會以 min-width 蓋過 width</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 寬度為 <span class="number">300px</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span></span><br><span class="line">  min-width: <span class="number">300px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="同時設定-min-width、max-width"><a href="#同時設定-min-width、max-width" class="headerlink" title="同時設定 min-width、max-width"></a>同時設定 min-width、max-width</h3><p>當同時設定 min-width、max-width，max-width 又比 min-width 小時，min-width 蓋過 max-width。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 寬度為 <span class="number">300px</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(10) CSS 基礎篇 margin-padding</title>
    <url>/2024/06/25/2024-06-25-margin-padding/</url>
    <content><![CDATA[<h2 id="基礎介紹"><a href="#基礎介紹" class="headerlink" title="基礎介紹"></a>基礎介紹</h2><ul>
<li>margin: 控制物件的外部距離</li>
<li>padding: 控制物件的內部距離</li>
</ul>
<p>可以接受的值如 <code>px、%、em、rem、vw、vh</code></p>
<p>設定方法可分為一到四個值</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 四個值 分別設定 */</span></span><br><span class="line"><span class="attribute">margin</span>: 上 右 下 左</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 三個值 */</span></span><br><span class="line">margin: 上 [左右] 下</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 兩個值 */</span></span><br><span class="line">margin: [上下] [左右]</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 一個值 */</span></span><br><span class="line">margin: [上右下左]</span><br></pre></td></tr></table></figure>

<h2 id="margin-用法"><a href="#margin-用法" class="headerlink" title="margin 用法"></a>margin 用法</h2><p>margin 用來設定物件與周圍物件的距離</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上 .box 的寬高為 100px，又向外推了 10px 的 margin 空間，總共佔 110px 的空間。</p>
<h3 id="用-auto-水平居中"><a href="#用-auto-水平居中" class="headerlink" title="用 auto 水平居中"></a>用 auto 水平居中</h3><p>可以用 <code>margin: 0 auto</code>，來做水平居中，auto 的用途是將父層剩餘的空間分配給具有這個值的位置。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> auto; // 物件靠右</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> auto; // 物件水平置中</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> auto <span class="number">0px</span> <span class="number">0px</span>; // 物件靠左</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用百分比單位"><a href="#使用百分比單位" class="headerlink" title="使用百分比單位"></a>使用百分比單位</h3><p>當 margin 使用 % 為單位時，是以父層的 content-box 為百分之百。所以設定 margin-left: 10% ，表示為父層 width寬度的 10%。</p>
<h2 id="padding-用法"><a href="#padding-用法" class="headerlink" title="padding 用法"></a>padding 用法</h2><p>padding 是用來設定物件 border 到資料之間的留白空間，稱為「內距」。<br>當設定 padding 後，padding 的空間會添加到元素的寬高之外，border 以內，padding 空間會顯示背景色彩。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基礎篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(12) Git 練功坊- 發 Pull Request(PR) 流程</title>
    <url>/2024/06/27/2024-06-27-git-pr/</url>
    <content><![CDATA[<h2 id="何謂發-PR"><a href="#何謂發-PR" class="headerlink" title="何謂發 PR"></a>何謂發 PR</h2><p>在 github 上其他人的專案，若我們想新增自己的程式碼上去，可以發 pr 給專案原作者。</p>
<h3 id="第一步-Fork-對方的專案"><a href="#第一步-Fork-對方的專案" class="headerlink" title="第一步 Fork 對方的專案"></a>第一步 Fork 對方的專案</h3><p>在 GitHub 上，點擊目標倉庫右上角的 “Fork” 按鈕，將目標倉庫複製到自己的 GitHub 賬戶中。</p>
<p><img src="/../images/git/pr-1.png"></p>
<p>fork 到自己 github 的專案，會顯示從哪裡 fork 來的。</p>
<p><img src="/../images/git/pr-2.png"></p>
<h3 id="第二步-clone-專案到本地端"><a href="#第二步-clone-專案到本地端" class="headerlink" title="第二步 clone 專案到本地端"></a>第二步 clone 專案到本地端</h3><p>將 fork 來的專案，git clone 到本地端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/tim8076/hexschoolGit.git</span><br></pre></td></tr></table></figure>

<p>接著就是開始進行修改，例如新增一個 index.html 檔案，接著就是一般的 Git Commit 動作。</p>
<h3 id="第三步：Push-回你自己的專案"><a href="#第三步：Push-回你自己的專案" class="headerlink" title="第三步：Push 回你自己的專案"></a>第三步：Push 回你自己的專案</h3><p>用 git push，將 新增的 commit push 到自己的 github。</p>
<h3 id="發-PR-給原專案作者"><a href="#發-PR-給原專案作者" class="headerlink" title="發 PR 給原專案作者"></a>發 PR 給原專案作者</h3><p>回到自己的專案頁面，可以找到一個「New pull request」的按鈕：</p>
<p><img src="/../images/git/pr-3.png"></p>
<p>按下「Create pull request」後，可開始填寫 PR 的相關資訊，讓作者知道你這個 PR 大概做了什麼事。</p>
<p>填寫完畢後，按下「Create pull request」按鈕後，即算完成送出 PR。</p>
<h3 id="第五步：原作收下-PR"><a href="#第五步：原作收下-PR" class="headerlink" title="第五步：原作收下 PR"></a>第五步：原作收下 PR</h3><p>原作者，便可以在專案的頁面看到 Pull requests 的數量增加了</p>
<p><img src="/../images/git/pr-4.png"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 核心篇 (10) ASI 自動插入分號</title>
    <url>/2024/06/28/2024-06-28-js-asi/</url>
    <content><![CDATA[<h2 id="ASI-機制說明"><a href="#ASI-機制說明" class="headerlink" title="ASI 機制說明"></a>ASI 機制說明</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">  <span class="string">&#x27;小名&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">callName</span>()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>上面這段程式會回傳 undefined，因為受到 ASI 自動插入分號機制影響。</p>
<p>ASI 自動插入分號機制說明:</p>
<p>js 的每段語句都應該加入分號結尾，若沒加入分號，則會受到ASI 自動插入分號機制影響。以上面程式為例，實際上運作是長這樣:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>; <span class="string">&#x27;小名&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">callName</span>()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>因為 return 後方沒有分號，js 就自動補上分號，導致結果是 undefined。</p>
<p>再看一個例子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &gt; <span class="number">10</span>) a = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> a = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>上面語句受到 asi 機制影響，在句尾都自動補上分號。</p>
<h2 id="不會發生-ASI-的規則"><a href="#不會發生-ASI-的規則" class="headerlink" title="不會發生 ASI 的規則"></a>不會發生 ASI 的規則</h2><ol>
<li>新的一行是 <code>(</code>、<code>[</code>、<code>/</code> 開始 (容易出錯的地方)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">(a + b).<span class="title function_">toString</span>()</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123; &#125;)()</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123; &#125;)()</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">/test/.<span class="title function_">test</span>(b)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>新的一行以 <code>+</code>、<code>-</code>、<code>*</code>、<code>%</code> 作開始 (會影響執行結果)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">+a</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>新的一行以 <code>,</code>、<code>.</code> 作開始 (需注意執行結果)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">.<span class="title function_">toString</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b)</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">,b = <span class="number">2</span> <span class="comment">// b 一樣會 var 被宣告</span></span><br></pre></td></tr></table></figure>

<p>4. </p>
]]></content>
      <categories>
        <category>JS 核心篇</category>
      </categories>
      <tags>
        <tag>JS 核心篇</tag>
      </tags>
  </entry>
  <entry>
    <title>(1) 使用者故事(user-story)</title>
    <url>/2024/07/16/2024-07-16-user-story/</url>
    <content><![CDATA[<h2 id="網站發想初衷"><a href="#網站發想初衷" class="headerlink" title="網站發想初衷"></a>網站發想初衷</h2><p>設計網站的初衷:</p>
<ul>
<li>例: 社會上常有人因為程式問題卡關，想設計一個 IT 論壇，幫助大家解決問題</li>
</ul>
<h2 id="什麼是使用者故事"><a href="#什麼是使用者故事" class="headerlink" title="什麼是使用者故事"></a>什麼是使用者故事</h2><p>使用者故事（User Story）是敏捷開發中常用的一種工具，用來描述特定使用者在特定情境下希望達成的目標。對於網站設計，使用者故事可以幫助團隊了解使用者需求，從而設計出更符合使用者期望的網站。</p>
<p>以這個<a href="https://cafenomad.tw/">咖啡廳評價網</a>為例</p>
<h3 id="使用者"><a href="#使用者" class="headerlink" title="使用者"></a>使用者</h3><ul>
<li>我可以 輸入我所在的地區，找到附近的店家</li>
<li>我可以 設定篩選條件，例如口味、氛圍等，以便我可以找到符合我喜好的咖啡廳</li>
<li>我可以 瀏覽店家列表，以便我可以看到符合我的篩選條件的咖啡廳</li>
<li>我可以 查看店家詳細資訊，包括地址、營業時間、價格等</li>
<li>我可以 註冊帳號並登入系統</li>
<li>我可以 查看其他使用者對咖啡廳的評價，以便我可以參考其他人的經驗</li>
<li>我可以 留下自己對咖啡廳的評價和評論，以便其他使用者可以參考我的經驗</li>
<li>我可以 保存我喜歡的咖啡廳，以便下次可以快速找到。</li>
<li>我可以 分享店家的詳細資訊和評價到社交媒體上，以便我可以分享我的經驗和意見</li>
</ul>
<h3 id="管理者"><a href="#管理者" class="headerlink" title="管理者"></a>管理者</h3><ul>
<li>我可以 新增新的咖啡廳，包括店家名稱、地址、營業時間、價格範圍等，以便前台使用者可以搜尋到</li>
<li>我可以 編輯現有咖啡廳資訊，以便更新店家的相關資訊，如地址、營業時間等</li>
<li>我可以 刪除不再營業或不符合標準的咖啡廳資訊，以保持資料庫的整潔和準確性</li>
<li>我可以 管理所有使用者的帳戶資訊，如重置密碼、解鎖帳戶等，以提供技術支援和維護帳戶安全</li>
<li>我可以 查看評價，瀏覽所有使用者對咖啡廳的評價，確保內容合規並反映真實用戶體驗</li>
<li>我可以 刪除評價，確保系統中的評價符合相關政策</li>
</ul>
<p>使用者故事每則最好只聚焦一個功能，初期來說最好條列 3-7 個使用者故事就好，因為每個使用者故事都會對應到好幾個網站頁面。</p>
<h2 id="site-map-網站地圖"><a href="#site-map-網站地圖" class="headerlink" title="site map 網站地圖"></a>site map 網站地圖</h2><p>當使用者故事寫好後，可以用網站地圖的方式整理</p>
<p><img src="/../images/web-design/site-map.png"></p>
<p>繪製工具可以用 <a href="https://whimsical.com/my-files-UmNkUvuq86GLk3d7wEeM6M">whimsical.com</a></p>
<h2 id="Miro-工具介紹"><a href="#Miro-工具介紹" class="headerlink" title="Miro 工具介紹"></a>Miro 工具介紹</h2><p>首先來到 <a href="https://miro.com/app/dashboard/">Miro 官網</a>註冊會員</p>
<p>註冊好後，點選 New board 建立新工作區</p>
<p><img src="/../images/web-design/notion-19.png"></p>
<h3 id="建立-frame"><a href="#建立-frame" class="headerlink" title="建立 frame"></a>建立 frame</h3><p>進到工作區後可以點擊左側工具欄的 Frame 來建立一個頁面，因為是製作網站線搞圖，所以可以選擇 browser 樣板。</p>
<p><img src="/../images/web-design/notion-20.png"></p>
<h3 id="複製-frame"><a href="#複製-frame" class="headerlink" title="複製 frame"></a>複製 frame</h3><p>在 frame 上按 ctrl+c ctrl+v 可以複製新增頁面</p>
<p><img src="/../images/web-design/notion-21.png"></p>
<h3 id="切換-frame"><a href="#切換-frame" class="headerlink" title="切換 frame"></a>切換 frame</h3><p>按左下角 open frame 可以切換不同 frame</p>
<p><img src="/../images/web-design/notion-23.png"></p>
<h3 id="打字"><a href="#打字" class="headerlink" title="打字"></a>打字</h3><p>選擇左側文字工具可以新增文字</p>
<p><img src="/../images/web-design/notion-22.png"></p>
<h3 id="sticky-note"><a href="#sticky-note" class="headerlink" title="sticky note"></a>sticky note</h3><p>使用 sticky note 標示給設計師的提示</p>
<p><img src="/../images/web-design/notion-26.png"></p>
<p><img src="/../images/web-design/notion-27.png"></p>
<h3 id="形狀工具"><a href="#形狀工具" class="headerlink" title="形狀工具"></a>形狀工具</h3><p>左側形狀工具可以加入不同形狀</p>
<p><img src="/../images/web-design/notion-28.png"></p>
<p>可以使用形狀工具繪製流程圖</p>
<p><img src="/../images/web-design/notion-29.png"></p>
<h3 id="comment-功能"><a href="#comment-功能" class="headerlink" title="comment 功能"></a>comment 功能</h3><p>comment 可以做為團隊間溝通使用</p>
<p><img src="/../images/web-design/notion-30.png"></p>
<p><img src="/../images/web-design/notion-31.png"></p>
<h3 id="wireframe-工具列"><a href="#wireframe-工具列" class="headerlink" title="wireframe 工具列"></a>wireframe 工具列</h3><p>左側工具欄 搜尋 wireframe 可以找到 wireframe 工具列，可以用來繪製網站線稿圖</p>
<p><img src="/../images/web-design/notion-32.png"></p>
<h3 id="邀請團隊成員"><a href="#邀請團隊成員" class="headerlink" title="邀請團隊成員"></a>邀請團隊成員</h3><p>在左側選單選擇 users</p>
<p><img src="/../images/web-design/notion-24.png"></p>
<p>到團隊成員頁面後，點擊 invite new user 邀請新成員</p>
<p><img src="/../images/web-design/notion-25.png"></p>
<h2 id="網站名稱"><a href="#網站名稱" class="headerlink" title="網站名稱"></a>網站名稱</h2><ol>
<li>PetCare-專業寵物保姆</li>
<li>毛寶貝-專業寵物保姆</li>
<li>毛孩福利社-專業寵物保姆</li>
</ol>
<h2 id="常見問題"><a href="#常見問題" class="headerlink" title="常見問題"></a>常見問題</h2><ul>
<li><p>預定寵物保母費用?<br>安親寄宿：媒合費用＄ 300&#x2F;12H 起，會依據毛小孩體型調整。<br>到府保姆：＄ 300&#x2F;次起，單次半小時。超過半小時需加購。<br>遛狗服務：＄ 200&#x2F;次起，單次半小時。超過半小時需加購。<br>到府洗澡：＄ 450&#x2F;次起，費用會依據毛小孩種類與體型有所調整。</p>
<p>所有服務費用皆含「寵物保險」及「服務品質保障」，服務不滿意全額退款。</p>
</li>
<li><p>寵物保母服務包括哪些內容？<br>我們的寵物保母服務包括餵食、散步、洗澡、遊戲和陪伴等。根據您的需求，我們也可以提供特定的服務，如藥物管理和訓練。</p>
</li>
<li><p>如何預訂寵物保母服務？<br>您可以通過我們的網站在線預訂，選擇合適的日期和時間，並提供您的寵物資料。我們會根據您的需求挑選合適的保母,供您選擇並預訂。</p>
</li>
<li><p>如果我的寵物有特殊需求怎麼辦？<br>在預訂時，請詳細告知我們您的寵物有何特殊需求，我們會根據需求選擇最合適的保母，確保您的寵物得到專業的照顧。</p>
</li>
<li><p>那些地區有提供寵物保母服務?<br>全台各地皆有寵物保姆服務。</p>
</li>
<li><p>我可以隨時聯絡寵物保母嗎？<br>是的，您可以通過我們的網站或 App 與保母進行溝通，了解您的寵物狀況。我們也會提供定期更新和照片，讓您隨時了解寵物的情況。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>網頁設計</category>
      </categories>
      <tags>
        <tag>網頁設計</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML-表格與表單設計技巧</title>
    <url>/2024/07/03/2024-07-03-html-table/</url>
    <content><![CDATA[<h2 id="表格基礎介紹"><a href="#表格基礎介紹" class="headerlink" title="表格基礎介紹"></a>表格基礎介紹</h2><p>HTML 表格（tables）用於在網頁中呈現表格。表格是由<table>元素開始和結束，並包含許多子元素來定義表格的各個部分。下面是一些基本元素及其用途：</p>
<p>1.<code> &lt;table&gt;</code>：定義表格的開始和結束。 2. <code>&lt;tr&gt;</code>（Table Row）：定義表格中的一行。 3.<code>&lt;th&gt;</code>（Table Header）：定義表格中的表頭單元格，通常是表格的標題。 4. <code>&lt;td&gt;</code>（Table Data）：定義表格中的數據單元格。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年齡<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>職業<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>王小名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>15<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>學生<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="設定表格樣式"><a href="#設定表格樣式" class="headerlink" title="設定表格樣式"></a>設定表格樣式</h3><p>因為在表格設定 border 時，預設會有格與格的間距，如下圖</p>
<p><img src="/../images/css/table-1.png"></p>
<p>在 css reset 上會將表格與表格空隙清除</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// css reset</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>清除空隙後可以設定 border 樣式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.table</span> <span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-class">.table</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="selector-tag">th</span> 欄位用<span class="attribute">padding</span>推出空間</span><br><span class="line"><span class="selector-class">.table</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="selector-tag">td</span> 欄位用<span class="attribute">padding</span>推出空間</span><br><span class="line"><span class="selector-class">.table</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../images/css/table-2.png"></p>
<h2 id="表單元素介紹"><a href="#表單元素介紹" class="headerlink" title="表單元素介紹"></a>表單元素介紹</h2><p>HTML 表單是用來收集使用者輸入資料的工具，廣泛應用於各種網站和網頁應用程式中。表單由一組 HTML 元素組成，每個元素都具有特定的功能，如文本輸入框、單選按鈕、複選框和下拉選單等。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mail&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;person&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;確認送出&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>表單內容會放在 <code>form</code> 元素內，在 input 欄位內輸入的資料，在按下 submit 按鈕後，會依照 name 的值，將資料傳送出去，網址會像這樣:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.html?mail=abc@mail.com&amp;person=小明</span><br></pre></td></tr></table></figure>

<p>上面 mail 和 person 欄位分別帶入輸入的值。</p>
<h3 id="label、placeholder"><a href="#label、placeholder" class="headerlink" title="label、placeholder"></a>label、placeholder</h3><p><img src="/../images/css/form/form-1.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;person&quot;</span> <span class="attr">placehoder</span>=<span class="string">&quot;請輸入文字欄位&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 input 上加入 placehoder，可以添加提示文字，讓使用者知道要輸入什麼資料，建議 input 都要搭配 label，用 for 和 id 互相對應。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mail&quot;</span>&gt;</span>電子郵件：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;mail&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;請輸入電子郵件&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mail&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 label 元素加上與 input 元素對應的 id，當使用者點擊 label 時， input 輸入框就會自動被選取，增加使用者體驗。</p>
<h2 id="input-類型"><a href="#input-類型" class="headerlink" title="input 類型"></a>input 類型</h2><ol>
<li>type&#x3D;”date”: 會跳出日曆選擇器，但在每個瀏覽器會不太相同，建議使用 datepicker 的套件代替。</li>
<li>type&#x3D;”text”: 純文字欄位</li>
<li>type&#x3D;”email”: 輸入 email 欄位</li>
<li>type&#x3D;”range”: 會出現範圍拉條</li>
<li>type&#x3D;”number”: 只能輸入數字，不能輸入字母</li>
<li>type&#x3D;”tel”: 手機版會跳出電話鍵盤</li>
</ol>
<p>其他 type 可以參考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input">MDN</a></p>
<h2 id="input-屬性"><a href="#input-屬性" class="headerlink" title="input 屬性"></a>input 屬性</h2><ol>
<li>readonly: 僅能讀取，不能寫入</li>
<li>disabled: 禁用</li>
<li>required: 必填欄位，可做簡易驗證。</li>
</ol>
<h2 id="radio、checkbox"><a href="#radio、checkbox" class="headerlink" title="radio、checkbox"></a>radio、checkbox</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>性別<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在表單中，radio 是作為單選題使用，使用相同的 name 來將選項群組。</p>
<p><img src="/../images/css/form/form-2.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>興趣<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;movie&quot;</span> <span class="attr">id</span>=<span class="string">&quot;movie&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;movie&quot;</span>&gt;</span>看電影<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span> <span class="attr">id</span>=<span class="string">&quot;music&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;music&quot;</span>&gt;</span>聽音樂<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;paint&quot;</span> <span class="attr">id</span>=<span class="string">&quot;paint&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;paint&quot;</span>&gt;</span>畫畫<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在表單中，checkbox 是作為多選題使用，使用相同的 name 來將選項群組。</p>
<p><img src="/../images/css/form/form-3.png"></p>
<h2 id="select、textarea"><a href="#select、textarea" class="headerlink" title="select、textarea"></a>select、textarea</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;birth&quot;</span>&gt;</span>生日：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">id</span>=<span class="string">&quot;birth&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1900&quot;</span>&gt;</span>1900<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1901&quot;</span>&gt;</span>1901<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;確認送出&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../images/css/form/form-4.png"></p>
<p>select 會搭配 option 元素使用，option 是下拉選單的選項，value 則是表單送出會帶入的值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;60&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>textarea 用來輸入多行文字的表單元素，cols 代表一行可以輸入幾個文字，rows 代表能輸入多少列。</p>
<p><img src="/../images/css/form/form-5.png"></p>
<h2 id="CSS-自訂表單樣式"><a href="#CSS-自訂表單樣式" class="headerlink" title="CSS 自訂表單樣式"></a>CSS 自訂表單樣式</h2><p>我們可以使用 CSS 自訂表單樣式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-input&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text-input</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid pink;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span><br><span class="line">  apperance: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 表單和按鈕最好做一樣大，因為常會放在一起。</span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面設定後就可以產生下面樣式的 input</p>
<p><img src="/../images/css/form/form-6.png"></p>
<p>設定樣式時，也要記得加上:focus, active</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text-input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 按鈕可以加上 hover，被滑入時樣式</span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 按鈕可以加上 active，被點擊時樣式</span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:active</span>,</span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>(1) notion 教學</title>
    <url>/2024/07/17/2024-07-17-notion-tutorial/</url>
    <content><![CDATA[<h2 id="註冊-Notion-服務教學"><a href="#註冊-Notion-服務教學" class="headerlink" title="註冊 Notion 服務教學"></a>註冊 Notion 服務教學</h2><ol>
<li>到 <a href="https://www.notion.so/">notion 官網</a>點擊 get notion free</li>
</ol>
<p><img src="/../images/web-design/notion-1.png"></p>
<ol start="2">
<li>選擇註冊方式</li>
</ol>
<p><img src="/../images/web-design/notion-2.png"></p>
<ol start="3">
<li>選擇是個人還是團隊用</li>
</ol>
<p><img src="/../images/web-design/notion-3.png"></p>
<ol start="4">
<li>這樣成功註冊囉</li>
</ol>
<p><img src="/../images/web-design/notion-4.png"></p>
<h2 id="工作區、頁面、區塊"><a href="#工作區、頁面、區塊" class="headerlink" title="工作區、頁面、區塊"></a>工作區、頁面、區塊</h2><h3 id="工作區"><a href="#工作區" class="headerlink" title="工作區"></a>工作區</h3><p><img src="/../images/web-design/notion-5.png"></p>
<p>點擊左上角可以切換不同帳號的工作區，比如公司可能會把你加入公司群組，就會有公司的工作區。</p>
<h3 id="頁面"><a href="#頁面" class="headerlink" title="頁面"></a>頁面</h3><p>在工作區左側可以建立不同頁面</p>
<p><img src="/../images/web-design/notion-6.png"></p>
<p>單個頁面內也可以在有頁面</p>
<p><img src="/../images/web-design/notion-8.png"></p>
<h3 id="區塊"><a href="#區塊" class="headerlink" title="區塊"></a>區塊</h3><p>在頁面內可以透過輸入 &#x2F; 建立不同區塊 block </p>
<p><img src="/../images/web-design/notion-7.png"></p>
]]></content>
      <categories>
        <category>notion 教學</category>
      </categories>
      <tags>
        <tag>notion 教學</tag>
      </tags>
  </entry>
  <entry>
    <title>(2) notion 教學-database</title>
    <url>/2024/07/18/2024-07-18-notion-database/</url>
    <content><![CDATA[<h2 id="database-資料庫"><a href="#database-資料庫" class="headerlink" title="database 資料庫"></a>database 資料庫</h2><p>在 notion page 裡輸入 &#x2F;table，可以增加一個資料庫</p>
<p><img src="/../images/web-design/notion-9.png"></p>
<p>資料庫每一欄都可以選擇屬性類型</p>
<p><img src="/../images/web-design/notion-10.png"></p>
<p>比如下方資料庫就有 select下拉選單、checkbox 兩種屬性欄位</p>
<p><img src="/../images/web-design/notion-11.png"></p>
<h2 id="拉-page-進資料庫"><a href="#拉-page-進資料庫" class="headerlink" title="拉 page 進資料庫"></a>拉 page 進資料庫</h2><p>若有其他 page 想放進資料庫，可以直接拖曳 page 到資料庫欄位</p>
<p><img src="/../images/web-design/notion-12.png"></p>
<h2 id="建立-2-5-人小專案"><a href="#建立-2-5-人小專案" class="headerlink" title="建立 2~5 人小專案"></a>建立 2~5 人小專案</h2><p>table 也可以用來管理 2-5 人小專案，輸入任務名稱、負責人員、狀態等。</p>
<p><img src="/../images/web-design/notion-14.png"></p>
<h2 id="資料庫篩選"><a href="#資料庫篩選" class="headerlink" title="資料庫篩選"></a>資料庫篩選</h2><p>若想篩選資料庫內資料，例如我只想看小明任務執行如何，可以點擊table 上方 filter 按鈕，篩選負責人員為小明。</p>
<p><img src="/../images/web-design/notion-15.png"></p>
<h2 id="資料庫排序"><a href="#資料庫排序" class="headerlink" title="資料庫排序"></a>資料庫排序</h2><p>若想對 table 資料做排序，可以使用 sort 功能</p>
<p><img src="/../images/web-design/notion-16.png"></p>
]]></content>
      <categories>
        <category>notion 教學</category>
      </categories>
      <tags>
        <tag>notion 教學</tag>
      </tags>
  </entry>
  <entry>
    <title>(2) wireframe 線稿圖</title>
    <url>/2024/07/17/2024-07-17-wireframe/</url>
    <content><![CDATA[<h2 id="線稿圖"><a href="#線稿圖" class="headerlink" title="線稿圖"></a>線稿圖</h2><p>Wireframe 是一種視覺指南，用於表示網站或應用程式的骨架結構。它在設計過程的早期階段使用，用於勾勒頁面的基本結構和佈局，而不關注設計細節，如顏色、字體或圖片。以下是 wireframe 的一些關鍵方面：</p>
<ol>
<li><p>結構和佈局：Wireframe 專注於頁面上元素的排列，如標題、頁腳、導航菜單、內容區域和按鈕。</p>
</li>
<li><p>功能性：它展示了不同元素之間的關係和互動，例如按鈕點擊後會發生什麼。</p>
</li>
<li><p>用戶體驗：Wireframe 幫助設計師和開發者確定用戶如何導航和使用網站或應用程式。</p>
</li>
<li><p>簡單和明確：由於 wireframe 只關注結構和功能，所以通常是簡單的黑白圖，不包含視覺設計元素。</p>
</li>
<li><p>溝通工具：Wireframe 是設計師、開發者和客戶之間的重要溝通工具，用於討論和確認頁面的基本佈局和功能。</p>
</li>
</ol>
<h2 id="線稿圖功能"><a href="#線稿圖功能" class="headerlink" title="線稿圖功能"></a>線稿圖功能</h2><p>線稿圖作為和客戶外部溝通和工程師內部溝通使用</p>
<p><img src="/../images/web-design/notion-17.png"></p>
<p>線稿圖繪製時，每一頁都要標上編號，如 1-1 是個人主頁，才能確認線稿圖和網站地圖是一致的。</p>
<p><img src="/../images/web-design/notion-18.png"></p>
<h2 id="線搞圖常見問題"><a href="#線搞圖常見問題" class="headerlink" title="線搞圖常見問題"></a>線搞圖常見問題</h2><p>首頁 banner 最好搭配搜尋列，讓使用者能直接進行購買</p>
<p><img src="/../images/web-design/notion-43.png"></p>
]]></content>
      <categories>
        <category>網頁設計</category>
      </categories>
      <tags>
        <tag>網頁設計</tag>
      </tags>
  </entry>
  <entry>
    <title>(1) Tailwind CSS 安裝</title>
    <url>/2024/07/20/2024-07-20-tailwind-1/</url>
    <content><![CDATA[<h2 id="CDN-安裝"><a href="#CDN-安裝" class="headerlink" title="CDN 安裝"></a>CDN 安裝</h2><p>第一種安裝方式就是直接引入 tailwind 的 cdn， <a href="https://tailwindcss.com/docs/installation/play-cdn">cdn連結</a>。引入後就可以直接使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.tailwindcss.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-3xl font-bold text-blue-600&quot;</span>&gt;</span></span><br><span class="line">    Hello world!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但正式專案不建議使用 tailwind</p>
<ol>
<li>CDN 若有問題，會連帶影響專案</li>
<li>CDN 只是用來給開發階段使用，並不適合用來作為正式專案運行的方式</li>
</ol>
<h2 id="使用-Tailwind-Cli"><a href="#使用-Tailwind-Cli" class="headerlink" title="使用 Tailwind Cli"></a>使用 Tailwind Cli</h2><p>Tailwind CLI 專案開啟步驟</p>
<ol>
<li>下載 node </li>
<li>桌面新增一個空的資料夾 「tailwind-demo」</li>
<li>在資料夾目錄底下安裝 tailwind</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -D tailwindcss</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>新增 tailwind.config.js</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx tailwindcss init</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>修改 tailwind.config.js</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">content</span>: [<span class="string">&#x27;./src/**/*.&#123;html,js&#125;&#x27;</span>],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面這段設定會去找 src 資料夾底下所有 html，js 檔，只要有使用 tailwind css 就會編譯。所以要在專案新增 src 資料夾，並新增 index.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-src</span><br><span class="line"> -index.html</span><br><span class="line">tailwind.config.js</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>新增 input.css</li>
</ol>
<p>在 src 資料夾下新增 input.css，並放入下面程式碼</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>編譯 CSS 檔案</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx tailwindcss -i ./src/input.css -o ./dist/output.css --watch</span><br></pre></td></tr></table></figure>

<p>上面這段指令就是指定 input css(編譯前檔案) 和 output css (編譯後檔案)，翻成白話文如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;CSS檔&#125; output &#123;輸出的CSS檔&#125; 監控編譯</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>在 html 引入編譯後 css</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;../dist/output.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="9">
<li>運行 Live Server 查看結果</li>
</ol>
<p>在 index.html 運行 live server 即可看到樣式被套用</p>
<ol start="10">
<li>整體專案結構</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tailwind-demo/</span><br><span class="line">│</span><br><span class="line">├─── dist/</span><br><span class="line">│   │</span><br><span class="line">│   └─── output.css</span><br><span class="line">│</span><br><span class="line">├─── node_modules/</span><br><span class="line">│</span><br><span class="line">├─── src/</span><br><span class="line">│   │</span><br><span class="line">│   ├─── index.html        </span><br><span class="line">│   └─── input.css  </span><br><span class="line">│</span><br><span class="line">├─── tailwind.config.js    </span><br><span class="line">└─── package-lock.json       </span><br></pre></td></tr></table></figure>

<ul>
<li>src 資料夾是主要我們會更動的部分，(html 和 css)</li>
<li>dist 資料夾是編譯後產出的檔案</li>
<li>node_modules 是負責用來存放經由 npm 安裝過後的套件</li>
<li>tailwind.config.js 是 整專案的 Tailwind 配置設定</li>
<li>package-lock.json 使用 json 撰寫的描述文件</li>
</ul>
]]></content>
      <categories>
        <category>Tailwind CSS</category>
      </categories>
      <tags>
        <tag>Tailwind CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>(2) Tailwind CSS 客製化</title>
    <url>/2024/07/20/2024-07-20-tailwind-2/</url>
    <content><![CDATA[<h2 id="客製化樣式"><a href="#客製化樣式" class="headerlink" title="客製化樣式"></a>客製化樣式</h2><p>在 tailwind.config.js 檔的可以設定客製化樣式，共有兩種方式</p>
<ol>
<li>寫在 theme 裡，會蓋掉原有 tailwind 的樣式，如下圖 tailwind 原有的 color 樣式會消失。</li>
</ol>
<p><img src="/../images/css/tailwind/tailwind-1.png"></p>
<ol start="2">
<li>寫在 extend 裡，tailwind 原有的樣式會保留，並擴充新增的樣式</li>
</ol>
<p><img src="/../images/css/tailwind/tailwind-2.png"></p>
<p>除了單獨字串寫法，也支援物件形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme</span>: &#123;</span><br><span class="line">  <span class="attr">colors</span>: &#123;</span><br><span class="line">    <span class="attr">transparent</span>: <span class="string">&#x27;transparent&#x27;</span>,</span><br><span class="line">    <span class="attr">current</span>: <span class="string">&#x27;currentColor&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;white&#x27;</span>: <span class="string">&#x27;#ffffff&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;tahiti&#x27;</span>: &#123;</span><br><span class="line">      <span class="number">100</span>: <span class="string">&#x27;#cffafe&#x27;</span>,</span><br><span class="line">      <span class="number">200</span>: <span class="string">&#x27;#a5f3fc&#x27;</span>,</span><br><span class="line">      <span class="number">300</span>: <span class="string">&#x27;#67e8f9&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;maroon&#x27;</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;light&#x27;</span>: <span class="string">&#x27;#FBF2F2&#x27;</span>,</span><br><span class="line">      <span class="attr">DEFAULT</span>: <span class="string">&#x27;#AA0601&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;dark&#x27;</span>: <span class="string">&#x27;#650300&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>所以當我們在 HTML 中使用時就會變成以下範例<br>文字顏色：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-maroon&quot;</span>&gt;</span>文字 - 紅色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-maroon-light&quot;</span>&gt;</span>文字 - 紅淺色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-maroon-dark&quot;</span>&gt;</span>文字 - 紅深色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>背景色：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-maroon&quot;</span>&gt;</span>背景 - 紅色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-maroon-light&quot;</span>&gt;</span>背景 - 紅淺色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-maroon-dark&quot;</span>&gt;</span>背景 - 紅深色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>每個屬性在 theme 裡的名稱，可以在<a href="https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/config.full.js#L7">文件中</a>查詢</p>
<p><img src="/../images/css/tailwind/tailwind-3.png"></p>
<h2 id="全站樣式設定"><a href="#全站樣式設定" class="headerlink" title="全站樣式設定"></a>全站樣式設定</h2><p>tailwind 本身就有寫自己的 base 全站設定，是參考 css normalize 調整的。若要擴充專案的 base 全站樣式設定，可以使用 @layer base。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// <span class="selector-tag">input</span><span class="selector-class">.css</span></span><br><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@layer</span> base &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">500</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上編譯順序為: base &#x3D;&gt; 自己的 base &#x3D;&gt; components &#x3D;&gt; utilities</p>
<p>如果想帶入 tailwind 的變數時，可以使用 @apply</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// <span class="selector-tag">input</span><span class="selector-class">.css</span></span><br><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@layer</span> base &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="keyword">@apply</span> font-medium;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="擴充-utilities"><a href="#擴充-utilities" class="headerlink" title="擴充 utilities"></a>擴充 utilities</h2><p>如果想新增 tailwind 沒有的 utilities class ，可以用 @layer utilities 設定</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// <span class="selector-tag">input</span><span class="selector-class">.css</span></span><br><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@layer</span> utilities &#123;</span><br><span class="line">  <span class="selector-class">.filter-none</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自訂元件"><a href="#自訂元件" class="headerlink" title="自訂元件"></a>自訂元件</h2><p>若要自定義元件，可以用 @apply components，但作者不建議過度使用 component，因為違反了 tailwind utilities 的概念，只建議用在 btn 按鈕跟表單上。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// <span class="selector-tag">input</span><span class="selector-class">.css</span></span><br><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@layer</span> components &#123;</span><br><span class="line">  <span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可用在定義外部套件樣式時</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@layer</span> components &#123;</span><br><span class="line">  <span class="selector-class">.select2-dropdown</span> &#123;</span><br><span class="line">    <span class="keyword">@apply</span> rounded-b-lg shadow-md;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.select2-search</span> &#123;</span><br><span class="line">    <span class="keyword">@apply</span> border border-gray-<span class="number">300</span> rounded;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.select2-results__group</span> &#123;</span><br><span class="line">    <span class="keyword">@apply</span> text-lg font-bold text-gray-<span class="number">900</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tailwind CSS</category>
      </categories>
      <tags>
        <tag>Tailwind CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>(4) Tailwind CSS  響應式與container容器</title>
    <url>/2024/07/23/2024-07-23-tailwind-4/</url>
    <content><![CDATA[<h2 id="斷點設計"><a href="#斷點設計" class="headerlink" title="斷點設計"></a>斷點設計</h2><p>Tailwind 是響應式設計是手機優先，從手機版寫到桌機版，使用 min-width 的寫法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 數字由小往大撰寫</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1024px</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>tailwind 斷點</li>
</ul>
<table>
<thead>
<tr>
<th>斷點名稱</th>
<th>最大寬度（px）</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>sm</code></td>
<td>640px</td>
<td>小尺寸設備（手機）</td>
</tr>
<tr>
<td><code>md</code></td>
<td>768px</td>
<td>中尺寸設備（平板）</td>
</tr>
<tr>
<td><code>lg</code></td>
<td>1024px</td>
<td>大尺寸設備（小型桌面）</td>
</tr>
<tr>
<td><code>xl</code></td>
<td>1280px</td>
<td>超大尺寸設備（桌面）</td>
</tr>
<tr>
<td><code>2xl</code></td>
<td>1536px</td>
<td>超超大尺寸設備（桌面）</td>
</tr>
</tbody></table>
<ul>
<li>使用方式</li>
</ul>
<p>斷點:樣式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;w-16 md:w-32 md:h-12 lg:w-48&quot;</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="客製化斷點尺寸"><a href="#客製化斷點尺寸" class="headerlink" title="客製化斷點尺寸"></a>客製化斷點尺寸</h2><p>在 tailwind 裡客製化斷點尺寸很簡單，只要設定 srceens 的值即可</p>
<ol>
<li>擴充 screens 的值，寫在 extend 裡。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tailwind.config.js</span></span><br><span class="line"><span class="attr">theme</span>: &#123;</span><br><span class="line">  <span class="attr">extend</span>: &#123;</span><br><span class="line">    <span class="attr">screens</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;3xl&#x27;</span>: <span class="string">&#x27;1600px&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>覆蓋原有的斷點，寫在 theme 裡。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tailwind.config.js</span></span><br><span class="line"><span class="attr">theme</span>: &#123;</span><br><span class="line">  <span class="attr">screens</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;sm&#x27;</span>: <span class="string">&#x27;576px&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;md&#x27;</span>: <span class="string">&#x27;960px&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lg&#x27;</span>: <span class="string">&#x27;1440px&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="使用-max-width"><a href="#使用-max-width" class="headerlink" title="使用 max-width"></a>使用 max-width</h2><p>想使用 max-width 斷點，也就是從桌機寫到手機板的話，可以這樣設定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme</span>: &#123;</span><br><span class="line">  <span class="attr">screens</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;2xl&#x27;</span>: &#123;<span class="string">&#x27;max&#x27;</span>: <span class="string">&#x27;1535px&#x27;</span>&#125;,</span><br><span class="line">    <span class="comment">// =&gt; @media (max-width: 1535px) &#123; ... &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;xl&#x27;</span>: &#123;<span class="string">&#x27;max&#x27;</span>: <span class="string">&#x27;1279px&#x27;</span>&#125;,</span><br><span class="line">    <span class="comment">// =&gt; @media (max-width: 1279px) &#123; ... &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;lg&#x27;</span>: &#123;<span class="string">&#x27;max&#x27;</span>: <span class="string">&#x27;1023px&#x27;</span>&#125;,</span><br><span class="line">    <span class="comment">// =&gt; @media (max-width: 1023px) &#123; ... &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;md&#x27;</span>: &#123;<span class="string">&#x27;max&#x27;</span>: <span class="string">&#x27;767px&#x27;</span>&#125;,</span><br><span class="line">    <span class="comment">// =&gt; @media (max-width: 767px) &#123; ... &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;sm&#x27;</span>: &#123;<span class="string">&#x27;max&#x27;</span>: <span class="string">&#x27;639px&#x27;</span>&#125;,</span><br><span class="line">    <span class="comment">// =&gt; @media (max-width: 639px) &#123; ... &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="container-設定"><a href="#container-設定" class="headerlink" title="container 設定"></a>container 設定</h2><p>在 theme 裡可以設定 container 為 center 來置中 container，並設定 x 軸的 padding，確保 container 在手機版會在兩邊保有空間。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tailwind.config.js</span></span><br><span class="line"><span class="attr">theme</span>: &#123;</span><br><span class="line">  <span class="attr">container</span>: &#123;</span><br><span class="line">    <span class="attr">center</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">padding</span>: <span class="string">&#x27;12px&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="RWD-格線系統設計"><a href="#RWD-格線系統設計" class="headerlink" title="RWD 格線系統設計"></a>RWD 格線系統設計</h2><p>當我們想要利用 Tailwind padding 去做出格線系統時：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container mx-auto px-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex flex-wrap -mx-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w-1/2 px-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w-1/2 px-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不過 Tailwind 文件中有提供 container 預設置中與水平 padding 的作法，我們就可以透過在 tailwind.config.js 設定 container 來省去每次撰寫的 mx-auto 和 px-3。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 theme 物件中新增 container 的設定</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">content</span>: [<span class="string">&quot;./app/**/*.&#123;html,ejs&#125;&quot;</span>],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">container</span>: &#123;</span><br><span class="line">      <span class="attr">center</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">padding</span>: <span class="string">&quot;12px&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tailwind CSS</category>
      </categories>
      <tags>
        <tag>Tailwind CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>(3) 面試官也喜歡的首頁設計</title>
    <url>/2024/08/04/2024-08-04-user-front-page/</url>
    <content><![CDATA[<h2 id="首頁動線規劃"><a href="#首頁動線規劃" class="headerlink" title="首頁動線規劃"></a>首頁動線規劃</h2><h3 id="服務命名"><a href="#服務命名" class="headerlink" title="服務命名"></a>服務命名</h3><p>服務命名：以一句話介紹你所提供的服務</p>
<p><img src="/../images/web-design/notion-33.png" alt="Amazing Talker"><br><img src="/../images/web-design/notion-34.png" alt="Uber"></p>
<h3 id="提出痛點"><a href="#提出痛點" class="headerlink" title="提出痛點"></a>提出痛點</h3><p>提出痛點：提出潛在客戶的困擾</p>
<p><img src="/../images/web-design/notion-35.png" alt="六角學院"><br><img src="/../images/web-design/notion-36.png" alt="短網址服務"></p>
<h3 id="產品推薦"><a href="#產品推薦" class="headerlink" title="產品推薦"></a>產品推薦</h3><p>產品推薦：提出產品優勢</p>
<p><img src="/../images/web-design/notion-37.png" alt="短網址服務"><br><img src="/../images/web-design/notion-38.png" alt="六角學院"></p>
<h3 id="第三方背書"><a href="#第三方背書" class="headerlink" title="第三方背書"></a>第三方背書</h3><p>客戶好友評價，或有力廠商評價</p>
<p><img src="/../images/web-design/notion-39.png" alt="botbonnie"><br><img src="/../images/web-design/notion-40.png" alt="hahow"></p>
<h3 id="引導購買"><a href="#引導購買" class="headerlink" title="引導購買"></a>引導購買</h3><p>引導客戶購買行為</p>
<p><img src="/../images/web-design/notion-33.png" alt="Amazing Talker"><br><img src="/../images/web-design/notion-41.png" alt="AWs"></p>
<h3 id="常見問題"><a href="#常見問題" class="headerlink" title="常見問題"></a>常見問題</h3><p>解決客戶疑問</p>
<p><img src="/../images/web-design/notion-42.png"></p>
]]></content>
      <categories>
        <category>網頁設計</category>
      </categories>
      <tags>
        <tag>網頁設計</tag>
      </tags>
  </entry>
  <entry>
    <title>(1) Gsap- 環境安裝</title>
    <url>/2024/08/09/2024-08-09-gsap-1/</url>
    <content><![CDATA[<h2 id="建立專案環境"><a href="#建立專案環境" class="headerlink" title="建立專案環境"></a>建立專案環境</h2><p>先建立 index.html、all.js、all.css</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- index.html</span><br><span class="line">- all.js</span><br><span class="line">- all.css</span><br></pre></td></tr></table></figure>

<p>在 index.html 中引入 gasp cdn</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hant-TW&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;all.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blueBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/gsap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;all.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 all.js 即可寫入 gasp 基本語法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> blueBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.blueBox&quot;</span>);</span><br><span class="line"></span><br><span class="line">gsap.<span class="title function_">to</span>(blueBox, &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">rotation</span>: <span class="number">180</span>,</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  <span class="attr">ease</span>: <span class="string">&quot;bounce.in&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="to、from、fromTo-語法"><a href="#to、from、fromTo-語法" class="headerlink" title="to、from、fromTo 語法"></a>to、from、fromTo 語法</h2><ul>
<li>to: 預設位置 &#x3D;&gt; 指定位置</li>
<li>from: 指定位置 &#x3D;&gt; 預設位置</li>
<li>fromTo: 同時設定起點和終點</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> blueBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.blueBox&quot;</span>);</span><br><span class="line"><span class="comment">// to</span></span><br><span class="line"><span class="comment">// 元素從原本位置向右移動500</span></span><br><span class="line">gsap.<span class="title function_">to</span>(blueBox, &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">rotation</span>: <span class="number">180</span>,</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  <span class="attr">ease</span>: <span class="string">&quot;bounce.in&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// from</span></span><br><span class="line"><span class="comment">// 元素從 x 500位置回到原本位置</span></span><br><span class="line">gsap.<span class="title function_">from</span>(blueBox, &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">rotation</span>: <span class="number">180</span>,</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  <span class="attr">ease</span>: <span class="string">&quot;bounce.in&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fromTo</span></span><br><span class="line">gsap.<span class="title function_">fromTo</span>(</span><br><span class="line">  blueBox,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">rotation</span>: <span class="number">180</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">rotation</span>: <span class="number">180</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&quot;pink&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h2><p>若希望動畫能在指定時間後再撥放，可用 delay 語法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等待五秒後在動畫</span></span><br><span class="line">gsap.<span class="title function_">to</span>(greenBox, &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">  <span class="attr">delay</span>: <span class="number">1.5</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h2><p>可使用 repeat 指定動畫重複次數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 repeat 執行 2次動畫</span></span><br><span class="line">gsap.<span class="title function_">to</span>(greenBox, &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">  <span class="attr">delay</span>: <span class="number">1.5</span>,</span><br><span class="line">  <span class="attr">repeat</span>: <span class="number">2</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>repeat 設定 -1 可以不斷執行動畫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 repeat 執行 2次動畫</span></span><br><span class="line">gsap.<span class="title function_">to</span>(greenBox, &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">  <span class="attr">repeat</span>: -<span class="number">1</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="動畫速率設定"><a href="#動畫速率設定" class="headerlink" title="動畫速率設定"></a>動畫速率設定</h2><p>動畫速率可以參考 <a href="https://gsap.com/docs/v3/Eases/">官網</a> 來設定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設定 ease 參數設定速率</span></span><br><span class="line">gsap.<span class="title function_">to</span>(target, &#123;</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">2.5</span>,</span><br><span class="line">  <span class="attr">ease</span>: <span class="string">&quot;power4.out&quot;</span>,</span><br><span class="line">  <span class="attr">y</span>: -<span class="number">250</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/../images/css/gsap/gsap-1.png"></p>
<p>每種速率都可選擇 out in 等模式，可以在官網查看效果。</p>
<h2 id="timeline-時間軸群組化"><a href="#timeline-時間軸群組化" class="headerlink" title="timeline 時間軸群組化"></a>timeline 時間軸群組化</h2><p>如果有多個物件要設定彼此動畫先後順序，可以用 timeline 群組化，就不用每一個用 delay 自己算延遲時間。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> blueBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.blueBox&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> greenBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.greenBox&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeline = gsap.<span class="title function_">timeline</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一個動畫跑完自動跑第二個動畫</span></span><br><span class="line">timeline.<span class="title function_">to</span>(blueBox, &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">300</span>,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">timeline.<span class="title function_">to</span>(greenBox, &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果有兩個物件想等第一個物件動畫完後再一起跑時，可以設定 -&#x3D; 語法。</p>
<p>blueBox、 greenBox 會在 pinkBox 跑到第二秒時一起跑。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timeline = gsap.<span class="title function_">timeline</span>();</span><br><span class="line"></span><br><span class="line">timeline.<span class="title function_">to</span>(pinkBox, &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">timeline.<span class="title function_">to</span>(</span><br><span class="line">  blueBox,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;-=3&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">timeline.<span class="title function_">to</span>(</span><br><span class="line">  greenBox,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;-=3&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Gsap-動畫套件</category>
      </categories>
      <tags>
        <tag>Gsap-動畫套件</tag>
      </tags>
  </entry>
  <entry>
    <title>(3) notion 教學-board</title>
    <url>/2024/08/06/2024-08-06-notion-board/</url>
    <content><![CDATA[<h2 id="建立-board-database"><a href="#建立-board-database" class="headerlink" title="建立 board database"></a>建立 board database</h2><p>在 notion 中輸入 &#x2F; 選擇 board database</p>
<p><img src="/../images/web-design/notion-44.png"></p>
<p>會出現還未開始、進行中、完成 三種狀態</p>
<p><img src="/../images/web-design/notion-45.png"></p>
<p>在狀態下可以新增 任務卡片</p>
<p><img src="/../images/web-design/notion-46.png"></p>
<p>卡片內可以設定任務負責人，完成時間等狀態</p>
<p><img src="/../images/web-design/notion-47.png"></p>
<p>在 table 右上角的三個點，可以設定每張卡片預設顯示狀態</p>
<p><img src="/../images/web-design/notion-48.png"></p>
<p>這邊我設定預設顯示 日期、負責人員</p>
<p><img src="/../images/web-design/notion-49.png"></p>
<h2 id="設定任務優先順序"><a href="#設定任務優先順序" class="headerlink" title="設定任務優先順序"></a>設定任務優先順序</h2><p>可以幫不同任務卡片加上優先順序 低、中、高，才知道哪個任務要先進行</p>
<p><img src="/../images/web-design/notion-50.png"></p>
]]></content>
      <categories>
        <category>notion 教學</category>
      </categories>
      <tags>
        <tag>notion 教學</tag>
      </tags>
  </entry>
  <entry>
    <title>(1) Gsap- scrollTrigger</title>
    <url>/2024/08/09/2024-08-09-gsap-2/</url>
    <content><![CDATA[<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><p>在<a href="https://gsap.com/docs/v3/Installation/?tab=cdn&module=esm&method=private+registry&tier=free&club=false&require=false&trial=true&plugins=ScrollTrigger">官網</a>安裝頁面，勾選 scrollTrigger 套件</p>
<p><img src="/../images/css/gsap/gsap-2.png"></p>
<p>即可複製 scrollTrigger cdn</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/gsap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/ScrollTrigger.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>設定 scrollTrigger</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 載入 ScrollTrigger</span></span><br><span class="line">gsap.<span class="title function_">registerPlugin</span>(<span class="title class_">ScrollTrigger</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卷軸滾到 blueBox 才觸發動畫</span></span><br><span class="line">gsap.<span class="title function_">to</span>(blueBox, &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">scrollTrigger</span>: blueBox,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Gsap-動畫套件</category>
      </categories>
      <tags>
        <tag>Gsap-動畫套件</tag>
      </tags>
  </entry>
  <entry>
    <title>(3) Tailwind CSS 套件運用</title>
    <url>/2024/07/20/2024-07-20-tailwind-3/</url>
    <content><![CDATA[<h2 id="表單套件"><a href="#表單套件" class="headerlink" title="表單套件"></a>表單套件</h2><p>首先來到表單套件<a href="https://github.com/tailwindlabs/tailwindcss-forms">官網</a> 安裝套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -D @tailwindcss/forms </span><br></pre></td></tr></table></figure>

<p>在 tailwind.config.js 中的 require 引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">content</span>: [<span class="string">&#x27;./src/**/*.&#123;html,js&#125;&#x27;</span>],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;@tailwindcss/forms&#x27;</span>),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就可以直接複製範例中的<a href="https://tailwindcss-forms.vercel.app/">表單</a>，套用到自己的專案中囉。</p>
]]></content>
      <categories>
        <category>Tailwind CSS</category>
      </categories>
      <tags>
        <tag>Tailwind CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt (1) Nuxt 運作原理與安裝</title>
    <url>/2024/08/12/2024-08-12-nuxt-1/</url>
    <content><![CDATA[<h2 id="Nuxt-是什麼"><a href="#Nuxt-是什麼" class="headerlink" title="Nuxt 是什麼"></a>Nuxt 是什麼</h2><p>Nuxt.js 是一個基於 Vue.js 的開源框架，用於構建現代化的、伺服器端渲染（SSR）或靜態網站生成的應用程式。</p>
<p><img src="/../images/js/vue/vue-2.png"></p>
<p>當伺服器接收到前端傳來的請求時，會在伺服器端用 vue 將頁面渲染好</p>
<p><img src="/../images/js/vue/vue-3.png"></p>
<p>前端接收到的是已經渲染好的 html 檔</p>
<p><img src="/../images/js/vue/vue-4.png"></p>
<p>另外也會回傳一個 js 檔，將 vue 的功能和互動加載到頁面，頁面的切換都由前端的 vue router 進行。所以 nuxt 是綜合了 ssr 和 csr ，當一開始頁面載入時是使用 ssr (server side rendering)，之後頁面的切換則是 csr 在前端渲染。</p>
<h2 id="Nuxt-安裝"><a href="#Nuxt-安裝" class="headerlink" title="Nuxt 安裝"></a>Nuxt 安裝</h2><p>依照<a href="https://nuxt.com/docs/getting-started/installation">官網</a>步驟安裝</p>
<ol>
<li>開啟新專案，輸入</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx nuxi@latest init &lt;project-name&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>移動到新增專案資料夾</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code &lt;project-name&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>開啟開發伺服器</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt (2) 新增其他頁面</title>
    <url>/2024/08/12/2024-08-12-nuxt-2/</url>
    <content><![CDATA[<h2 id="新增其他頁面"><a href="#新增其他頁面" class="headerlink" title="新增其他頁面"></a>新增其他頁面</h2><p>在專案根目錄新增 page 資料夾，並新增一個 about 頁面元件</p>
<p><img src="/../images/js/vue/vue-5.png"></p>
<p>about 元件會對應到 &#x2F;about 路由。</p>
<p><img src="/../images/js/vue/vue-6.png"></p>
<p>要新增首頁的話，只要在 page 資料夾內新增 index.vue 檔，會對應到路由 &#x2F; 。</p>
<p>另外要刪除根目錄上的 app.vue ，這樣 page 內的 index.vue 才能正確以首頁呈現。</p>
<h2 id="建立子路由"><a href="#建立子路由" class="headerlink" title="建立子路由"></a>建立子路由</h2><p>要建立子路由只要在 page 資料夾內在新增子資料夾</p>
<p><img src="/../images/js/vue/vue-7.png"></p>
<p>上面檔案分別對應以下路由</p>
<ul>
<li>singleProducts.vue: &#x2F;products&#x2F;singleProducts</li>
<li>index.vue: &#x2F;products&#x2F;</li>
</ul>
<h2 id="動態路由"><a href="#動態路由" class="headerlink" title="動態路由"></a>動態路由</h2><p>當我們想用同一個元件依照不同路由資訊呈現不同資訊時，可使用 動態路由。</p>
<p><img src="/../images/js/vue/vue-8.png"></p>
<p>[productId].vue 括號內代表動態路由參數</p>
<p>上圖會對應到路由 &#x2F;products&#x2F;123， 其中 123 是動態更改的路由參數</p>
<p>在 [productId].vue 可如以下方式取得路由參數</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Product for &#123;&#123; productId &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const &#123; productId &#125; = useRoute().params;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP Networking(3) Url 和 Uri</title>
    <url>/2024/04/11/2024-4-11-http-url/</url>
    <content><![CDATA[<h2 id="什麼是-URI"><a href="#什麼是-URI" class="headerlink" title="什麼是 URI?"></a>什麼是 URI?</h2><p>URI，Uniform Resource Identifier，統一資源標識符。顧名思義就是 用來標識網際網路中的資源，像是 HTML檔案、程式碼、影片、圖片等等都適用 URI 來標識。</p>
<p>其實 URL 就是一種 URI，URL 像是 <a href="https://codingbeginner01.com/">https://codingbeginner01.com</a> 就是標識出這是這個網頁的首頁</p>
<p>所以 URL 也是一種標識。</p>
<h2 id="URI-與-URL的差別？"><a href="#URI-與-URL的差別？" class="headerlink" title="URI 與 URL的差別？"></a>URI 與 URL的差別？</h2><p>我們可以說 URL 是一種 URI</p>
<p>但不一定每一種 URI 都是 URL</p>
<p>因為 URL 當中，又有包含 URN</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*wF0ebnCoLGnMQST5BXlXKA.png"></p>
<p>URN，Uniform Resource Name，統一資源名稱，就像是一個人的名字</p>
<p>URN 就是幫資源取名字（名字）</p>
<p>URL 就像是幫資源定位（地址）</p>
<h2 id="URL-範例"><a href="#URL-範例" class="headerlink" title="URL 範例"></a>URL 範例</h2><p>以下是一個 URL 範例</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*T3_lh-uOxAx1YaqQ2or0yw.png"></p>
<p>範例包含以下部分</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">protocol: http: (http協議 必填)</span><br><span class="line">username: (用戶帳號 選填)</span><br><span class="line">password: (用戶密碼 選填)</span><br><span class="line">domain:  (domain name 必填)</span><br><span class="line">port: 8080 (不填的話會使用預設port，http預設是80，https預設是443)</span><br><span class="line">path:  (區分不同頁面用，預設使用 / )</span><br><span class="line">query:  (query搜尋字串，選填)</span><br><span class="line">fragment: (#跳到網頁指定區域，選填)</span><br></pre></td></tr></table></figure>

<h2 id="protocols"><a href="#protocols" class="headerlink" title="protocols"></a>protocols</h2><p>除了 http:&#x2F;&#x2F; 以外也有其他 protocol 協議例如</p>
<ul>
<li><p>http</p>
</li>
<li><p>ftp</p>
</li>
<li><p>mailto</p>
</li>
<li><p>https</p>
</li>
<li><p><a href="http://example.com/">http://example.com</a></p>
</li>
<li><p>mailto:<a href="mailto:&#110;&#x6f;&#114;&#x65;&#112;&#108;&#x79;&#x40;&#x66;&#x61;&#110;&#x74;&#x61;&#115;&#121;&#113;&#x75;&#101;&#x73;&#x74;&#x2e;&#97;&#x70;&#112;">&#110;&#x6f;&#114;&#x65;&#112;&#108;&#x79;&#x40;&#x66;&#x61;&#110;&#x74;&#x61;&#115;&#121;&#113;&#x75;&#101;&#x73;&#x74;&#x2e;&#97;&#x70;&#112;</a></p>
</li>
</ul>
<p>並不是所有協議都需要 &#x2F;&#x2F; ，http 需要是因為包含了 authority component，像 username、password等。 mailto 因為沒有 authority component 就不需要 &#x2F;&#x2F; </p>
<h2 id="port"><a href="#port" class="headerlink" title="port"></a>port</h2><p>當同一個 ip 位置的主機，同時有不同的 server 時，例如一個提供網頁html的server和一個database的server。當client端傳送請求時，我要怎麼知道要由哪個server回應呢?</p>
<p>這時就會用到 port 來區分前端的要求，如下圖 用port 80 來處理網頁的請求， port 5432 則處理對資料庫的請求。</p>
<p>port 可以同時存在 65000個，所以不太會有相衝突的問題。</p>
<p><img src="https://cdn-images-1.medium.com/max/1000/1*jq2I8pYzO_a9J72q0dCR1w.png"></p>
<h2 id="URL-PATHS"><a href="#URL-PATHS" class="headerlink" title="URL PATHS"></a><a href="https://www.boot.dev/assignments/8317565a-bdba-4fcd-a4f8-a2f1882e5776">URL PATHS</a></h2><p>在早期的網路開發中，URL’s path 通常會對應伺服器的資料夾路徑。例如，如果有一個網站 <a href="https://exampleblog.com,是運行在伺服器端的/">https://exampleblog.com，是運行在伺服器端的</a> &#x2F;home 資料夾路徑。那當我們對 <a href="https://exampleblog.com/site/index.html">https://exampleblog.com/site/index.html</a> 訪問時，index.html 應該是在伺服器的 &#x2F;home&#x2F;site資料夾裡。</p>
<p>但在許多現在的 web 伺服器裡，URL’s path 不會對應伺服器的資料夾路徑，他可能只代表一些參數要被傳給伺服器而已</p>
<h2 id="Query-parameters"><a href="#Query-parameters" class="headerlink" title="Query parameters"></a><a href="https://www.boot.dev/assignments/c2935040-fdbe-4d14-adbf-16c068d8e0ae">Query parameters</a></h2><p>在 Url 中的 Query parameters，通常不會更改你要瀏覽哪個網頁，而是在同個網頁中因為 parameters 參數更改而改變網頁的內容。</p>
<p>以下是 googel 是如何使用 Query parameters</p>
<ol>
<li><p>打開瀏覽器前往 <a href="https://www.google.com/">google</a></p>
</li>
<li><p>在搜尋頁面搜尋 hello world</p>
</li>
<li><p>這時網頁的url 應該是 <a href="https://www.google.com/search?q=hello+world">https://www.google.com/search?q=hello+world</a></p>
</li>
<li><p>再把 URL 改成 <a href="https://www.google.com/search?q=hello+universe%EF%BC%8C%E4%B8%A6%E6%8C%89%E4%B8%8Benter">https://www.google.com/search?q=hello+universe，並按下enter</a></p>
</li>
</ol>
<p>這時你會看到新的query hello+universe 的搜尋結果，google就是用 query 來決定搜尋的結果。</p>
]]></content>
      <categories>
        <category>HTTP Networking</category>
      </categories>
      <tags>
        <tag>HTTP Networking系列</tag>
      </tags>
  </entry>
  <entry>
    <title>img 圖片空白間隙問題</title>
    <url>/2024/04/29/2024-4-29-html-img/</url>
    <content><![CDATA[<h2 id="空隙問題"><a href="#空隙問題" class="headerlink" title="空隙問題"></a>空隙問題</h2><p>img 圖片預設下方會有 2 ~ 3px 空隙<br><img src="https://i.imgur.com/VggWh0X.png"></p>
<p>因為圖片預設是 inline 元素，而 inline 元素的 vertical-align 設定預設是和父元素的 baseline 對齊的，而 baseline 本身又和父元素底邊有一定的間距。這個間距是來自於英文文字中像是 j, y 這些超過基準線的字符。</p>
<p><img src="https://i.stack.imgur.com/Ousrm.gif"></p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 解法一是可以將 <span class="attribute">vertical-align</span> 設為 <span class="attribute">top</span>/<span class="attribute">bottom</span>/text-<span class="attribute">top</span>/text-<span class="attribute">bottom</span></span><br><span class="line">// 改變與父元素的對齊基準</span><br><span class="line"><span class="selector-id">#align-base</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 解法二的用意是將 <span class="selector-tag">img</span> 改為區塊元素</span><br><span class="line"><span class="selector-id">#display</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="selector-class">.box</span> 是指 <span class="selector-tag">img</span> 的父元素，解法三的方式是讓文字大小為 <span class="number">0px</span>，進而讓因為文字而有的間距不見。</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>(10) SCSS練功坊-Math</title>
    <url>/2024/04/05/2024-4-5-scss-math/</url>
    <content><![CDATA[<h2 id="使用-Math"><a href="#使用-Math" class="headerlink" title="使用 Math"></a>使用 Math</h2><p>在 scss 裡可以使用內建的 math 函式來計算。<br>用 <code>@use &#39;sass:math&#39;;</code> 來將 math 函式載入。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;sass:math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@debug</span> math.div(<span class="number">10</span>, <span class="number">3</span>); <span class="comment">// 除法 10 / 3 =&gt; 3.3333 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@debug</span> math.<span class="variable">$pi</span>;  <span class="comment">// 圓周率 3.1415926536</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@debug</span> math.floor(<span class="number">2.6</span>); <span class="comment">// 四捨五入，無條件去小數點 =&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@debug</span> math.max(<span class="number">1px</span>, <span class="number">20px</span>, <span class="number">15px</span>, <span class="number">12px</span>); <span class="comment">// 取最大值 =&gt; 20px</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>scss</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
</search>
